{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Binary Indexed Tree/9385E82DD2EEB5AB2AB9C2BABDD9CDA5.gif","path":"Binary Indexed Tree/9385E82DD2EEB5AB2AB9C2BABDD9CDA5.gif","modified":1,"renderable":0},{"_id":"source/Binary Indexed Tree/BA897C1126BE8DC856F1F1EE1090A016.png","path":"Binary Indexed Tree/BA897C1126BE8DC856F1F1EE1090A016.png","modified":1,"renderable":0},{"_id":"source/Binary Indexed Tree/similarpairsExample.png","path":"Binary Indexed Tree/similarpairsExample.png","modified":1,"renderable":0},{"_id":"source/Floyd Warshall Algorithm/1525461069-142e0d306a-blindingLightsExample.png","path":"Floyd Warshall Algorithm/1525461069-142e0d306a-blindingLightsExample.png","modified":1,"renderable":0},{"_id":"source/Floyd Warshall Algorithm/F67D409077D41849E6DA24F72FA750E5.png","path":"Floyd Warshall Algorithm/F67D409077D41849E6DA24F72FA750E5.png","modified":1,"renderable":0},{"_id":"source/Ford–Fulkerson Algorithm for Maximum Flow Problem/D3E155A097BE2558402055553E91AF0B.png","path":"Ford–Fulkerson Algorithm for Maximum Flow Problem/D3E155A097BE2558402055553E91AF0B.png","modified":1,"renderable":0},{"_id":"source/Ford–Fulkerson Algorithm for Maximum Flow Problem/E8F4263CD10E3CF47AEFDE0F3E249A6A.png","path":"Ford–Fulkerson Algorithm for Maximum Flow Problem/E8F4263CD10E3CF47AEFDE0F3E249A6A.png","modified":1,"renderable":0},{"_id":"source/assets/bin.svg","path":"assets/bin.svg","modified":1,"renderable":0},{"_id":"source/assets/facebook.svg","path":"assets/facebook.svg","modified":1,"renderable":0},{"_id":"source/assets/github.svg","path":"assets/github.svg","modified":1,"renderable":0},{"_id":"source/assets/profile.jpeg","path":"assets/profile.jpeg","modified":1,"renderable":0},{"_id":"source/assets/favicon.ico","path":"assets/favicon.ico","modified":1,"renderable":0},{"_id":"source/assets/sidebar_bg.jpg","path":"assets/sidebar_bg.jpg","modified":1,"renderable":0},{"_id":"source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"source/Ford–Fulkerson Algorithm for Maximum Flow Problem/8192498D233C4AD0BAE0735BE71A5BCF.jpg","path":"Ford–Fulkerson Algorithm for Maximum Flow Problem/8192498D233C4AD0BAE0735BE71A5BCF.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"source/Binary Indexed Tree/17D73226B1C6E38DC57F3305CB3A4FE3.jpg","path":"Binary Indexed Tree/17D73226B1C6E38DC57F3305CB3A4FE3.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.__config.yml","hash":"6b6c1b2fd6fd4b23275d27e758f3584fce371cc9","modified":1561099009536},{"_id":"themes/next/._config.yml.swp","hash":"5f8f7dd334389d188d3a140c4a8179e4a2bd46c8","modified":1561099009540},{"_id":"themes/next/.all-contributorsrc","hash":"d139a3b623b2e40bbff5c96ad44adf7dbdbc5be1","modified":1561099009540},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1561099009540},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1561099009544},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1561099009544},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1561099009548},{"_id":"themes/next/.gitignore","hash":"3558a8b174618c7a643aceb13233edd729813f9a","modified":1561099009548},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1561099009548},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1561099009552},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1561099009556},{"_id":"themes/next/README.md","hash":"7958c3f70b2133b479ddaf525cc4b6d87a37e04a","modified":1561099009556},{"_id":"themes/next/_config.yml","hash":"be7f37e6acde341b8e0b388e3c8ddc1b52eb8b6b","modified":1561099009560},{"_id":"themes/next/bower.json","hash":"9bc3900396a375f817db47d147bb6d207c661678","modified":1561099009560},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1561099009560},{"_id":"themes/next/gulpfile.coffee","hash":"23bd9587807edc4dbecb5c5a29ab96ade24458b5","modified":1561099009560},{"_id":"themes/next/package.json","hash":"0284636ddd0e06ae593f4887819f3a35b08c1370","modified":1561099009564},{"_id":"source/Binary Indexed Tree/9385E82DD2EEB5AB2AB9C2BABDD9CDA5.gif","hash":"a9c6050b3cd3934a3883b9cde345193c3e5259b1","modified":1561099000544},{"_id":"source/Binary Indexed Tree/BA897C1126BE8DC856F1F1EE1090A016.png","hash":"5261974a342fab005886b9d253d064b4ffc4608d","modified":1561099000548},{"_id":"source/Binary Indexed Tree/similarpairsExample.png","hash":"6c76b00f6ca6099af0902fd94f618d0d7084c487","modified":1561099000548},{"_id":"source/Floyd Warshall Algorithm/1525461069-142e0d306a-blindingLightsExample.png","hash":"0cea21bfba53b75629301e749dcdecea8f8c819a","modified":1561099000556},{"_id":"source/Floyd Warshall Algorithm/F67D409077D41849E6DA24F72FA750E5.png","hash":"53263a36c5582ae002b6315c97e9ad6439b612a7","modified":1561099000560},{"_id":"source/Ford–Fulkerson Algorithm for Maximum Flow Problem/D3E155A097BE2558402055553E91AF0B.png","hash":"b26f00eca7707d4d5a07984bc110010c43b4a588","modified":1561099000580},{"_id":"source/_posts/Binary Indexed Tree.md","hash":"798ff476b1046225b6ecc4e99175959e3bc77cf9","modified":1561099000604},{"_id":"source/Ford–Fulkerson Algorithm for Maximum Flow Problem/E8F4263CD10E3CF47AEFDE0F3E249A6A.png","hash":"5fd2795d66823d3ac62ad854ae6811dfe06cca63","modified":1561099000584},{"_id":"source/_posts/Floyd Warshall Algorithm.md","hash":"008adc4fbb4f2dec73d55e3296425ab70cf9072f","modified":1561099000600},{"_id":"source/_posts/Ford–Fulkerson Algorithm for Maximum Flow Problem.md","hash":"7c667fcb48c53cbdb560564a2c50eda1eb633576","modified":1561099000604},{"_id":"source/_posts/Implicit Treap.md","hash":"f672eedd23621eadc7cb45383373eee2a918e313","modified":1561099000604},{"_id":"source/_posts/Notes for Computer Networking 6e.md","hash":"647359ac918d561a554c06a07d281a02443b43f8","modified":1561099000608},{"_id":"source/_posts/Notes for NASM Learning.md","hash":"1c1176548d7f4565bba2793cc8b06e56435a2566","modified":1561099000608},{"_id":"source/_posts/Notes for better_tutorial in Nasm.md","hash":"6a2740e612ad515e4bc908f60e1c25f0e750abcd","modified":1561099000608},{"_id":"source/assets/bin.svg","hash":"10c98979d69d4278bdce97eb1b576da81028d0f9","modified":1561099000636},{"_id":"source/_posts/Union-Find Algorithm.md","hash":"617d0afc4f11bc76e0c00963dead4f7b1dbeb53c","modified":1561099000608},{"_id":"source/assets/facebook.svg","hash":"253ec9ee52cf794f63402f405813233b13eb9a8a","modified":1561099000624},{"_id":"source/assets/github.css","hash":"06dd7af250791fa3a1550be960faf6c550caabbb","modified":1561099000640},{"_id":"source/assets/github.svg","hash":"42e66421ff642307384e1ae535a96ef6a84474ac","modified":1561099000640},{"_id":"source/assets/profile.jpeg","hash":"608ba35e57f8e1259ed7327dbd6c4061987566d2","modified":1561099000644},{"_id":"source/categories/index.md","hash":"de2e90fd5127c72bb2e2f46b546a736de786e6a4","modified":1561099000656},{"_id":"themes/next/.git/FETCH_HEAD","hash":"41791d716b6e79431c177b0a3b2cc14e2a0ba0c8","modified":1561099006668},{"_id":"source/tags/index.md","hash":"7c9180bd24897fce9f5b893cba100f227a23d745","modified":1561099001292},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1561099006668},{"_id":"themes/next/.git/ORIG_HEAD","hash":"4e15ef2f89146a14d5390e17c8b166f96e6bfc52","modified":1561099006668},{"_id":"themes/next/.git/config","hash":"3aa58ad32c5b537b7b64d00c59cc2787e74a3fd2","modified":1561099006672},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1561099006672},{"_id":"themes/next/.git/index","hash":"debd971b8f85c405ab3fc9316afec70f4f43cd0f","modified":1561099006676},{"_id":"themes/next/.git/packed-refs","hash":"4e3787f8a6e4aa88625f6c2c3df15ad5fe701137","modified":1561099006676},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1561099006716},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"7ce6cdc8adcbfda68fcbcc54c8b9fd3434a37993","modified":1561099006720},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1561099006720},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3239625bb2573e61f7bcce27a74882a9ff7021e9","modified":1561099006716},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1561099006720},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1561099006732},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1561099006732},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1561099006736},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1561099006736},{"_id":"themes/next/.github/release-drafter.yml","hash":"c9fdbbdf712327a8ae1ed5972973a75802e245bc","modified":1561099006740},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1561099006740},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1561099006740},{"_id":"themes/next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1561099006744},{"_id":"themes/next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1561099006744},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1561099006800},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"0d2f22ea09dd1ef63c66164e048d8239d2ccb2b8","modified":1561099006800},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1561099006800},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1561099006804},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1561099006804},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1561099006796},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1561099006808},{"_id":"themes/next/docs/MATH.md","hash":"026d2cff73c22a30ea39c50783557ff4913aceac","modified":1561099006808},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1561099006812},{"_id":"themes/next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1561099006832},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1561099006836},{"_id":"themes/next/languages/es.yml","hash":"1752429687861b5cedd063c6ebe5dacefbe7e5a7","modified":1561099006840},{"_id":"themes/next/languages/fa.yml","hash":"cd41db832af5e399590b70a5227cfe0b0e98e101","modified":1561099006844},{"_id":"themes/next/languages/fr.yml","hash":"7005c2b42c2c6e82bd7a1be5cc2f443b5fc79105","modified":1561099006844},{"_id":"themes/next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1561099006848},{"_id":"themes/next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1561099006848},{"_id":"themes/next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1561099006848},{"_id":"themes/next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1561099006852},{"_id":"themes/next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1561099006852},{"_id":"themes/next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1561099006832},{"_id":"themes/next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1561099006868},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1561099006868},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1561099006868},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1561099006868},{"_id":"themes/next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1561099006876},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1561099006864},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1561099006876},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1561099006876},{"_id":"themes/next/layout/_layout.swig","hash":"74701fcf2303d59400587436ab4c244e04df7ad9","modified":1561099007252},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1561099007252},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1561099007264},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1561099007264},{"_id":"themes/next/layout/page.swig","hash":"d8a6cbf6f611c5d68d5da430cb6dc7010ff2c7e0","modified":1561099007268},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1561099007268},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1561099007272},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1561099007272},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1561099007352},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1561099007356},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1561099009524},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1561099009524},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1561099009524},{"_id":"source/assets/favicon.ico","hash":"f96b5d7ffa582463d67aad584a2e0a63413a98e6","modified":1561099000636},{"_id":"source/assets/sidebar_bg.jpg","hash":"fcac10fcf8cadc06c942aca07d748835b1ab437e","modified":1561099000648},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561099008316},{"_id":"source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1561099001232},{"_id":"source/lib/pace/README.md","hash":"33b87ed998d59f117dc329f999a4ffc744b41e79","modified":1561099001232},{"_id":"source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1561099001232},{"_id":"source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1561099001240},{"_id":"source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1561099001244},{"_id":"source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1561099001244},{"_id":"source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1561099001248},{"_id":"source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1561099001248},{"_id":"source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1561099001252},{"_id":"source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1561099001252},{"_id":"source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1561099001256},{"_id":"source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1561099001252},{"_id":"source/lib/pace/pace-theme-loading-bar.min.css","hash":"9cc8c7c2471ec3af5dbbff77731b21d58590fe60","modified":1561099001260},{"_id":"source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1561099001260},{"_id":"source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1561099001260},{"_id":"source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1561099001264},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1561099006000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1561099006004},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1561099006004},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1561099006004},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1561099006008},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1561099006008},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1561099006012},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1561099006012},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1561099005992},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1561099006012},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1561099006028},{"_id":"themes/next/.git/logs/HEAD","hash":"c2e88059e6bc0bc38227409aff5ee3745fd141a7","modified":1561099006088},{"_id":"themes/next/.git/refs/stash","hash":"372acb3363213914f6163e0e3e3f62d675b77e05","modified":1561099006656},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1561099006712},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1561099006704},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1561099006716},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1561099006716},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1561099006768},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1561099006772},{"_id":"themes/next/docs/ru/README.md","hash":"4d7ef717d0b57288e606996ee56c20ffd59d5a99","modified":1561099006772},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1561099006776},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1561099006788},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1561099006788},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"650fcb9135b6f09d48e866c19e0dbccd831367f1","modified":1561099006788},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1561099006792},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1561099006784},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1561099006792},{"_id":"themes/next/docs/zh-CN/README.md","hash":"cdd7a8bdcf4a83ff4c74ee6c95c6bcc0b8c1831c","modified":1561099006792},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"83feca62190abcca0332915ffe0eefe582573085","modified":1561099006792},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1561099006796},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1561099006920},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1561099006920},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1561099006920},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1561099006952},{"_id":"themes/next/layout/_macro/post.swig","hash":"8a8a2865b09e933c454d9a68e54dd9063dc8c559","modified":1561099006956},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"480d93619479dcfcbec6906803bb38b2dfbeae53","modified":1561099006956},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5352f96f4544c1520babf1cec7b44ddf2f8057b3","modified":1561099007052},{"_id":"themes/next/layout/_partials/footer.swig","hash":"589f545333e21a8c7823bce89ab45cf1eb7db6e2","modified":1561099007056},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1561099007056},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1561099007056},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1561099007064},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"50be1762f60222379a8bef5e42ab1a0f3872b7ff","modified":1561099007124},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1561099007124},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"012e3ece672cc3b13d5e032139f328d3426d7d65","modified":1561099007124},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1561099007124},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1561099007128},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"83470eb401f78f4683907c48ad6760b90730daa3","modified":1561099007128},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1561099007224},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1561099007228},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"eefb68b69b4b0ed558ee0324ccd711990059b20d","modified":1561099007228},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"9be7c2c9cef63006866d1232c5289901e46be7ed","modified":1561099007228},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1561099007228},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1561099007232},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1561099007240},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1561099007240},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"7757bd285732e857996b99af9d917953589fac5e","modified":1561099007244},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1561099007248},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1561099007248},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1561099007248},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1561099007304},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1561099007320},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1561099007320},{"_id":"themes/next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1561099007328},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1561099007328},{"_id":"themes/next/scripts/tags/exturl.js","hash":"d605918cf819887e9555212dbe12da97fd887a0b","modified":1561099007328},{"_id":"themes/next/scripts/tags/full-image.js","hash":"fcb41c1c81560ed49dc4024654388a28ee7d32b0","modified":1561099007336},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"598220fa92ff3540dcab74f633ba41523daa8364","modified":1561099007340},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1561099007340},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1561099007344},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1561099007344},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1561099007344},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1561099007348},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1561099007348},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1561099007352},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1561099008296},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1561099008336},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1561099008324},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1561099008336},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1561099008340},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1561099008344},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1561099008344},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1561099008348},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1561099008344},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1561099008348},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1561099008348},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1561099008352},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1561099008356},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1561099008356},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1561099008356},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1561099008360},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1561099008360},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1561099008364},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1561099008364},{"_id":"themes/next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1561099008388},{"_id":"themes/next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1561099008388},{"_id":"themes/next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1561099008388},{"_id":"themes/next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1561099008392},{"_id":"themes/next/source/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1561099008392},{"_id":"themes/next/source/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1561099008392},{"_id":"themes/next/source/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1561099008392},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1561099008396},{"_id":"themes/next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1561099008396},{"_id":"themes/next/source/js/utils.js","hash":"81913c5f75d0949443833cf4269ad63bd7f9be6f","modified":1561099008396},{"_id":"source/Ford–Fulkerson Algorithm for Maximum Flow Problem/8192498D233C4AD0BAE0735BE71A5BCF.jpg","hash":"e83261230dd9dc1253b7b629e67a392494f22246","modified":1561099000576},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561099008124},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561099008120},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561099008124},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561099008288},{"_id":"source/lib/pace/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1561099001208},{"_id":"source/lib/pace/.git/config","hash":"2d2d89ef45678eb4b801dd56299bb7b0216456e9","modified":1561099001212},{"_id":"source/lib/pace/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1561099001200},{"_id":"source/lib/pace/.git/index","hash":"cd90750de558b2f2afc5067ee55c07ba8b82b75b","modified":1561099001212},{"_id":"source/lib/pace/.git/packed-refs","hash":"a68869d7570e87c999c13c6066845d4c3c70fe92","modified":1561099001212},{"_id":"source/lib/pace/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1561099001228},{"_id":"themes/next/.git/logs/refs/stash","hash":"460bdc731f1a1d0acfceab0aefa9097cb82cc896","modified":1561099006088},{"_id":"themes/next/.git/objects/0e/60d081a617b36189c39622296ef53ee4e920fa","hash":"fdb48148281540318ce3e4193a4deec707136cc2","modified":1561099006108},{"_id":"themes/next/.git/objects/8c/5c8e5bf9c57832daadcffffbd53d8805d80c1d","hash":"17699bdafdc97272224d50587eb8b75c232cb7d6","modified":1561099006120},{"_id":"themes/next/.git/objects/8f/5a5fc69498bfb525a45dbd4b7e28984ad4278d","hash":"66b8daab92f0dd0d477b1c54a9b36df3ac32b762","modified":1561099006128},{"_id":"themes/next/.git/objects/9c/d61f1dd1bfdf7bb606a74cc8bfbea0ce141022","hash":"f2c5206c6513a6bb31f926597980cc3592bd0ff4","modified":1561099006136},{"_id":"themes/next/.git/objects/a9/aa251cc4c8be34914c01e260f39f64b3a60646","hash":"4e8fd0a99f65484c20a825555b3e9d24e7d3b05c","modified":1561099006148},{"_id":"themes/next/.git/objects/b7/232ff887a84e87f138d7ee35c214681f2052d3","hash":"d99d856d41387117f036f6686d0574e3b0140dec","modified":1561099006164},{"_id":"themes/next/.git/objects/ad/07d60752681ce5cdfddf004f735efd6624c1d1","hash":"ac9da5759e5cd8f87609518c5c4cfacf52468b65","modified":1561099006156},{"_id":"themes/next/.git/objects/b9/34fe1c6484ab2f8740956635f88185c645d073","hash":"55a58e832cf457d6d541d48bc62035dbe4538c38","modified":1561099006176},{"_id":"themes/next/.git/objects/cc/6dd9906504ffbbe9cf6c7d50dbafed55b8b0d6","hash":"a20170efd657295590d812f960a5e9d05b784228","modified":1561099006188},{"_id":"themes/next/.git/objects/d8/fa879dff6329a31740e6acb2a5a77cde3ec4d9","hash":"f519977310f6a5b8a3e36b6cf50cc8ff1feb6c1c","modified":1561099006200},{"_id":"themes/next/.git/objects/df/b5e0234e615ec264d5ba08caeffccd270d3be9","hash":"c5f936aac6d099004d02ab6c728873d9e4fa4bdd","modified":1561099006208},{"_id":"themes/next/.git/objects/ff/7387a620022ee30e602d580954c59a7bd2464d","hash":"9ca82cb206444b1a04157e916514d93fb4b48bb4","modified":1561099006220},{"_id":"themes/next/.git/objects/pack/pack-6e6c40c98201904c5542fcb7d3df63be52b52dc5.idx","hash":"a24930d1bb018d24e8d3153a85693bd23c10b216","modified":1561099006240},{"_id":"themes/next/.git/refs/heads/master","hash":"6b5bb21b05d017800f719efe3115ae99e2c64bbd","modified":1561099006620},{"_id":"themes/next/.git/refs/tags/v7.1.1","hash":"9a421ea6943f449d6efad94759fbf056fb880391","modified":1561099006652},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1561099006952},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1561099006952},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1561099006988},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1561099006988},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1561099007000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"36eae78a4d7160a1c5e59ca3f7333f00b43d359b","modified":1561099006988},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1561099007000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1561099007000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1561099007008},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1561099007000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1561099007012},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1561099007024},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1561099007024},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1561099007024},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1561099007024},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1561099007032},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1561099007036},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1561099007036},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1561099007036},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1561099007044},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1561099007044},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1561099007052},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1561099007112},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1561099007120},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1561099007120},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1561099007120},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1561099007164},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1561099007120},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1561099007164},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1561099007164},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1561099007168},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1561099007168},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"3d01fa6edc0ad73f81813613f2e8a610777f1852","modified":1561099007172},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1561099007172},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"9fa1ca7059243197d8fbbd35108c36629a254570","modified":1561099007176},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1561099007176},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1561099007176},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1561099007184},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1561099007180},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1561099007184},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1561099007184},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1561099007192},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1561099007196},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"c77a2e7ef5f449a445fb4d36b055721fba4a81af","modified":1561099007196},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1561099007196},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"388efc86af7f19c05ad0e26720cd24ee012d20b9","modified":1561099007196},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"2cbaae65a020bbb0e9265364488aff8bf84fa48d","modified":1561099007200},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1561099007200},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4a908b613518878b9b69576c5dba4a5185f552ab","modified":1561099007200},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1561099007208},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1561099007212},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1561099007212},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1561099007224},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1561099007224},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1561099007224},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"b9670adb46f0a8a8b7a93d99a1ba9390de1f310f","modified":1561099008112},{"_id":"themes/next/source/css/_custom/._custom.styl","hash":"9e4165a732103f40c18ac2b6d200f0a39f89060c","modified":1561099008112},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1561099008124},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"2036bbb73afd43251982ce824f06c6e88d35a2ef","modified":1561099008124},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1561099008288},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1561099008288},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1561099008288},{"_id":"themes/next/source/css/_variables/base.styl","hash":"640f25a63770af5566ccc9cec79c40a4f1c0b29e","modified":1561099008292},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"b9670adb46f0a8a8b7a93d99a1ba9390de1f310f","modified":1561099008292},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1561099008120},{"_id":"themes/next/source/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1561099008388},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1561099008384},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1561099008872},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1561099008872},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"a79e7b87a27497922f34e1013d7299f838badc79","modified":1561099008872},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1561099008872},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1561099008948},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1561099008948},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1561099008948},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1561099008948},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1561099008952},{"_id":"themes/next/source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1561099009472},{"_id":"themes/next/source/lib/pace/README.md","hash":"33b87ed998d59f117dc329f999a4ffc744b41e79","modified":1561099009472},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1561099009472},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1561099009472},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1561099009476},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1561099009476},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1561099009476},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1561099009476},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1561099009476},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1561099009480},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1561099009480},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1561099009480},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1561099009480},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1561099009484},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1561099009484},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1561099009484},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1561099009508},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1561099009512},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1561099009512},{"_id":"source/Binary Indexed Tree/17D73226B1C6E38DC57F3305CB3A4FE3.jpg","hash":"8f3d3fd8f2ac8b6c8ff019d488cab68f7e42e8b4","modified":1561099000544},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1561099008964},{"_id":"source/lib/pace/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1561099000728},{"_id":"source/lib/pace/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1561099000732},{"_id":"source/lib/pace/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1561099000732},{"_id":"source/lib/pace/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1561099000732},{"_id":"source/lib/pace/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1561099000736},{"_id":"source/lib/pace/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1561099000736},{"_id":"source/lib/pace/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1561099000740},{"_id":"source/lib/pace/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1561099000740},{"_id":"source/lib/pace/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1561099000720},{"_id":"source/lib/pace/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1561099000752},{"_id":"source/lib/pace/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1561099000740},{"_id":"source/lib/pace/.git/logs/HEAD","hash":"e6fdcb8f57da619df06e9af419c52e895b38de1d","modified":1561099000828},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"f46b9414d3a11111cd30a149d6f5883c0cbde729","modified":1561099006056},{"_id":"themes/next/.git/objects/pack/pack-6e6c40c98201904c5542fcb7d3df63be52b52dc5.pack","hash":"37f4aec231d364ac4026ca9ae0046912acd5d03d","modified":1561099006244},{"_id":"themes/next/.git/objects/pack/pack-b1b8616fd008765bd6c0770a1a58e27b6977ea0c.idx","hash":"bfc1dc418ea130e7d4ac64e5f8ba7aacb3912fdc","modified":1561099006256},{"_id":"themes/next/.git/objects/pack/pack-c994a468edaea4e4c6f4e40d59b3b23fa3b307c3.idx","hash":"5fe16e032a468e5b643a385ac9ced425a6352e56","modified":1561099006436},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1561099006640},{"_id":"themes/next/.git/refs/remotes/origin/font-refactoring","hash":"3c4ee26997ed42dc37d51b248bb9a3f603e548f5","modified":1561099006644},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"6b5bb21b05d017800f719efe3115ae99e2c64bbd","modified":1561099006640},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"fe5ff961b86004a306778c7d33a85b32e5e00e48","modified":1561099008052},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"c8b3225396cb444d8baeb94bac78e5216b992a81","modified":1561099008056},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1561099008056},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1561099008056},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1561099008056},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1561099008060},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"ce2aae8f3ed8ceac3a2417e0481044cf69c788aa","modified":1561099008060},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1561099008068},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1561099008076},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1561099008084},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1561099008084},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a190ef2f49bdbf69604b48ad1dc7197895ee9b6","modified":1561099008088},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1561099008088},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1561099008088},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1561099008088},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1561099008248},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a2d298dbdcbfd758518fd74b63897bc80ce15a5","modified":1561099008156},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1561099008252},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1561099008252},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1561099008252},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1561099008256},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1561099008200},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1561099008204},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1561099008200},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1561099008204},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1561099008208},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1561099008208},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a96e46a6ae86c423f932bc2bc78b9f7453e4e4e5","modified":1561099008208},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1561099008272},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1561099008264},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"b6dac5bbf20f090cf4b67d156f030d7170dfb39c","modified":1561099008276},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"6400c98a9fd2b9a8502269f33355bd7ab3ff793b","modified":1561099008276},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1561099008276},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1561099008280},{"_id":"themes/next/source/lib/fastclick/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1561099008844},{"_id":"themes/next/source/lib/fastclick/.git/config","hash":"b3285b8a5b5ad0c3676cbeffd6fd7ea7b63902f1","modified":1561099008844},{"_id":"themes/next/source/lib/fastclick/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1561099008844},{"_id":"themes/next/source/lib/fastclick/.git/index","hash":"0aa30bb7903975cc8845ebaf93583c6cec91d4ec","modified":1561099008848},{"_id":"themes/next/source/lib/fastclick/.git/packed-refs","hash":"3174d374da1ea705a0aac9feaac35339e203c442","modified":1561099008848},{"_id":"themes/next/source/lib/fastclick/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1561099008860},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"9782a228f911ef442a03390a0064b40102fc1682","modified":1561099008868},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"4496faa08c7d2979747f15c7b79cdf79e5a91cc1","modified":1561099008868},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1561099008908},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1561099008908},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1561099008912},{"_id":"themes/next/source/lib/pace/.git/config","hash":"2d2d89ef45678eb4b801dd56299bb7b0216456e9","modified":1561099009460},{"_id":"themes/next/source/lib/pace/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1561099009448},{"_id":"themes/next/source/lib/pace/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1561099009456},{"_id":"themes/next/source/lib/pace/.git/index","hash":"27952519f86f3f88130fb753f52a22db5843a1ac","modified":1561099009460},{"_id":"themes/next/source/lib/pace/.git/packed-refs","hash":"a68869d7570e87c999c13c6066845d4c3c70fe92","modified":1561099009460},{"_id":"themes/next/source/lib/pace/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1561099009468},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1561099008936},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1561099008944},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1561099009504},{"_id":"source/lib/pace/.git/objects/00/13175fe71888324d9142744034e8296501174a","hash":"0ad0e50f7fe91fe14491924aa4b1e2e8f060a5cd","modified":1561099000848},{"_id":"source/lib/pace/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1561099000868},{"_id":"source/lib/pace/.git/objects/1c/159365320ef5dde63906912f3df067376b40d0","hash":"1dd6b7373c3f9c67e34aa319c9c08fd0f667156a","modified":1561099000880},{"_id":"source/lib/pace/.git/objects/23/4f9b3e93f06a85cb2ec01acc872ccdc2bec7cb","hash":"63f8640eceff35a80175a102fcbd8789e690cfaa","modified":1561099000888},{"_id":"source/lib/pace/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1561099000900},{"_id":"source/lib/pace/.git/objects/35/a749d823ad0aae6111a76dc501a1170478f376","hash":"e757129fb6bca3170b62b05f3e850e4b55f3ae88","modified":1561099000908},{"_id":"source/lib/pace/.git/objects/41/28e69301ad36a283c0fc523f3aef89644d2467","hash":"d8b985cf431fbdc5b4fa3be89e27db7a3437c920","modified":1561099000924},{"_id":"source/lib/pace/.git/objects/3e/dcd352d2a1a60dbb6a43e7e9f00bab8b55791a","hash":"725bf5094855cd943dd1cd351906fb1ebec1d861","modified":1561099000916},{"_id":"source/lib/pace/.git/objects/49/0db22b657dd64430d003fe2831905a54858b22","hash":"43694656c4c331cfa3667afca630bd486ac0d0fe","modified":1561099000940},{"_id":"source/lib/pace/.git/objects/4d/fbb499a4f7b2f26a535c335cd66c966ff8b261","hash":"14e4cdcc137045c7efed32f796273d40c9fcef87","modified":1561099000948},{"_id":"source/lib/pace/.git/objects/53/3d55db0342c2b011ac05703c3b42e88a25c1ed","hash":"c48454760d2e04602a5499188b33d38839c58aee","modified":1561099000956},{"_id":"source/lib/pace/.git/objects/60/0378418401f2b0e7c58407a7bbc5a5196cfa51","hash":"20489d796247dda758599f40cbfcf14d194ef64a","modified":1561099000972},{"_id":"source/lib/pace/.git/objects/61/fcbe3a99ad371eacdf3a3703883f8e95e072c8","hash":"480b60d684f9a077ade5dda0acfc75bcd9597aff","modified":1561099000980},{"_id":"source/lib/pace/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1561099000996},{"_id":"source/lib/pace/.git/objects/82/8dcba3c8a21de08d1eb38f2eee453b51543188","hash":"629aad2ee2e564790e78cd46e99ad396544960ab","modified":1561099001004},{"_id":"source/lib/pace/.git/objects/84/a17ac7b4fe9cea559de91f00af88f810bff7f1","hash":"b41b6d3cbccd75b711f0523bba1c26bf19b0a862","modified":1561099001012},{"_id":"source/lib/pace/.git/objects/8b/b4535a79cc15127f8906b24c4e0bb4a38a5947","hash":"9c2d65a63f18929b09f3592dda064f24309ff98b","modified":1561099001028},{"_id":"source/lib/pace/.git/objects/97/1e8a1f2ad6d45f693980c106af0aead9d1c215","hash":"e45f0963920a53a57f6b53d178e5b05a8e315189","modified":1561099001036},{"_id":"source/lib/pace/.git/objects/a6/dbd9c99e726f621e2bdcd3c6fe2795a5d4272d","hash":"25350dd31f504af7206610ced355d162aabda8dd","modified":1561099001056},{"_id":"source/lib/pace/.git/objects/9b/3058068409f2282607ebb91717d7a6a1406230","hash":"651c5857021e11dc397df86dbe0f01e6c7dc7f16","modified":1561099001048},{"_id":"source/lib/pace/.git/objects/aa/813c5a6398600e01b740696cd889eb3becad84","hash":"c62a1513ca820dc59fe1cd6d9ec16c92e0e2fbf0","modified":1561099001064},{"_id":"source/lib/pace/.git/objects/c0/05c71f1a000d8187df58083d215c962d7f5505","hash":"dffd212ca2ec705233fabe82a6f483d6be4b151d","modified":1561099001080},{"_id":"source/lib/pace/.git/objects/da/79363b808519d44a7eda67d7bc81e1587a06e8","hash":"0dc5dc27991da9a09d705e488bc3f1fe5a4d4728","modified":1561099001088},{"_id":"source/lib/pace/.git/objects/de/79ab6539ac3702aaac64b879d95e6575f4eefa","hash":"0046fefd52ed4679e0fee757cc91ced94e3ddc12","modified":1561099001096},{"_id":"source/lib/pace/.git/refs/heads/master","hash":"2cf353bc3f5e2816a3a0e05d3f154a777200f091","modified":1561099001160},{"_id":"source/lib/pace/.git/objects/f3/0e0a99bb016267bde55537dd47b3657ae59544","hash":"8bf0bc17a6111b6a82981073133f33cc8e815c41","modified":1561099001108},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"c10ff55e20b187e3a25dc605116b25ffa2720c2e","modified":1561099006084},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"ac21356f29da4ca0a023961df158a7f414a10611","modified":1561099006088},{"_id":"themes/next/.git/logs/refs/remotes/origin/font-refactoring","hash":"805cf5ca86063466f7cf241ec48bb7ab2c349bcc","modified":1561099006088},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1561099007436},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1561099007444},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1561099007448},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1561099007448},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1561099007452},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1561099007452},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1561099007448},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1561099007464},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1561099007468},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e9dd8de7d98f1478ac7d351624fffd3d8738c905","modified":1561099007468},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1561099007476},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1561099007476},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1561099007480},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1561099007480},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1561099007480},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"80addb9b725e329915c05c27b9fadaf56457a9b3","modified":1561099007480},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1561099007484},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1561099007508},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"6a75bb1f2435f4e895cbbb5abbddf6e8f7257804","modified":1561099007512},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1561099007512},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1561099007516},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1561099007520},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"1385862a5c0bd845015d165aadbd1a6add7b72d7","modified":1561099007516},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b082d07b13a3d55b4c032fd351dfa9a4fd74edec","modified":1561099007520},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1561099007524},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1561099007500},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1561099007524},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1561099007532},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1561099007528},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1561099007536},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1561099007532},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1561099007536},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a3170630d8e085889a4bdc20eb7f09c5a0479c47","modified":1561099007536},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"9224b566cd2632f64c1a964e2c786cee93b93286","modified":1561099007976},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"707527c9950a7459355c8abcf4751c0964de0bc1","modified":1561099007976},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1561099007976},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1561099007976},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1561099007980},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"c2d9c3b6fbfa65544e6b5a55d3cb2149df04a8a9","modified":1561099007980},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c01609176929590f8f347075a9a12b661acd661e","modified":1561099007980},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1561099007980},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1561099007980},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1561099007984},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1561099007992},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1561099008004},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1561099008004},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1561099008004},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1561099008008},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"21b32840d8b3a14b10770153114778304ba6d1b0","modified":1561099008008},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"fcda60fecff1479adaf6521cf629cda2506337a8","modified":1561099008012},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1561099008012},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1561099008028},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1561099008032},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1561099008032},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"f1d9ee1f86a179741f2478f8c70ca11ab578810e","modified":1561099008032},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1561099008044},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1561099008044},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1561099008048},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1561099008048},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"03c4fa9573fddd930552784cf484fd2ee7825323","modified":1561099008052},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1561099008248},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1561099008176},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1561099008052},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1561099008184},{"_id":"themes/next/source/lib/fastclick/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1561099008452},{"_id":"themes/next/source/lib/fastclick/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1561099008452},{"_id":"themes/next/source/lib/fastclick/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1561099008456},{"_id":"themes/next/source/lib/fastclick/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1561099008464},{"_id":"themes/next/source/lib/fastclick/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1561099008464},{"_id":"themes/next/source/lib/fastclick/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1561099008468},{"_id":"themes/next/source/lib/fastclick/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1561099008472},{"_id":"themes/next/source/lib/fastclick/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1561099008472},{"_id":"themes/next/source/lib/fastclick/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1561099008452},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1561099008928},{"_id":"themes/next/source/lib/fastclick/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1561099008472},{"_id":"themes/next/source/lib/fastclick/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1561099008484},{"_id":"themes/next/source/lib/fastclick/.git/logs/HEAD","hash":"2e55462199433a84f4e570df42a6c3c0bc839033","modified":1561099008560},{"_id":"themes/next/source/lib/pace/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1561099009012},{"_id":"themes/next/source/lib/pace/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1561099009012},{"_id":"themes/next/source/lib/pace/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1561099009012},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1561099009016},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1561099009016},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1561099009020},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1561099009024},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1561099009020},{"_id":"themes/next/source/lib/pace/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1561099009000},{"_id":"themes/next/source/lib/pace/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1561099009024},{"_id":"themes/next/source/lib/pace/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1561099009040},{"_id":"themes/next/source/lib/pace/.git/logs/HEAD","hash":"18479bb654e6c378e6c8f52e07765567b990ccdc","modified":1561099009096},{"_id":"source/lib/pace/.git/logs/refs/heads/master","hash":"e6fdcb8f57da619df06e9af419c52e895b38de1d","modified":1561099000796},{"_id":"source/lib/pace/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1561099001180},{"_id":"themes/next/source/lib/fastclick/.git/objects/06/e01f4e99baeefef4a483cd1e902193bcce988a","hash":"2452637b09d437ee414cb711f3091e6aaf49eaf9","modified":1561099008580},{"_id":"themes/next/source/lib/fastclick/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1561099008588},{"_id":"themes/next/source/lib/fastclick/.git/objects/0d/dbe7d4eb11134cfb5fa14b3e190bd9fb3ed82b","hash":"95af863cce08aad6f65d6932af9ef732712740f7","modified":1561099008600},{"_id":"themes/next/source/lib/fastclick/.git/objects/18/e1abd47f6274ffd7ed82dc00decd1c00c6e323","hash":"5a569722fa4f206672376b71c3e1c16f643e64f7","modified":1561099008604},{"_id":"themes/next/source/lib/fastclick/.git/objects/22/5ff660ec3fd4a0a98aa3dbeb6c6c66ecac5e54","hash":"2535a5fadc55fcfbcf38cb047f660985cc22c729","modified":1561099008624},{"_id":"themes/next/source/lib/fastclick/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1561099008632},{"_id":"themes/next/source/lib/fastclick/.git/objects/3a/f4f9d6f14e39b48e9c449de1c660e245a2bc27","hash":"bf9503b3af60d018a7b9ad9e177b424b14a970e5","modified":1561099008640},{"_id":"themes/next/source/lib/fastclick/.git/objects/61/c39a632ceeb8d42b91481c0b54970cf035267a","hash":"dfb032f767e71a01cf332cfec0eca764ae7073d6","modified":1561099008652},{"_id":"themes/next/source/lib/fastclick/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1561099008660},{"_id":"themes/next/source/lib/fastclick/.git/objects/82/8e51d486478532fecc7e21d0b410a0c09e40ed","hash":"efb8b264c23d6265b18a8e8ce11b2d4e17746cd8","modified":1561099008668},{"_id":"themes/next/source/lib/fastclick/.git/objects/86/c3d4aeba88b97f37cd9f6b70bf2d57a7a21826","hash":"fff2a0379207fb85c1508fc1c63bed957c294202","modified":1561099008680},{"_id":"themes/next/source/lib/fastclick/.git/objects/8d/eee862332602c5f704f7f55d8a996b60cc6be8","hash":"b46e05207a48d1c732f8179a7a5b83d1649ce82d","modified":1561099008688},{"_id":"themes/next/source/lib/fastclick/.git/objects/9f/d0fb1402a4c303aebe2f19463f7e6a1e220cd5","hash":"b830d61384e84ba93984d0db1609bd2d4ad81300","modified":1561099008700},{"_id":"themes/next/source/lib/fastclick/.git/objects/b1/be81d4f11e36095d68afc4502fdb16aaf944be","hash":"3a5ba6f240fb736ae697059d327f635fbf1bec20","modified":1561099008708},{"_id":"themes/next/source/lib/fastclick/.git/objects/c2/e7e6ecb9903a6bfc8949f082afdf36271abf09","hash":"20586bdc4ffa17071096e03691f455fd681348e2","modified":1561099008728},{"_id":"themes/next/source/lib/fastclick/.git/objects/b2/5dad1c30c8b4830293330b60d39c75f7e3886e","hash":"8206eb6b273e8e6ac85535f0f7a645d3c3394885","modified":1561099008716},{"_id":"themes/next/source/lib/fastclick/.git/objects/cf/0642795f0b53282dac0e2978ae6d1b03b365b5","hash":"7c8b1e12e4d34a5e3295e98f25a3529a7f33479e","modified":1561099008744},{"_id":"themes/next/source/lib/fastclick/.git/objects/cf/abed7d73eee3176b90b91f3dd656666d8c639d","hash":"bda6cd7c2f9d7b568498f96a3d4248563034eabe","modified":1561099008748},{"_id":"themes/next/source/lib/fastclick/.git/objects/ea/f4c46b3e372e54a737e6d6cb2d4e0c386bf230","hash":"0c683fca4712fe82a3fb591d565e6c002bd7c0ac","modified":1561099008756},{"_id":"themes/next/source/lib/fastclick/.git/objects/ec/12c6da577ebf74eaad24abe751db12ea736045","hash":"a3728b76676627e7ae4227158bc169e7eb2b81a2","modified":1561099008764},{"_id":"themes/next/source/lib/fastclick/.git/objects/ef/3f987c6490745eedd60367aa3c25413f69879d","hash":"b9bdc7896f4e609871226f46720d5e425e0f65b5","modified":1561099008776},{"_id":"themes/next/source/lib/fastclick/.git/refs/heads/master","hash":"29e337078ba669ba9419e1a8f5a5175432ae9c71","modified":1561099008812},{"_id":"themes/next/source/lib/pace/.git/objects/00/13175fe71888324d9142744034e8296501174a","hash":"0ad0e50f7fe91fe14491924aa4b1e2e8f060a5cd","modified":1561099009120},{"_id":"themes/next/source/lib/pace/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1561099009128},{"_id":"themes/next/source/lib/pace/.git/objects/1c/159365320ef5dde63906912f3df067376b40d0","hash":"1dd6b7373c3f9c67e34aa319c9c08fd0f667156a","modified":1561099009140},{"_id":"themes/next/source/lib/pace/.git/objects/23/4f9b3e93f06a85cb2ec01acc872ccdc2bec7cb","hash":"63f8640eceff35a80175a102fcbd8789e690cfaa","modified":1561099009148},{"_id":"themes/next/source/lib/pace/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1561099009160},{"_id":"themes/next/source/lib/pace/.git/objects/35/a749d823ad0aae6111a76dc501a1170478f376","hash":"e757129fb6bca3170b62b05f3e850e4b55f3ae88","modified":1561099009168},{"_id":"themes/next/source/lib/pace/.git/objects/3e/dcd352d2a1a60dbb6a43e7e9f00bab8b55791a","hash":"725bf5094855cd943dd1cd351906fb1ebec1d861","modified":1561099009176},{"_id":"themes/next/source/lib/pace/.git/objects/41/28e69301ad36a283c0fc523f3aef89644d2467","hash":"d8b985cf431fbdc5b4fa3be89e27db7a3437c920","modified":1561099009188},{"_id":"themes/next/source/lib/pace/.git/objects/49/0db22b657dd64430d003fe2831905a54858b22","hash":"43694656c4c331cfa3667afca630bd486ac0d0fe","modified":1561099009200},{"_id":"themes/next/source/lib/pace/.git/objects/4d/fbb499a4f7b2f26a535c335cd66c966ff8b261","hash":"14e4cdcc137045c7efed32f796273d40c9fcef87","modified":1561099009208},{"_id":"themes/next/source/lib/pace/.git/objects/53/3d55db0342c2b011ac05703c3b42e88a25c1ed","hash":"c48454760d2e04602a5499188b33d38839c58aee","modified":1561099009216},{"_id":"themes/next/source/lib/pace/.git/objects/60/0378418401f2b0e7c58407a7bbc5a5196cfa51","hash":"20489d796247dda758599f40cbfcf14d194ef64a","modified":1561099009224},{"_id":"themes/next/source/lib/pace/.git/objects/61/fcbe3a99ad371eacdf3a3703883f8e95e072c8","hash":"480b60d684f9a077ade5dda0acfc75bcd9597aff","modified":1561099009240},{"_id":"themes/next/source/lib/pace/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1561099009248},{"_id":"themes/next/source/lib/pace/.git/objects/82/8dcba3c8a21de08d1eb38f2eee453b51543188","hash":"629aad2ee2e564790e78cd46e99ad396544960ab","modified":1561099009260},{"_id":"themes/next/source/lib/pace/.git/objects/84/a17ac7b4fe9cea559de91f00af88f810bff7f1","hash":"b41b6d3cbccd75b711f0523bba1c26bf19b0a862","modified":1561099009268},{"_id":"themes/next/source/lib/pace/.git/objects/8b/b4535a79cc15127f8906b24c4e0bb4a38a5947","hash":"9c2d65a63f18929b09f3592dda064f24309ff98b","modified":1561099009276},{"_id":"themes/next/source/lib/pace/.git/objects/97/1e8a1f2ad6d45f693980c106af0aead9d1c215","hash":"e45f0963920a53a57f6b53d178e5b05a8e315189","modified":1561099009288},{"_id":"themes/next/source/lib/pace/.git/objects/9b/3058068409f2282607ebb91717d7a6a1406230","hash":"651c5857021e11dc397df86dbe0f01e6c7dc7f16","modified":1561099009296},{"_id":"themes/next/source/lib/pace/.git/objects/a6/dbd9c99e726f621e2bdcd3c6fe2795a5d4272d","hash":"25350dd31f504af7206610ced355d162aabda8dd","modified":1561099009312},{"_id":"themes/next/source/lib/pace/.git/objects/aa/813c5a6398600e01b740696cd889eb3becad84","hash":"c62a1513ca820dc59fe1cd6d9ec16c92e0e2fbf0","modified":1561099009324},{"_id":"themes/next/source/lib/pace/.git/objects/c0/05c71f1a000d8187df58083d215c962d7f5505","hash":"dffd212ca2ec705233fabe82a6f483d6be4b151d","modified":1561099009336},{"_id":"themes/next/source/lib/pace/.git/objects/da/79363b808519d44a7eda67d7bc81e1587a06e8","hash":"0dc5dc27991da9a09d705e488bc3f1fe5a4d4728","modified":1561099009344},{"_id":"themes/next/source/lib/pace/.git/objects/de/79ab6539ac3702aaac64b879d95e6575f4eefa","hash":"0046fefd52ed4679e0fee757cc91ced94e3ddc12","modified":1561099009352},{"_id":"themes/next/source/lib/pace/.git/objects/f3/0e0a99bb016267bde55537dd47b3657ae59544","hash":"8bf0bc17a6111b6a82981073133f33cc8e815c41","modified":1561099009360},{"_id":"themes/next/source/lib/pace/.git/refs/heads/master","hash":"2cf353bc3f5e2816a3a0e05d3f154a777200f091","modified":1561099009408},{"_id":"source/lib/pace/.git/logs/refs/remotes/origin/HEAD","hash":"e6fdcb8f57da619df06e9af419c52e895b38de1d","modified":1561099000812},{"_id":"themes/next/source/lib/fastclick/.git/logs/refs/heads/master","hash":"2e55462199433a84f4e570df42a6c3c0bc839033","modified":1561099008520},{"_id":"themes/next/source/lib/fastclick/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1561099008832},{"_id":"themes/next/source/lib/pace/.git/logs/refs/heads/master","hash":"18479bb654e6c378e6c8f52e07765567b990ccdc","modified":1561099009076},{"_id":"themes/next/source/lib/pace/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1561099009428},{"_id":"themes/next/source/lib/fastclick/.git/logs/refs/remotes/origin/HEAD","hash":"2e55462199433a84f4e570df42a6c3c0bc839033","modified":1561099008560},{"_id":"themes/next/source/lib/pace/.git/logs/refs/remotes/origin/HEAD","hash":"18479bb654e6c378e6c8f52e07765567b990ccdc","modified":1561099009096},{"_id":"themes/next/.git/objects/pack/pack-b1b8616fd008765bd6c0770a1a58e27b6977ea0c.pack","hash":"814f86da34ab72cc84e2e5d62e9ca13423ff3424","modified":1561099006428},{"_id":"themes/next/.git/objects/pack/pack-c994a468edaea4e4c6f4e40d59b3b23fa3b307c3.pack","hash":"6cfdaa50ebe40eea636529d73b19f55a742b2ace","modified":1561099006592},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1561874442568},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1561874443037},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1561874443103},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1561874443108},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1561874443153},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1561874443154},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1561874443154},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1561874443155},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1561874443155},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1561874443155},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"9cc8c7c2471ec3af5dbbff77731b21d58590fe60","modified":1561874443156},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1561874443156},{"_id":"public/lib/pace/pace.min.js","hash":"97687ec6e3b823e941b22b38e5211a5eff3a5432","modified":1561874443157},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1561874443157},{"_id":"public/assets/github.css","hash":"06dd7af250791fa3a1550be960faf6c550caabbb","modified":1561874443158},{"_id":"public/search.xml","hash":"9f0915de9071e8ce8bdd079fc5e761d71defd6e0","modified":1561874443158},{"_id":"public/sitemap.xml","hash":"50eb864bd61c10115d8b3c678b0c44ed3feab039","modified":1561874443159},{"_id":"public/lib/pace/README.html","hash":"12529643263f9367644147bf3b584a99bd79ce7f","modified":1561874443567},{"_id":"public/categories/index.html","hash":"69b8bbf8f94fcb52eab3eedea070347c87a4d924","modified":1561874443568},{"_id":"public/tags/index.html","hash":"1f803b5c9f366e0b8f392b7530cda477881669a4","modified":1561874443570},{"_id":"public/2019/05/20/Notes for better_tutorial in Nasm/index.html","hash":"6f448fd7220e414966f16989baadca285774c1b0","modified":1561874443571},{"_id":"public/2019/04/30/Notes for Computer Networking 6e/index.html","hash":"abbe19348f0272e682b679a8c601e9ff1d200db4","modified":1561874443573},{"_id":"public/2019/04/30/Notes for NASM Learning/index.html","hash":"3ba558f5515888df6197d2488fc4d2edfc783c4d","modified":1561874443574},{"_id":"public/2016/12/23/Ford–Fulkerson Algorithm for Maximum Flow Problem/index.html","hash":"492f65bfbe32492e795d93c80f254a510961e059","modified":1561874443576},{"_id":"public/2016/07/19/Floyd Warshall Algorithm/index.html","hash":"0a9f6be36d8993905a06ab5fb6c796da8f6d7412","modified":1561874443577},{"_id":"public/2016/07/12/Union-Find Algorithm/index.html","hash":"e181a78db857fd25578a02f0fc0dd3a61e0f392c","modified":1561874443579},{"_id":"public/2016/07/02/Binary Indexed Tree/index.html","hash":"f4aaae641791a60a2de2a31158644e3f81661193","modified":1561874443580},{"_id":"public/2016/05/29/Implicit Treap/index.html","hash":"e11771d1cdc215daeaffaabef52b2ef2db118075","modified":1561874443582},{"_id":"public/archives/index.html","hash":"4418fe97821e62ddea02097583ae49e630094e71","modified":1561874443583},{"_id":"public/archives/2016/index.html","hash":"797651081fe029f34c33c455af4e4c7cd5be3d67","modified":1561874443585},{"_id":"public/archives/2016/05/index.html","hash":"26a38085615376f1f015d44e5d1d95801e70023d","modified":1561874443587},{"_id":"public/archives/2016/07/index.html","hash":"7399a2eab276537c101f03002e163544bed780d2","modified":1561874443588},{"_id":"public/archives/2016/12/index.html","hash":"871cbf254745ac1af7a9111d05d0966ac46a039f","modified":1561874443589},{"_id":"public/archives/2019/index.html","hash":"83be7a8a4bda8deb8284e862aa2e9033219e051d","modified":1561874443590},{"_id":"public/archives/2019/04/index.html","hash":"2143f7880270062b887834ddb45586432107649c","modified":1561874443591},{"_id":"public/archives/2019/05/index.html","hash":"6c86a3b8a7e0cdb83db0e30412c2cbcfcda27db0","modified":1561874443592},{"_id":"public/categories/Algorithms/index.html","hash":"1aceaad424dd3727c6803c3c2e45aec0d1a8bcdf","modified":1561874443592},{"_id":"public/categories/Notes/index.html","hash":"af0be5ef3ef8e526690d4dba6f8ca40fe839962a","modified":1561874443593},{"_id":"public/index.html","hash":"a46bf89543b7ccfe81b016082d7a54987667d1ce","modified":1561874443593},{"_id":"public/tags/Data-Structures/index.html","hash":"8a3f01b62d1b81f77f75a1ea11fd0aab3d3aa31a","modified":1561874443594},{"_id":"public/tags/Hackerrank/index.html","hash":"be64c42afa07eef5be6ba4c67e711e4bfdb88c24","modified":1561874443595},{"_id":"public/tags/Graph/index.html","hash":"dafabfe5a0197a977236a80674a55d8e6266e926","modified":1561874443595},{"_id":"public/tags/Computer-Networking/index.html","hash":"b71e2edb265881a39c99bf01cc018d72102ee40f","modified":1561874443596},{"_id":"public/tags/DNS/index.html","hash":"3ec328b57907a8f844519cc6b0828a81e9f0ee2f","modified":1561874443596},{"_id":"public/tags/TCP/index.html","hash":"4944a94aa6cfe334bfce89d8199b8e54de142b4b","modified":1561874443597},{"_id":"public/tags/NASM/index.html","hash":"c41c5958336cd91906ae2b85194f911e90e09ec3","modified":1561874443597},{"_id":"public/tags/Assembly/index.html","hash":"0a6c493c0715ef7a802b7ecc45b4ae9fd4fb81d7","modified":1561874443598},{"_id":"public/Binary Indexed Tree/9385E82DD2EEB5AB2AB9C2BABDD9CDA5.gif","hash":"a9c6050b3cd3934a3883b9cde345193c3e5259b1","modified":1561874443653},{"_id":"public/Binary Indexed Tree/BA897C1126BE8DC856F1F1EE1090A016.png","hash":"5261974a342fab005886b9d253d064b4ffc4608d","modified":1561874443653},{"_id":"public/Binary Indexed Tree/similarpairsExample.png","hash":"6c76b00f6ca6099af0902fd94f618d0d7084c487","modified":1561874443654},{"_id":"public/Floyd Warshall Algorithm/1525461069-142e0d306a-blindingLightsExample.png","hash":"0cea21bfba53b75629301e749dcdecea8f8c819a","modified":1561874443654},{"_id":"public/Floyd Warshall Algorithm/F67D409077D41849E6DA24F72FA750E5.png","hash":"53263a36c5582ae002b6315c97e9ad6439b612a7","modified":1561874443655},{"_id":"public/Ford–Fulkerson Algorithm for Maximum Flow Problem/D3E155A097BE2558402055553E91AF0B.png","hash":"b26f00eca7707d4d5a07984bc110010c43b4a588","modified":1561874443655},{"_id":"public/Ford–Fulkerson Algorithm for Maximum Flow Problem/E8F4263CD10E3CF47AEFDE0F3E249A6A.png","hash":"5fd2795d66823d3ac62ad854ae6811dfe06cca63","modified":1561874443656},{"_id":"public/assets/bin.svg","hash":"10c98979d69d4278bdce97eb1b576da81028d0f9","modified":1561874443656},{"_id":"public/assets/facebook.svg","hash":"253ec9ee52cf794f63402f405813233b13eb9a8a","modified":1561874443657},{"_id":"public/assets/github.svg","hash":"42e66421ff642307384e1ae535a96ef6a84474ac","modified":1561874443657},{"_id":"public/assets/profile.jpeg","hash":"608ba35e57f8e1259ed7327dbd6c4061987566d2","modified":1561874443658},{"_id":"public/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1561874443658},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1561874443659},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1561874443659},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1561874443659},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1561874443660},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1561874443660},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1561874443661},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1561874443661},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1561874443662},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1561874443662},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1561874443663},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1561874443663},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1561874443664},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1561874443664},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1561874443664},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1561874443665},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1561874443665},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1561874443666},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1561874443666},{"_id":"public/lib/fastclick/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1561874443667},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1561874443667},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1561874443667},{"_id":"public/assets/favicon.ico","hash":"f96b5d7ffa582463d67aad584a2e0a63413a98e6","modified":1561874448522},{"_id":"public/assets/sidebar_bg.jpg","hash":"fcac10fcf8cadc06c942aca07d748835b1ab437e","modified":1561874448532},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1561874448556},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1561874448558},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1561874448601},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1561874448601},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1561874448602},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1561874448603},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1561874448604},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1561874448604},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1561874448604},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1561874448605},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1561874448605},{"_id":"public/js/utils.js","hash":"81913c5f75d0949443833cf4269ad63bd7f9be6f","modified":1561874448606},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1561874448606},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1561874448607},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1561874448607},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1561874448608},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1561874448608},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"4496faa08c7d2979747f15c7b79cdf79e5a91cc1","modified":1561874448609},{"_id":"public/lib/fastclick/README.html","hash":"ca5bdf6de1eec6507ffa5c1dc9aebcc7270a146d","modified":1561874448609},{"_id":"public/css/main.css","hash":"586bb17f7bf4084b82b9c3dcdd071e5e12c2f71e","modified":1561874448610},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1561874448610},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1561874448611},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"9782a228f911ef442a03390a0064b40102fc1682","modified":1561874448611},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1561874448612},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1561874448612},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1561874448615},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1561874448616},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1561874448617},{"_id":"public/Ford–Fulkerson Algorithm for Maximum Flow Problem/8192498D233C4AD0BAE0735BE71A5BCF.jpg","hash":"e83261230dd9dc1253b7b629e67a392494f22246","modified":1561874448646},{"_id":"public/Binary Indexed Tree/17D73226B1C6E38DC57F3305CB3A4FE3.jpg","hash":"8f3d3fd8f2ac8b6c8ff019d488cab68f7e42e8b4","modified":1561874448677}],"Category":[{"name":"Algorithms","_id":"cjxijp51s0004dvw96aw6jto0"},{"name":"Notes","_id":"cjxijp55n000kdvw919vqf3rg"}],"Data":[],"Page":[{"_content":".hljs {\n    display: block;\n    background: white;\n    padding: 0.5em;\n    color: #333333;\n    overflow-x: auto\n}\n\n.comment,\n.meta {\n    color: #969896\n}\n\n.string,\n.variable,\n.template-variable,\n.strong,\n.emphasis,\n.quote {\n    color: #df5000\n}\n\n.keyword,\n.selector-tag,\n.type {\n    color: #a71d5d\n}\n\n.literal,\n.symbol,\n.bullet,\n.attribute {\n    color: #0086b3\n}\n\n.section,\n.name {\n    color: #63a35c\n}\n\n.tag {\n    color: #333333\n}\n\n.title,\n.attr,\n.selector-id,\n.selector-class,\n.selector-attr,\n.selector-pseudo {\n    color: #795da3\n}\n\n.addition {\n    color: #55a532;\n    background-color: #eaffea\n}\n\n.deletion {\n    color: #bd2c00;\n    background-color: #ffecec\n}\n\n.link {\n    text-decoration: underline\n}","source":"assets/github.css","raw":".hljs {\n    display: block;\n    background: white;\n    padding: 0.5em;\n    color: #333333;\n    overflow-x: auto\n}\n\n.comment,\n.meta {\n    color: #969896\n}\n\n.string,\n.variable,\n.template-variable,\n.strong,\n.emphasis,\n.quote {\n    color: #df5000\n}\n\n.keyword,\n.selector-tag,\n.type {\n    color: #a71d5d\n}\n\n.literal,\n.symbol,\n.bullet,\n.attribute {\n    color: #0086b3\n}\n\n.section,\n.name {\n    color: #63a35c\n}\n\n.tag {\n    color: #333333\n}\n\n.title,\n.attr,\n.selector-id,\n.selector-class,\n.selector-attr,\n.selector-pseudo {\n    color: #795da3\n}\n\n.addition {\n    color: #55a532;\n    background-color: #eaffea\n}\n\n.deletion {\n    color: #bd2c00;\n    background-color: #ffecec\n}\n\n.link {\n    text-decoration: underline\n}","date":"2019-06-21T06:36:40.640Z","updated":"2019-06-21T06:36:40.640Z","path":"assets/github.css","layout":"false","title":"","comments":1,"_id":"cjxijp50f0001dvw9m7daq0bq","content":".hljs {\n    display: block;\n    background: white;\n    padding: 0.5em;\n    color: #333333;\n    overflow-x: auto\n}\n\n.comment,\n.meta {\n    color: #969896\n}\n\n.string,\n.variable,\n.template-variable,\n.strong,\n.emphasis,\n.quote {\n    color: #df5000\n}\n\n.keyword,\n.selector-tag,\n.type {\n    color: #a71d5d\n}\n\n.literal,\n.symbol,\n.bullet,\n.attribute {\n    color: #0086b3\n}\n\n.section,\n.name {\n    color: #63a35c\n}\n\n.tag {\n    color: #333333\n}\n\n.title,\n.attr,\n.selector-id,\n.selector-class,\n.selector-attr,\n.selector-pseudo {\n    color: #795da3\n}\n\n.addition {\n    color: #55a532;\n    background-color: #eaffea\n}\n\n.deletion {\n    color: #bd2c00;\n    background-color: #ffecec\n}\n\n.link {\n    text-decoration: underline\n}","site":{"data":{}},"excerpt":"","more":".hljs {\n    display: block;\n    background: white;\n    padding: 0.5em;\n    color: #333333;\n    overflow-x: auto\n}\n\n.comment,\n.meta {\n    color: #969896\n}\n\n.string,\n.variable,\n.template-variable,\n.strong,\n.emphasis,\n.quote {\n    color: #df5000\n}\n\n.keyword,\n.selector-tag,\n.type {\n    color: #a71d5d\n}\n\n.literal,\n.symbol,\n.bullet,\n.attribute {\n    color: #0086b3\n}\n\n.section,\n.name {\n    color: #63a35c\n}\n\n.tag {\n    color: #333333\n}\n\n.title,\n.attr,\n.selector-id,\n.selector-class,\n.selector-attr,\n.selector-pseudo {\n    color: #795da3\n}\n\n.addition {\n    color: #55a532;\n    background-color: #eaffea\n}\n\n.deletion {\n    color: #bd2c00;\n    background-color: #ffecec\n}\n\n.link {\n    text-decoration: underline\n}"},{"title":"categories","date":"2019-04-13T14:59:12.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-04-13 22:59:12\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-06-21T06:36:40.656Z","path":"categories/index.html","layout":"page","_id":"cjxijp5150003dvw9id1pf21x","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-04-13T14:58:13.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-04-13 22:58:13\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-06-21T06:36:41.292Z","path":"tags/index.html","layout":"page","_id":"cjxijp52q0007dvw997pgcs39","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"<h1 align=\"center\"><a href=\"https://github.com/HubSpot/pace\">Load bar at the top</a> for <a href=\"https://github.com/theme-next\">NexT</a></h1>\n\n<h1 align=\"center\">Installation</h1>\n\n<h2 align=\"center\">Step 1 &rarr; Go to NexT dir</h2>\n\nChange dir to **NexT** directory. There must be `layout`, `source`, `languages` and other directories:\n\n```sh\n$ cd themes/next\n$ ls\nbower.json  _config.yml  docs  gulpfile.coffee  languages  layout  LICENSE.md  package.json  README.md  scripts  source  test\n```\n\n<h2 align=\"center\">Step 2 &rarr; Get module</h2>\n\nInstall module to `source/lib` directory:\n\n```sh\n$ git clone https://github.com/theme-next/theme-next-pace source/lib/pace\n```\n\n<h2 align=\"center\">Step 3 &rarr; Set it up</h2>\n\nEnable module in **NexT** `_config.yml` file:\n\n```yml\npace: true\n```\n\n<h1 align=\"center\">Update</h1>\n\n```sh\n$ cd themes/next/source/lib/pace\n$ git pull\n```\n","source":"lib/pace/README.md","raw":"<h1 align=\"center\"><a href=\"https://github.com/HubSpot/pace\">Load bar at the top</a> for <a href=\"https://github.com/theme-next\">NexT</a></h1>\n\n<h1 align=\"center\">Installation</h1>\n\n<h2 align=\"center\">Step 1 &rarr; Go to NexT dir</h2>\n\nChange dir to **NexT** directory. There must be `layout`, `source`, `languages` and other directories:\n\n```sh\n$ cd themes/next\n$ ls\nbower.json  _config.yml  docs  gulpfile.coffee  languages  layout  LICENSE.md  package.json  README.md  scripts  source  test\n```\n\n<h2 align=\"center\">Step 2 &rarr; Get module</h2>\n\nInstall module to `source/lib` directory:\n\n```sh\n$ git clone https://github.com/theme-next/theme-next-pace source/lib/pace\n```\n\n<h2 align=\"center\">Step 3 &rarr; Set it up</h2>\n\nEnable module in **NexT** `_config.yml` file:\n\n```yml\npace: true\n```\n\n<h1 align=\"center\">Update</h1>\n\n```sh\n$ cd themes/next/source/lib/pace\n$ git pull\n```\n","date":"2019-06-21T06:36:41.232Z","updated":"2019-06-21T06:36:41.232Z","path":"lib/pace/README.html","title":"","comments":1,"layout":"page","_id":"cjxijp63g001hdvw9icnk3h97","content":"<h1 align=\"center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0h1YlNwb3QvcGFjZQ==\" title=\"https://github.com/HubSpot/pace\">Load bar at the top<i class=\"fa fa-external-link\"></i></span> for <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQ=\" title=\"https://github.com/theme-next\">NexT<i class=\"fa fa-external-link\"></i></span></h1>\n\n<h1 align=\"center\">Installation</h1>\n\n<h2 align=\"center\">Step 1 &rarr; Go to NexT dir</h2>\n\n<p>Change dir to <strong>NexT</strong> directory. There must be <code>layout</code>, <code>source</code>, <code>languages</code> and other directories:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">bower.json  _config.yml  docs  gulpfile.coffee  languages  layout  LICENSE.md  package.json  README.md  scripts  <span class=\"built_in\">source</span>  <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<h2 align=\"center\">Step 2 &rarr; Get module</h2>\n\n<p>Install module to <code>source/lib</code> directory:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/theme-next/theme-next-pace <span class=\"built_in\">source</span>/lib/pace</span><br></pre></td></tr></table></figure>\n\n<h2 align=\"center\">Step 3 &rarr; Set it up</h2>\n\n<p>Enable module in <strong>NexT</strong> <code>_config.yml</code> file:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pace:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h1 align=\"center\">Update</h1>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next/<span class=\"built_in\">source</span>/lib/pace</span><br><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 align=\"center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0h1YlNwb3QvcGFjZQ==\" title=\"https://github.com/HubSpot/pace\">Load bar at the top<i class=\"fa fa-external-link\"></i></span> for <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQ=\" title=\"https://github.com/theme-next\">NexT<i class=\"fa fa-external-link\"></i></span></h1>\n\n<h1 align=\"center\">Installation</h1>\n\n<h2 align=\"center\">Step 1 &rarr; Go to NexT dir</h2>\n\n<p>Change dir to <strong>NexT</strong> directory. There must be <code>layout</code>, <code>source</code>, <code>languages</code> and other directories:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">bower.json  _config.yml  docs  gulpfile.coffee  languages  layout  LICENSE.md  package.json  README.md  scripts  <span class=\"built_in\">source</span>  <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<h2 align=\"center\">Step 2 &rarr; Get module</h2>\n\n<p>Install module to <code>source/lib</code> directory:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/theme-next/theme-next-pace <span class=\"built_in\">source</span>/lib/pace</span><br></pre></td></tr></table></figure>\n\n<h2 align=\"center\">Step 3 &rarr; Set it up</h2>\n\n<p>Enable module in <strong>NexT</strong> <code>_config.yml</code> file:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pace:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h1 align=\"center\">Update</h1>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next/<span class=\"built_in\">source</span>/lib/pace</span><br><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n\n"},{"_content":".pace,.pace .pace-progress{width:100%;overflow:hidden}.pace,.pace .pace-activity{position:fixed;top:0;left:0}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;height:12px;background:#fff}.pace-inactive{display:none}.pace .pace-progress{background-color:#29d;position:fixed;top:0;bottom:0;right:100%}.pace .pace-activity{right:-32px;bottom:0;-webkit-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);-o-transform:translate3d(0,0,0);transform:translate3d(0,0,0);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(.25,rgba(255,255,255,.2)),color-stop(.25,transparent),color-stop(.5,transparent),color-stop(.5,rgba(255,255,255,.2)),color-stop(.75,rgba(255,255,255,.2)),color-stop(.75,transparent),to(transparent));background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);-webkit-background-size:32px 32px;-moz-background-size:32px 32px;-o-background-size:32px 32px;background-size:32px 32px;-webkit-animation:pace-theme-barber-shop-motion .5s linear infinite;-moz-animation:pace-theme-barber-shop-motion .5s linear infinite;-ms-animation:pace-theme-barber-shop-motion .5s linear infinite;-o-animation:pace-theme-barber-shop-motion .5s linear infinite;animation:pace-theme-barber-shop-motion .5s linear infinite}@-webkit-keyframes pace-theme-barber-shop-motion{0%{-webkit-transform:none;transform:none}100%{-webkit-transform:translate(-32px,0);transform:translate(-32px,0)}}@-moz-keyframes pace-theme-barber-shop-motion{0%{-moz-transform:none;transform:none}100%{-moz-transform:translate(-32px,0);transform:translate(-32px,0)}}@-o-keyframes pace-theme-barber-shop-motion{0%{-o-transform:none;transform:none}100%{-o-transform:translate(-32px,0);transform:translate(-32px,0)}}@-ms-keyframes pace-theme-barber-shop-motion{0%{-ms-transform:none;transform:none}100%{-ms-transform:translate(-32px,0);transform:translate(-32px,0)}}@keyframes pace-theme-barber-shop-motion{0%{transform:none}100%{transform:translate(-32px,0)}}","source":"lib/pace/pace-theme-barber-shop.min.css","raw":".pace,.pace .pace-progress{width:100%;overflow:hidden}.pace,.pace .pace-activity{position:fixed;top:0;left:0}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;height:12px;background:#fff}.pace-inactive{display:none}.pace .pace-progress{background-color:#29d;position:fixed;top:0;bottom:0;right:100%}.pace .pace-activity{right:-32px;bottom:0;-webkit-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);-o-transform:translate3d(0,0,0);transform:translate3d(0,0,0);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(.25,rgba(255,255,255,.2)),color-stop(.25,transparent),color-stop(.5,transparent),color-stop(.5,rgba(255,255,255,.2)),color-stop(.75,rgba(255,255,255,.2)),color-stop(.75,transparent),to(transparent));background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);-webkit-background-size:32px 32px;-moz-background-size:32px 32px;-o-background-size:32px 32px;background-size:32px 32px;-webkit-animation:pace-theme-barber-shop-motion .5s linear infinite;-moz-animation:pace-theme-barber-shop-motion .5s linear infinite;-ms-animation:pace-theme-barber-shop-motion .5s linear infinite;-o-animation:pace-theme-barber-shop-motion .5s linear infinite;animation:pace-theme-barber-shop-motion .5s linear infinite}@-webkit-keyframes pace-theme-barber-shop-motion{0%{-webkit-transform:none;transform:none}100%{-webkit-transform:translate(-32px,0);transform:translate(-32px,0)}}@-moz-keyframes pace-theme-barber-shop-motion{0%{-moz-transform:none;transform:none}100%{-moz-transform:translate(-32px,0);transform:translate(-32px,0)}}@-o-keyframes pace-theme-barber-shop-motion{0%{-o-transform:none;transform:none}100%{-o-transform:translate(-32px,0);transform:translate(-32px,0)}}@-ms-keyframes pace-theme-barber-shop-motion{0%{-ms-transform:none;transform:none}100%{-ms-transform:translate(-32px,0);transform:translate(-32px,0)}}@keyframes pace-theme-barber-shop-motion{0%{transform:none}100%{transform:translate(-32px,0)}}","date":"2019-06-21T06:36:41.232Z","updated":"2019-06-21T06:36:41.232Z","path":"lib/pace/pace-theme-barber-shop.min.css","layout":"false","title":"","comments":1,"_id":"cjxijp63u001idvw9qervy9pe","content":".pace,.pace .pace-progress{width:100%;overflow:hidden}.pace,.pace .pace-activity{position:fixed;top:0;left:0}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;height:12px;background:#fff}.pace-inactive{display:none}.pace .pace-progress{background-color:#29d;position:fixed;top:0;bottom:0;right:100%}.pace .pace-activity{right:-32px;bottom:0;-webkit-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);-o-transform:translate3d(0,0,0);transform:translate3d(0,0,0);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(.25,rgba(255,255,255,.2)),color-stop(.25,transparent),color-stop(.5,transparent),color-stop(.5,rgba(255,255,255,.2)),color-stop(.75,rgba(255,255,255,.2)),color-stop(.75,transparent),to(transparent));background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);-webkit-background-size:32px 32px;-moz-background-size:32px 32px;-o-background-size:32px 32px;background-size:32px 32px;-webkit-animation:pace-theme-barber-shop-motion .5s linear infinite;-moz-animation:pace-theme-barber-shop-motion .5s linear infinite;-ms-animation:pace-theme-barber-shop-motion .5s linear infinite;-o-animation:pace-theme-barber-shop-motion .5s linear infinite;animation:pace-theme-barber-shop-motion .5s linear infinite}@-webkit-keyframes pace-theme-barber-shop-motion{0%{-webkit-transform:none;transform:none}100%{-webkit-transform:translate(-32px,0);transform:translate(-32px,0)}}@-moz-keyframes pace-theme-barber-shop-motion{0%{-moz-transform:none;transform:none}100%{-moz-transform:translate(-32px,0);transform:translate(-32px,0)}}@-o-keyframes pace-theme-barber-shop-motion{0%{-o-transform:none;transform:none}100%{-o-transform:translate(-32px,0);transform:translate(-32px,0)}}@-ms-keyframes pace-theme-barber-shop-motion{0%{-ms-transform:none;transform:none}100%{-ms-transform:translate(-32px,0);transform:translate(-32px,0)}}@keyframes pace-theme-barber-shop-motion{0%{transform:none}100%{transform:translate(-32px,0)}}","site":{"data":{}},"excerpt":"","more":".pace,.pace .pace-progress{width:100%;overflow:hidden}.pace,.pace .pace-activity{position:fixed;top:0;left:0}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;height:12px;background:#fff}.pace-inactive{display:none}.pace .pace-progress{background-color:#29d;position:fixed;top:0;bottom:0;right:100%}.pace .pace-activity{right:-32px;bottom:0;-webkit-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);-o-transform:translate3d(0,0,0);transform:translate3d(0,0,0);background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(.25,rgba(255,255,255,.2)),color-stop(.25,transparent),color-stop(.5,transparent),color-stop(.5,rgba(255,255,255,.2)),color-stop(.75,rgba(255,255,255,.2)),color-stop(.75,transparent),to(transparent));background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent);-webkit-background-size:32px 32px;-moz-background-size:32px 32px;-o-background-size:32px 32px;background-size:32px 32px;-webkit-animation:pace-theme-barber-shop-motion .5s linear infinite;-moz-animation:pace-theme-barber-shop-motion .5s linear infinite;-ms-animation:pace-theme-barber-shop-motion .5s linear infinite;-o-animation:pace-theme-barber-shop-motion .5s linear infinite;animation:pace-theme-barber-shop-motion .5s linear infinite}@-webkit-keyframes pace-theme-barber-shop-motion{0%{-webkit-transform:none;transform:none}100%{-webkit-transform:translate(-32px,0);transform:translate(-32px,0)}}@-moz-keyframes pace-theme-barber-shop-motion{0%{-moz-transform:none;transform:none}100%{-moz-transform:translate(-32px,0);transform:translate(-32px,0)}}@-o-keyframes pace-theme-barber-shop-motion{0%{-o-transform:none;transform:none}100%{-o-transform:translate(-32px,0);transform:translate(-32px,0)}}@-ms-keyframes pace-theme-barber-shop-motion{0%{-ms-transform:none;transform:none}100%{-ms-transform:translate(-32px,0);transform:translate(-32px,0)}}@keyframes pace-theme-barber-shop-motion{0%{transform:none}100%{transform:translate(-32px,0)}}"},{"_content":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace.pace-inactive .pace-progress{display:none}.pace .pace-progress{position:fixed;z-index:2000;top:0;right:0;height:5rem;width:5rem;-webkit-transform:translate3d(0,0,0)!important;-ms-transform:translate3d(0,0,0)!important;transform:translate3d(0,0,0)!important}.pace .pace-progress:after{display:block;position:absolute;top:0;right:.5rem;content:attr(data-progress-text);font-family:\"Helvetica Neue\",sans-serif;font-weight:100;font-size:5rem;line-height:1;text-align:right;color:rgba(34,153,221,.19999999999999996)}","source":"lib/pace/pace-theme-big-counter.min.css","raw":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace.pace-inactive .pace-progress{display:none}.pace .pace-progress{position:fixed;z-index:2000;top:0;right:0;height:5rem;width:5rem;-webkit-transform:translate3d(0,0,0)!important;-ms-transform:translate3d(0,0,0)!important;transform:translate3d(0,0,0)!important}.pace .pace-progress:after{display:block;position:absolute;top:0;right:.5rem;content:attr(data-progress-text);font-family:\"Helvetica Neue\",sans-serif;font-weight:100;font-size:5rem;line-height:1;text-align:right;color:rgba(34,153,221,.19999999999999996)}","date":"2019-06-21T06:36:41.240Z","updated":"2019-06-21T06:36:41.240Z","path":"lib/pace/pace-theme-big-counter.min.css","layout":"false","title":"","comments":1,"_id":"cjxijp642001jdvw9yt2sc210","content":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace.pace-inactive .pace-progress{display:none}.pace .pace-progress{position:fixed;z-index:2000;top:0;right:0;height:5rem;width:5rem;-webkit-transform:translate3d(0,0,0)!important;-ms-transform:translate3d(0,0,0)!important;transform:translate3d(0,0,0)!important}.pace .pace-progress:after{display:block;position:absolute;top:0;right:.5rem;content:attr(data-progress-text);font-family:\"Helvetica Neue\",sans-serif;font-weight:100;font-size:5rem;line-height:1;text-align:right;color:rgba(34,153,221,.19999999999999996)}","site":{"data":{}},"excerpt":"","more":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace.pace-inactive .pace-progress{display:none}.pace .pace-progress{position:fixed;z-index:2000;top:0;right:0;height:5rem;width:5rem;-webkit-transform:translate3d(0,0,0)!important;-ms-transform:translate3d(0,0,0)!important;transform:translate3d(0,0,0)!important}.pace .pace-progress:after{display:block;position:absolute;top:0;right:.5rem;content:attr(data-progress-text);font-family:\"Helvetica Neue\",sans-serif;font-weight:100;font-size:5rem;line-height:1;text-align:right;color:rgba(34,153,221,.19999999999999996)}"},{"_content":".pace{width:140px;height:300px;position:fixed;top:-90px;right:-20px;z-index:2000;-webkit-transform:scale(0);-moz-transform:scale(0);-ms-transform:scale(0);-o-transform:scale(0);transform:scale(0);opacity:0;-webkit-transition:all 2s linear 0s;-moz-transition:all 2s linear 0s;transition:all 2s linear 0s}.pace.pace-active{-webkit-transform:scale(.25);-moz-transform:scale(.25);-ms-transform:scale(.25);-o-transform:scale(.25);transform:scale(.25);opacity:1}.pace .pace-activity{width:140px;height:140px;border-radius:70px;background:#29d;position:absolute;top:0;z-index:1911;-webkit-animation:pace-bounce 1s infinite;-moz-animation:pace-bounce 1s infinite;-o-animation:pace-bounce 1s infinite;-ms-animation:pace-bounce 1s infinite;animation:pace-bounce 1s infinite}.pace .pace-progress{position:absolute;display:block;left:50%;bottom:0;z-index:1910;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-webkit-transform:scaleY(.3)!important;-moz-transform:scaleY(.3)!important;-ms-transform:scaleY(.3)!important;-o-transform:scaleY(.3)!important;transform:scaleY(.3)!important;-webkit-animation:pace-compress .5s infinite alternate;-moz-animation:pace-compress .5s infinite alternate;-o-animation:pace-compress .5s infinite alternate;-ms-animation:pace-compress .5s infinite alternate;animation:pace-compress .5s infinite alternate}@-webkit-keyframes pace-bounce{0%,100%,95%{top:0;-webkit-animation-timing-function:ease-in}50%{top:140px;height:140px;-webkit-animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;-webkit-animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;-webkit-animation-timing-function:ease-out}}@-moz-keyframes pace-bounce{0%,100%,95%{top:0;-moz-animation-timing-function:ease-in}50%{top:140px;height:140px;-moz-animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;-moz-animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;-moz-animation-timing-function:ease-out}}@keyframes pace-bounce{0%,100%,95%{top:0;animation-timing-function:ease-in}50%{top:140px;height:140px;animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;animation-timing-function:ease-out}}@-webkit-keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-webkit-animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;-webkit-animation-timing-function:ease-out}}@-moz-keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-moz-animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;-moz-animation-timing-function:ease-out}}@keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;animation-timing-function:ease-out}}","source":"lib/pace/pace-theme-bounce.min.css","raw":".pace{width:140px;height:300px;position:fixed;top:-90px;right:-20px;z-index:2000;-webkit-transform:scale(0);-moz-transform:scale(0);-ms-transform:scale(0);-o-transform:scale(0);transform:scale(0);opacity:0;-webkit-transition:all 2s linear 0s;-moz-transition:all 2s linear 0s;transition:all 2s linear 0s}.pace.pace-active{-webkit-transform:scale(.25);-moz-transform:scale(.25);-ms-transform:scale(.25);-o-transform:scale(.25);transform:scale(.25);opacity:1}.pace .pace-activity{width:140px;height:140px;border-radius:70px;background:#29d;position:absolute;top:0;z-index:1911;-webkit-animation:pace-bounce 1s infinite;-moz-animation:pace-bounce 1s infinite;-o-animation:pace-bounce 1s infinite;-ms-animation:pace-bounce 1s infinite;animation:pace-bounce 1s infinite}.pace .pace-progress{position:absolute;display:block;left:50%;bottom:0;z-index:1910;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-webkit-transform:scaleY(.3)!important;-moz-transform:scaleY(.3)!important;-ms-transform:scaleY(.3)!important;-o-transform:scaleY(.3)!important;transform:scaleY(.3)!important;-webkit-animation:pace-compress .5s infinite alternate;-moz-animation:pace-compress .5s infinite alternate;-o-animation:pace-compress .5s infinite alternate;-ms-animation:pace-compress .5s infinite alternate;animation:pace-compress .5s infinite alternate}@-webkit-keyframes pace-bounce{0%,100%,95%{top:0;-webkit-animation-timing-function:ease-in}50%{top:140px;height:140px;-webkit-animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;-webkit-animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;-webkit-animation-timing-function:ease-out}}@-moz-keyframes pace-bounce{0%,100%,95%{top:0;-moz-animation-timing-function:ease-in}50%{top:140px;height:140px;-moz-animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;-moz-animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;-moz-animation-timing-function:ease-out}}@keyframes pace-bounce{0%,100%,95%{top:0;animation-timing-function:ease-in}50%{top:140px;height:140px;animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;animation-timing-function:ease-out}}@-webkit-keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-webkit-animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;-webkit-animation-timing-function:ease-out}}@-moz-keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-moz-animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;-moz-animation-timing-function:ease-out}}@keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;animation-timing-function:ease-out}}","date":"2019-06-21T06:36:41.244Z","updated":"2019-06-21T06:36:41.244Z","path":"lib/pace/pace-theme-bounce.min.css","layout":"false","title":"","comments":1,"_id":"cjxijp649001kdvw9lgcjdudu","content":".pace{width:140px;height:300px;position:fixed;top:-90px;right:-20px;z-index:2000;-webkit-transform:scale(0);-moz-transform:scale(0);-ms-transform:scale(0);-o-transform:scale(0);transform:scale(0);opacity:0;-webkit-transition:all 2s linear 0s;-moz-transition:all 2s linear 0s;transition:all 2s linear 0s}.pace.pace-active{-webkit-transform:scale(.25);-moz-transform:scale(.25);-ms-transform:scale(.25);-o-transform:scale(.25);transform:scale(.25);opacity:1}.pace .pace-activity{width:140px;height:140px;border-radius:70px;background:#29d;position:absolute;top:0;z-index:1911;-webkit-animation:pace-bounce 1s infinite;-moz-animation:pace-bounce 1s infinite;-o-animation:pace-bounce 1s infinite;-ms-animation:pace-bounce 1s infinite;animation:pace-bounce 1s infinite}.pace .pace-progress{position:absolute;display:block;left:50%;bottom:0;z-index:1910;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-webkit-transform:scaleY(.3)!important;-moz-transform:scaleY(.3)!important;-ms-transform:scaleY(.3)!important;-o-transform:scaleY(.3)!important;transform:scaleY(.3)!important;-webkit-animation:pace-compress .5s infinite alternate;-moz-animation:pace-compress .5s infinite alternate;-o-animation:pace-compress .5s infinite alternate;-ms-animation:pace-compress .5s infinite alternate;animation:pace-compress .5s infinite alternate}@-webkit-keyframes pace-bounce{0%,100%,95%{top:0;-webkit-animation-timing-function:ease-in}50%{top:140px;height:140px;-webkit-animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;-webkit-animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;-webkit-animation-timing-function:ease-out}}@-moz-keyframes pace-bounce{0%,100%,95%{top:0;-moz-animation-timing-function:ease-in}50%{top:140px;height:140px;-moz-animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;-moz-animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;-moz-animation-timing-function:ease-out}}@keyframes pace-bounce{0%,100%,95%{top:0;animation-timing-function:ease-in}50%{top:140px;height:140px;animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;animation-timing-function:ease-out}}@-webkit-keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-webkit-animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;-webkit-animation-timing-function:ease-out}}@-moz-keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-moz-animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;-moz-animation-timing-function:ease-out}}@keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;animation-timing-function:ease-out}}","site":{"data":{}},"excerpt":"","more":".pace{width:140px;height:300px;position:fixed;top:-90px;right:-20px;z-index:2000;-webkit-transform:scale(0);-moz-transform:scale(0);-ms-transform:scale(0);-o-transform:scale(0);transform:scale(0);opacity:0;-webkit-transition:all 2s linear 0s;-moz-transition:all 2s linear 0s;transition:all 2s linear 0s}.pace.pace-active{-webkit-transform:scale(.25);-moz-transform:scale(.25);-ms-transform:scale(.25);-o-transform:scale(.25);transform:scale(.25);opacity:1}.pace .pace-activity{width:140px;height:140px;border-radius:70px;background:#29d;position:absolute;top:0;z-index:1911;-webkit-animation:pace-bounce 1s infinite;-moz-animation:pace-bounce 1s infinite;-o-animation:pace-bounce 1s infinite;-ms-animation:pace-bounce 1s infinite;animation:pace-bounce 1s infinite}.pace .pace-progress{position:absolute;display:block;left:50%;bottom:0;z-index:1910;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-webkit-transform:scaleY(.3)!important;-moz-transform:scaleY(.3)!important;-ms-transform:scaleY(.3)!important;-o-transform:scaleY(.3)!important;transform:scaleY(.3)!important;-webkit-animation:pace-compress .5s infinite alternate;-moz-animation:pace-compress .5s infinite alternate;-o-animation:pace-compress .5s infinite alternate;-ms-animation:pace-compress .5s infinite alternate;animation:pace-compress .5s infinite alternate}@-webkit-keyframes pace-bounce{0%,100%,95%{top:0;-webkit-animation-timing-function:ease-in}50%{top:140px;height:140px;-webkit-animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;-webkit-animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;-webkit-animation-timing-function:ease-out}}@-moz-keyframes pace-bounce{0%,100%,95%{top:0;-moz-animation-timing-function:ease-in}50%{top:140px;height:140px;-moz-animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;-moz-animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;-moz-animation-timing-function:ease-out}}@keyframes pace-bounce{0%,100%,95%{top:0;animation-timing-function:ease-in}50%{top:140px;height:140px;animation-timing-function:ease-out}55%{top:160px;height:120px;border-radius:70px/60px;animation-timing-function:ease-in}65%{top:120px;height:140px;border-radius:70px;animation-timing-function:ease-out}}@-webkit-keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-webkit-animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;-webkit-animation-timing-function:ease-out}}@-moz-keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;-moz-animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;-moz-animation-timing-function:ease-out}}@keyframes pace-compress{0%{bottom:0;margin-left:-30px;width:60px;height:75px;background:rgba(20,20,20,.1);box-shadow:0 0 20px 35px rgba(20,20,20,.1);border-radius:30px/40px;animation-timing-function:ease-in}100%{bottom:30px;margin-left:-10px;width:20px;height:5px;background:rgba(20,20,20,.3);box-shadow:0 0 20px 35px rgba(20,20,20,.3);border-radius:20px;animation-timing-function:ease-out}}"},{"_content":".pace,.pace .pace-progress{z-index:2000;height:60px;width:100px}.pace .pace-activity,.pace .pace-progress:before{border-radius:50%;display:block;position:absolute}.pace.pace-inactive{display:none}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0}.pace .pace-progress{position:absolute;-webkit-transform:translate3d(0,0,0)!important;-ms-transform:translate3d(0,0,0)!important;transform:translate3d(0,0,0)!important}.pace .pace-progress:before{content:attr(data-progress-text);text-align:center;color:#fff;background:#29d;font-family:\"Helvetica Neue\",sans-serif;font-size:14px;font-weight:100;line-height:1;padding:20% 0 7px;width:50%;height:40%;margin:10px 0 0 30px;z-index:999}.pace .pace-activity{font-size:15px;line-height:1;z-index:2000;-webkit-animation:pace-theme-center-atom-spin 2s linear infinite;-moz-animation:pace-theme-center-atom-spin 2s linear infinite;-o-animation:pace-theme-center-atom-spin 2s linear infinite;animation:pace-theme-center-atom-spin 2s linear infinite;border:5px solid #29d;content:' ';top:0;left:0;height:60px;width:100px}.pace .pace-activity:after,.pace .pace-activity:before{content:' ';display:block;position:absolute;top:-5px;left:-5px;height:60px;width:100px}.pace .pace-activity:after{border-radius:50%;border:5px solid #29d;-webkit-transform:rotate(60deg);-moz-transform:rotate(60deg);-o-transform:rotate(60deg);transform:rotate(60deg)}.pace .pace-activity:before{border-radius:50%;border:5px solid #29d;-webkit-transform:rotate(120deg);-moz-transform:rotate(120deg);-o-transform:rotate(120deg);transform:rotate(120deg)}@-webkit-keyframes pace-theme-center-atom-spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(359deg)}}@-moz-keyframes pace-theme-center-atom-spin{0%{-moz-transform:rotate(0)}100%{-moz-transform:rotate(359deg)}}@-o-keyframes pace-theme-center-atom-spin{0%{-o-transform:rotate(0)}100%{-o-transform:rotate(359deg)}}@keyframes pace-theme-center-atom-spin{0%{transform:rotate(0)}100%{transform:rotate(359deg)}}","source":"lib/pace/pace-theme-center-atom.min.css","raw":".pace,.pace .pace-progress{z-index:2000;height:60px;width:100px}.pace .pace-activity,.pace .pace-progress:before{border-radius:50%;display:block;position:absolute}.pace.pace-inactive{display:none}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0}.pace .pace-progress{position:absolute;-webkit-transform:translate3d(0,0,0)!important;-ms-transform:translate3d(0,0,0)!important;transform:translate3d(0,0,0)!important}.pace .pace-progress:before{content:attr(data-progress-text);text-align:center;color:#fff;background:#29d;font-family:\"Helvetica Neue\",sans-serif;font-size:14px;font-weight:100;line-height:1;padding:20% 0 7px;width:50%;height:40%;margin:10px 0 0 30px;z-index:999}.pace .pace-activity{font-size:15px;line-height:1;z-index:2000;-webkit-animation:pace-theme-center-atom-spin 2s linear infinite;-moz-animation:pace-theme-center-atom-spin 2s linear infinite;-o-animation:pace-theme-center-atom-spin 2s linear infinite;animation:pace-theme-center-atom-spin 2s linear infinite;border:5px solid #29d;content:' ';top:0;left:0;height:60px;width:100px}.pace .pace-activity:after,.pace .pace-activity:before{content:' ';display:block;position:absolute;top:-5px;left:-5px;height:60px;width:100px}.pace .pace-activity:after{border-radius:50%;border:5px solid #29d;-webkit-transform:rotate(60deg);-moz-transform:rotate(60deg);-o-transform:rotate(60deg);transform:rotate(60deg)}.pace .pace-activity:before{border-radius:50%;border:5px solid #29d;-webkit-transform:rotate(120deg);-moz-transform:rotate(120deg);-o-transform:rotate(120deg);transform:rotate(120deg)}@-webkit-keyframes pace-theme-center-atom-spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(359deg)}}@-moz-keyframes pace-theme-center-atom-spin{0%{-moz-transform:rotate(0)}100%{-moz-transform:rotate(359deg)}}@-o-keyframes pace-theme-center-atom-spin{0%{-o-transform:rotate(0)}100%{-o-transform:rotate(359deg)}}@keyframes pace-theme-center-atom-spin{0%{transform:rotate(0)}100%{transform:rotate(359deg)}}","date":"2019-06-21T06:36:41.244Z","updated":"2019-06-21T06:36:41.244Z","path":"lib/pace/pace-theme-center-atom.min.css","layout":"false","title":"","comments":1,"_id":"cjxijp64h001ldvw9042gdxxn","content":".pace,.pace .pace-progress{z-index:2000;height:60px;width:100px}.pace .pace-activity,.pace .pace-progress:before{border-radius:50%;display:block;position:absolute}.pace.pace-inactive{display:none}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0}.pace .pace-progress{position:absolute;-webkit-transform:translate3d(0,0,0)!important;-ms-transform:translate3d(0,0,0)!important;transform:translate3d(0,0,0)!important}.pace .pace-progress:before{content:attr(data-progress-text);text-align:center;color:#fff;background:#29d;font-family:\"Helvetica Neue\",sans-serif;font-size:14px;font-weight:100;line-height:1;padding:20% 0 7px;width:50%;height:40%;margin:10px 0 0 30px;z-index:999}.pace .pace-activity{font-size:15px;line-height:1;z-index:2000;-webkit-animation:pace-theme-center-atom-spin 2s linear infinite;-moz-animation:pace-theme-center-atom-spin 2s linear infinite;-o-animation:pace-theme-center-atom-spin 2s linear infinite;animation:pace-theme-center-atom-spin 2s linear infinite;border:5px solid #29d;content:' ';top:0;left:0;height:60px;width:100px}.pace .pace-activity:after,.pace .pace-activity:before{content:' ';display:block;position:absolute;top:-5px;left:-5px;height:60px;width:100px}.pace .pace-activity:after{border-radius:50%;border:5px solid #29d;-webkit-transform:rotate(60deg);-moz-transform:rotate(60deg);-o-transform:rotate(60deg);transform:rotate(60deg)}.pace .pace-activity:before{border-radius:50%;border:5px solid #29d;-webkit-transform:rotate(120deg);-moz-transform:rotate(120deg);-o-transform:rotate(120deg);transform:rotate(120deg)}@-webkit-keyframes pace-theme-center-atom-spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(359deg)}}@-moz-keyframes pace-theme-center-atom-spin{0%{-moz-transform:rotate(0)}100%{-moz-transform:rotate(359deg)}}@-o-keyframes pace-theme-center-atom-spin{0%{-o-transform:rotate(0)}100%{-o-transform:rotate(359deg)}}@keyframes pace-theme-center-atom-spin{0%{transform:rotate(0)}100%{transform:rotate(359deg)}}","site":{"data":{}},"excerpt":"","more":".pace,.pace .pace-progress{z-index:2000;height:60px;width:100px}.pace .pace-activity,.pace .pace-progress:before{border-radius:50%;display:block;position:absolute}.pace.pace-inactive{display:none}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0}.pace .pace-progress{position:absolute;-webkit-transform:translate3d(0,0,0)!important;-ms-transform:translate3d(0,0,0)!important;transform:translate3d(0,0,0)!important}.pace .pace-progress:before{content:attr(data-progress-text);text-align:center;color:#fff;background:#29d;font-family:\"Helvetica Neue\",sans-serif;font-size:14px;font-weight:100;line-height:1;padding:20% 0 7px;width:50%;height:40%;margin:10px 0 0 30px;z-index:999}.pace .pace-activity{font-size:15px;line-height:1;z-index:2000;-webkit-animation:pace-theme-center-atom-spin 2s linear infinite;-moz-animation:pace-theme-center-atom-spin 2s linear infinite;-o-animation:pace-theme-center-atom-spin 2s linear infinite;animation:pace-theme-center-atom-spin 2s linear infinite;border:5px solid #29d;content:' ';top:0;left:0;height:60px;width:100px}.pace .pace-activity:after,.pace .pace-activity:before{content:' ';display:block;position:absolute;top:-5px;left:-5px;height:60px;width:100px}.pace .pace-activity:after{border-radius:50%;border:5px solid #29d;-webkit-transform:rotate(60deg);-moz-transform:rotate(60deg);-o-transform:rotate(60deg);transform:rotate(60deg)}.pace .pace-activity:before{border-radius:50%;border:5px solid #29d;-webkit-transform:rotate(120deg);-moz-transform:rotate(120deg);-o-transform:rotate(120deg);transform:rotate(120deg)}@-webkit-keyframes pace-theme-center-atom-spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(359deg)}}@-moz-keyframes pace-theme-center-atom-spin{0%{-moz-transform:rotate(0)}100%{-moz-transform:rotate(359deg)}}@-o-keyframes pace-theme-center-atom-spin{0%{-o-transform:rotate(0)}100%{-o-transform:rotate(359deg)}}@keyframes pace-theme-center-atom-spin{0%{transform:rotate(0)}100%{transform:rotate(359deg)}}"},{"_content":".pace,.pace .pace-activity{z-index:2000;height:90px;width:90px}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0}.pace.pace-inactive .pace-activity{display:none}.pace .pace-activity,.pace .pace-activity:before{position:absolute;display:block;border-color:#29d transparent transparent;border-radius:50%}.pace .pace-activity{left:-30px;top:-30px;border-width:30px;border-style:double;-webkit-animation:spin 1s linear infinite;-moz-animation:spin 1s linear infinite;-o-animation:spin 1s linear infinite;animation:spin 1s linear infinite}.pace .pace-activity:before{content:' ';top:10px;left:10px;height:50px;width:50px;border-width:10px;border-style:solid}@-webkit-keyframes spin{100%{-webkit-transform:rotate(359deg)}}@-moz-keyframes spin{100%{-moz-transform:rotate(359deg)}}@-o-keyframes spin{100%{-moz-transform:rotate(359deg)}}@keyframes spin{100%{transform:rotate(359deg)}}","source":"lib/pace/pace-theme-center-radar.min.css","raw":".pace,.pace .pace-activity{z-index:2000;height:90px;width:90px}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0}.pace.pace-inactive .pace-activity{display:none}.pace .pace-activity,.pace .pace-activity:before{position:absolute;display:block;border-color:#29d transparent transparent;border-radius:50%}.pace .pace-activity{left:-30px;top:-30px;border-width:30px;border-style:double;-webkit-animation:spin 1s linear infinite;-moz-animation:spin 1s linear infinite;-o-animation:spin 1s linear infinite;animation:spin 1s linear infinite}.pace .pace-activity:before{content:' ';top:10px;left:10px;height:50px;width:50px;border-width:10px;border-style:solid}@-webkit-keyframes spin{100%{-webkit-transform:rotate(359deg)}}@-moz-keyframes spin{100%{-moz-transform:rotate(359deg)}}@-o-keyframes spin{100%{-moz-transform:rotate(359deg)}}@keyframes spin{100%{transform:rotate(359deg)}}","date":"2019-06-21T06:36:41.248Z","updated":"2019-06-21T06:36:41.248Z","path":"lib/pace/pace-theme-center-radar.min.css","layout":"false","title":"","comments":1,"_id":"cjxijp64o001mdvw9q3v7ajug","content":".pace,.pace .pace-activity{z-index:2000;height:90px;width:90px}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0}.pace.pace-inactive .pace-activity{display:none}.pace .pace-activity,.pace .pace-activity:before{position:absolute;display:block;border-color:#29d transparent transparent;border-radius:50%}.pace .pace-activity{left:-30px;top:-30px;border-width:30px;border-style:double;-webkit-animation:spin 1s linear infinite;-moz-animation:spin 1s linear infinite;-o-animation:spin 1s linear infinite;animation:spin 1s linear infinite}.pace .pace-activity:before{content:' ';top:10px;left:10px;height:50px;width:50px;border-width:10px;border-style:solid}@-webkit-keyframes spin{100%{-webkit-transform:rotate(359deg)}}@-moz-keyframes spin{100%{-moz-transform:rotate(359deg)}}@-o-keyframes spin{100%{-moz-transform:rotate(359deg)}}@keyframes spin{100%{transform:rotate(359deg)}}","site":{"data":{}},"excerpt":"","more":".pace,.pace .pace-activity{z-index:2000;height:90px;width:90px}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0}.pace.pace-inactive .pace-activity{display:none}.pace .pace-activity,.pace .pace-activity:before{position:absolute;display:block;border-color:#29d transparent transparent;border-radius:50%}.pace .pace-activity{left:-30px;top:-30px;border-width:30px;border-style:double;-webkit-animation:spin 1s linear infinite;-moz-animation:spin 1s linear infinite;-o-animation:spin 1s linear infinite;animation:spin 1s linear infinite}.pace .pace-activity:before{content:' ';top:10px;left:10px;height:50px;width:50px;border-width:10px;border-style:solid}@-webkit-keyframes spin{100%{-webkit-transform:rotate(359deg)}}@-moz-keyframes spin{100%{-moz-transform:rotate(359deg)}}@-o-keyframes spin{100%{-moz-transform:rotate(359deg)}}@keyframes spin{100%{transform:rotate(359deg)}}"},{"_content":".pace,.pace .pace-progress{z-index:2000;left:0;top:0;height:6rem}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;-webkit-perspective:12rem;-moz-perspective:12rem;-ms-perspective:12rem;-o-perspective:12rem;perspective:12rem;position:fixed;width:6rem;margin:auto;right:0;bottom:0}.pace.pace-inactive .pace-progress{display:none}.pace .pace-progress{display:block;position:absolute;width:6rem!important;line-height:6rem;font-size:2rem;border-radius:50%;background:rgba(34,153,221,.8);color:#fff;font-family:\"Helvetica Neue\",sans-serif;font-weight:100;text-align:center;-webkit-animation:pace-theme-center-circle-spin linear infinite 2s;-moz-animation:pace-theme-center-circle-spin linear infinite 2s;-ms-animation:pace-theme-center-circle-spin linear infinite 2s;-o-animation:pace-theme-center-circle-spin linear infinite 2s;animation:pace-theme-center-circle-spin linear infinite 2s;-webkit-transform-style:preserve-3d;-moz-transform-style:preserve-3d;-ms-transform-style:preserve-3d;-o-transform-style:preserve-3d;transform-style:preserve-3d}.pace .pace-progress:after{content:attr(data-progress-text);display:block}@-webkit-keyframes pace-theme-center-circle-spin{from{-webkit-transform:rotateY(0)}to{-webkit-transform:rotateY(360deg)}}@-moz-keyframes pace-theme-center-circle-spin{from{-moz-transform:rotateY(0)}to{-moz-transform:rotateY(360deg)}}@-ms-keyframes pace-theme-center-circle-spin{from{-ms-transform:rotateY(0)}to{-ms-transform:rotateY(360deg)}}@-o-keyframes pace-theme-center-circle-spin{from{-o-transform:rotateY(0)}to{-o-transform:rotateY(360deg)}}@keyframes pace-theme-center-circle-spin{from{transform:rotateY(0)}to{transform:rotateY(360deg)}}","source":"lib/pace/pace-theme-center-circle.min.css","raw":".pace,.pace .pace-progress{z-index:2000;left:0;top:0;height:6rem}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;-webkit-perspective:12rem;-moz-perspective:12rem;-ms-perspective:12rem;-o-perspective:12rem;perspective:12rem;position:fixed;width:6rem;margin:auto;right:0;bottom:0}.pace.pace-inactive .pace-progress{display:none}.pace .pace-progress{display:block;position:absolute;width:6rem!important;line-height:6rem;font-size:2rem;border-radius:50%;background:rgba(34,153,221,.8);color:#fff;font-family:\"Helvetica Neue\",sans-serif;font-weight:100;text-align:center;-webkit-animation:pace-theme-center-circle-spin linear infinite 2s;-moz-animation:pace-theme-center-circle-spin linear infinite 2s;-ms-animation:pace-theme-center-circle-spin linear infinite 2s;-o-animation:pace-theme-center-circle-spin linear infinite 2s;animation:pace-theme-center-circle-spin linear infinite 2s;-webkit-transform-style:preserve-3d;-moz-transform-style:preserve-3d;-ms-transform-style:preserve-3d;-o-transform-style:preserve-3d;transform-style:preserve-3d}.pace .pace-progress:after{content:attr(data-progress-text);display:block}@-webkit-keyframes pace-theme-center-circle-spin{from{-webkit-transform:rotateY(0)}to{-webkit-transform:rotateY(360deg)}}@-moz-keyframes pace-theme-center-circle-spin{from{-moz-transform:rotateY(0)}to{-moz-transform:rotateY(360deg)}}@-ms-keyframes pace-theme-center-circle-spin{from{-ms-transform:rotateY(0)}to{-ms-transform:rotateY(360deg)}}@-o-keyframes pace-theme-center-circle-spin{from{-o-transform:rotateY(0)}to{-o-transform:rotateY(360deg)}}@keyframes pace-theme-center-circle-spin{from{transform:rotateY(0)}to{transform:rotateY(360deg)}}","date":"2019-06-21T06:36:41.248Z","updated":"2019-06-21T06:36:41.248Z","path":"lib/pace/pace-theme-center-circle.min.css","layout":"false","title":"","comments":1,"_id":"cjxijp64w001ndvw9833y8f1o","content":".pace,.pace .pace-progress{z-index:2000;left:0;top:0;height:6rem}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;-webkit-perspective:12rem;-moz-perspective:12rem;-ms-perspective:12rem;-o-perspective:12rem;perspective:12rem;position:fixed;width:6rem;margin:auto;right:0;bottom:0}.pace.pace-inactive .pace-progress{display:none}.pace .pace-progress{display:block;position:absolute;width:6rem!important;line-height:6rem;font-size:2rem;border-radius:50%;background:rgba(34,153,221,.8);color:#fff;font-family:\"Helvetica Neue\",sans-serif;font-weight:100;text-align:center;-webkit-animation:pace-theme-center-circle-spin linear infinite 2s;-moz-animation:pace-theme-center-circle-spin linear infinite 2s;-ms-animation:pace-theme-center-circle-spin linear infinite 2s;-o-animation:pace-theme-center-circle-spin linear infinite 2s;animation:pace-theme-center-circle-spin linear infinite 2s;-webkit-transform-style:preserve-3d;-moz-transform-style:preserve-3d;-ms-transform-style:preserve-3d;-o-transform-style:preserve-3d;transform-style:preserve-3d}.pace .pace-progress:after{content:attr(data-progress-text);display:block}@-webkit-keyframes pace-theme-center-circle-spin{from{-webkit-transform:rotateY(0)}to{-webkit-transform:rotateY(360deg)}}@-moz-keyframes pace-theme-center-circle-spin{from{-moz-transform:rotateY(0)}to{-moz-transform:rotateY(360deg)}}@-ms-keyframes pace-theme-center-circle-spin{from{-ms-transform:rotateY(0)}to{-ms-transform:rotateY(360deg)}}@-o-keyframes pace-theme-center-circle-spin{from{-o-transform:rotateY(0)}to{-o-transform:rotateY(360deg)}}@keyframes pace-theme-center-circle-spin{from{transform:rotateY(0)}to{transform:rotateY(360deg)}}","site":{"data":{}},"excerpt":"","more":".pace,.pace .pace-progress{z-index:2000;left:0;top:0;height:6rem}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;-webkit-perspective:12rem;-moz-perspective:12rem;-ms-perspective:12rem;-o-perspective:12rem;perspective:12rem;position:fixed;width:6rem;margin:auto;right:0;bottom:0}.pace.pace-inactive .pace-progress{display:none}.pace .pace-progress{display:block;position:absolute;width:6rem!important;line-height:6rem;font-size:2rem;border-radius:50%;background:rgba(34,153,221,.8);color:#fff;font-family:\"Helvetica Neue\",sans-serif;font-weight:100;text-align:center;-webkit-animation:pace-theme-center-circle-spin linear infinite 2s;-moz-animation:pace-theme-center-circle-spin linear infinite 2s;-ms-animation:pace-theme-center-circle-spin linear infinite 2s;-o-animation:pace-theme-center-circle-spin linear infinite 2s;animation:pace-theme-center-circle-spin linear infinite 2s;-webkit-transform-style:preserve-3d;-moz-transform-style:preserve-3d;-ms-transform-style:preserve-3d;-o-transform-style:preserve-3d;transform-style:preserve-3d}.pace .pace-progress:after{content:attr(data-progress-text);display:block}@-webkit-keyframes pace-theme-center-circle-spin{from{-webkit-transform:rotateY(0)}to{-webkit-transform:rotateY(360deg)}}@-moz-keyframes pace-theme-center-circle-spin{from{-moz-transform:rotateY(0)}to{-moz-transform:rotateY(360deg)}}@-ms-keyframes pace-theme-center-circle-spin{from{-ms-transform:rotateY(0)}to{-ms-transform:rotateY(360deg)}}@-o-keyframes pace-theme-center-circle-spin{from{-o-transform:rotateY(0)}to{-o-transform:rotateY(360deg)}}@keyframes pace-theme-center-circle-spin{from{transform:rotateY(0)}to{transform:rotateY(360deg)}}"},{"_content":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace .pace-activity{display:block;position:fixed;z-index:2000;top:0;right:0;width:300px;height:300px;background:#29d;-webkit-transition:-webkit-transform .3s;transition:transform .3s;-webkit-transform:translateX(100%) translateY(-100%) rotate(45deg);transform:translateX(100%) translateY(-100%) rotate(45deg);pointer-events:none}.pace.pace-active .pace-activity{-webkit-transform:translateX(50%) translateY(-50%) rotate(45deg);transform:translateX(50%) translateY(-50%) rotate(45deg)}.pace .pace-activity::after,.pace .pace-activity::before{-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;bottom:30px;left:50%;display:block;border:5px solid #fff;border-radius:50%;content:''}.pace .pace-activity::before{margin-left:-40px;width:80px;height:80px;border-right-color:rgba(0,0,0,.2);border-left-color:rgba(0,0,0,.2);-webkit-animation:pace-theme-corner-indicator-spin 3s linear infinite;animation:pace-theme-corner-indicator-spin 3s linear infinite}.pace .pace-activity::after{bottom:50px;margin-left:-20px;width:40px;height:40px;border-top-color:rgba(0,0,0,.2);border-bottom-color:rgba(0,0,0,.2);-webkit-animation:pace-theme-corner-indicator-spin 1s linear infinite;animation:pace-theme-corner-indicator-spin 1s linear infinite}@-webkit-keyframes pace-theme-corner-indicator-spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(359deg)}}@keyframes pace-theme-corner-indicator-spin{0%{transform:rotate(0)}100%{transform:rotate(359deg)}}","source":"lib/pace/pace-theme-corner-indicator.min.css","raw":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace .pace-activity{display:block;position:fixed;z-index:2000;top:0;right:0;width:300px;height:300px;background:#29d;-webkit-transition:-webkit-transform .3s;transition:transform .3s;-webkit-transform:translateX(100%) translateY(-100%) rotate(45deg);transform:translateX(100%) translateY(-100%) rotate(45deg);pointer-events:none}.pace.pace-active .pace-activity{-webkit-transform:translateX(50%) translateY(-50%) rotate(45deg);transform:translateX(50%) translateY(-50%) rotate(45deg)}.pace .pace-activity::after,.pace .pace-activity::before{-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;bottom:30px;left:50%;display:block;border:5px solid #fff;border-radius:50%;content:''}.pace .pace-activity::before{margin-left:-40px;width:80px;height:80px;border-right-color:rgba(0,0,0,.2);border-left-color:rgba(0,0,0,.2);-webkit-animation:pace-theme-corner-indicator-spin 3s linear infinite;animation:pace-theme-corner-indicator-spin 3s linear infinite}.pace .pace-activity::after{bottom:50px;margin-left:-20px;width:40px;height:40px;border-top-color:rgba(0,0,0,.2);border-bottom-color:rgba(0,0,0,.2);-webkit-animation:pace-theme-corner-indicator-spin 1s linear infinite;animation:pace-theme-corner-indicator-spin 1s linear infinite}@-webkit-keyframes pace-theme-corner-indicator-spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(359deg)}}@keyframes pace-theme-corner-indicator-spin{0%{transform:rotate(0)}100%{transform:rotate(359deg)}}","date":"2019-06-21T06:36:41.252Z","updated":"2019-06-21T06:36:41.252Z","path":"lib/pace/pace-theme-corner-indicator.min.css","layout":"false","title":"","comments":1,"_id":"cjxijp652001odvw9nrb1f53w","content":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace .pace-activity{display:block;position:fixed;z-index:2000;top:0;right:0;width:300px;height:300px;background:#29d;-webkit-transition:-webkit-transform .3s;transition:transform .3s;-webkit-transform:translateX(100%) translateY(-100%) rotate(45deg);transform:translateX(100%) translateY(-100%) rotate(45deg);pointer-events:none}.pace.pace-active .pace-activity{-webkit-transform:translateX(50%) translateY(-50%) rotate(45deg);transform:translateX(50%) translateY(-50%) rotate(45deg)}.pace .pace-activity::after,.pace .pace-activity::before{-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;bottom:30px;left:50%;display:block;border:5px solid #fff;border-radius:50%;content:''}.pace .pace-activity::before{margin-left:-40px;width:80px;height:80px;border-right-color:rgba(0,0,0,.2);border-left-color:rgba(0,0,0,.2);-webkit-animation:pace-theme-corner-indicator-spin 3s linear infinite;animation:pace-theme-corner-indicator-spin 3s linear infinite}.pace .pace-activity::after{bottom:50px;margin-left:-20px;width:40px;height:40px;border-top-color:rgba(0,0,0,.2);border-bottom-color:rgba(0,0,0,.2);-webkit-animation:pace-theme-corner-indicator-spin 1s linear infinite;animation:pace-theme-corner-indicator-spin 1s linear infinite}@-webkit-keyframes pace-theme-corner-indicator-spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(359deg)}}@keyframes pace-theme-corner-indicator-spin{0%{transform:rotate(0)}100%{transform:rotate(359deg)}}","site":{"data":{}},"excerpt":"","more":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace .pace-activity{display:block;position:fixed;z-index:2000;top:0;right:0;width:300px;height:300px;background:#29d;-webkit-transition:-webkit-transform .3s;transition:transform .3s;-webkit-transform:translateX(100%) translateY(-100%) rotate(45deg);transform:translateX(100%) translateY(-100%) rotate(45deg);pointer-events:none}.pace.pace-active .pace-activity{-webkit-transform:translateX(50%) translateY(-50%) rotate(45deg);transform:translateX(50%) translateY(-50%) rotate(45deg)}.pace .pace-activity::after,.pace .pace-activity::before{-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;bottom:30px;left:50%;display:block;border:5px solid #fff;border-radius:50%;content:''}.pace .pace-activity::before{margin-left:-40px;width:80px;height:80px;border-right-color:rgba(0,0,0,.2);border-left-color:rgba(0,0,0,.2);-webkit-animation:pace-theme-corner-indicator-spin 3s linear infinite;animation:pace-theme-corner-indicator-spin 3s linear infinite}.pace .pace-activity::after{bottom:50px;margin-left:-20px;width:40px;height:40px;border-top-color:rgba(0,0,0,.2);border-bottom-color:rgba(0,0,0,.2);-webkit-animation:pace-theme-corner-indicator-spin 1s linear infinite;animation:pace-theme-corner-indicator-spin 1s linear infinite}@-webkit-keyframes pace-theme-corner-indicator-spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(359deg)}}@keyframes pace-theme-corner-indicator-spin{0%{transform:rotate(0)}100%{transform:rotate(359deg)}}"},{"_content":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0;height:5px;width:200px;background:#fff;border:1px solid #29d;overflow:hidden}.pace .pace-progress{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box;-o-box-sizing:border-box;box-sizing:border-box;-webkit-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);-o-transform:translate3d(0,0,0);transform:translate3d(0,0,0);max-width:200px;z-index:2000;display:block;position:absolute;top:0;right:100%;height:100%;width:100%;background:#29d}.pace.pace-inactive{display:none}","source":"lib/pace/pace-theme-center-simple.min.css","raw":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0;height:5px;width:200px;background:#fff;border:1px solid #29d;overflow:hidden}.pace .pace-progress{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box;-o-box-sizing:border-box;box-sizing:border-box;-webkit-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);-o-transform:translate3d(0,0,0);transform:translate3d(0,0,0);max-width:200px;z-index:2000;display:block;position:absolute;top:0;right:100%;height:100%;width:100%;background:#29d}.pace.pace-inactive{display:none}","date":"2019-06-21T06:36:41.252Z","updated":"2019-06-21T06:36:41.252Z","path":"lib/pace/pace-theme-center-simple.min.css","layout":"false","title":"","comments":1,"_id":"cjxijp659001pdvw9jzclzkaw","content":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0;height:5px;width:200px;background:#fff;border:1px solid #29d;overflow:hidden}.pace .pace-progress{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box;-o-box-sizing:border-box;box-sizing:border-box;-webkit-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);-o-transform:translate3d(0,0,0);transform:translate3d(0,0,0);max-width:200px;z-index:2000;display:block;position:absolute;top:0;right:100%;height:100%;width:100%;background:#29d}.pace.pace-inactive{display:none}","site":{"data":{}},"excerpt":"","more":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;position:fixed;margin:auto;top:0;left:0;right:0;bottom:0;height:5px;width:200px;background:#fff;border:1px solid #29d;overflow:hidden}.pace .pace-progress{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;-ms-box-sizing:border-box;-o-box-sizing:border-box;box-sizing:border-box;-webkit-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);-o-transform:translate3d(0,0,0);transform:translate3d(0,0,0);max-width:200px;z-index:2000;display:block;position:absolute;top:0;right:100%;height:100%;width:100%;background:#29d}.pace.pace-inactive{display:none}"},{"_content":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background:#29d;position:fixed;z-index:2000;top:0;right:100%;width:100%;height:2px}.pace .pace-progress-inner{display:block;position:absolute;right:0;width:100px;height:100%;box-shadow:0 0 10px #29d,0 0 5px #29d;opacity:1;-webkit-transform:rotate(3deg) translate(0,-4px);-moz-transform:rotate(3deg) translate(0,-4px);-ms-transform:rotate(3deg) translate(0,-4px);-o-transform:rotate(3deg) translate(0,-4px);transform:rotate(3deg) translate(0,-4px)}.pace .pace-activity{display:block;position:fixed;z-index:2000;top:15px;right:15px;width:14px;height:14px;border:2px solid transparent;border-top-color:#29d;border-left-color:#29d;border-radius:10px;-webkit-animation:pace-spinner .4s linear infinite;-moz-animation:pace-spinner .4s linear infinite;-ms-animation:pace-spinner .4s linear infinite;-o-animation:pace-spinner .4s linear infinite;animation:pace-spinner .4s linear infinite}@-webkit-keyframes pace-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-moz-keyframes pace-spinner{0%{-moz-transform:rotate(0);transform:rotate(0)}100%{-moz-transform:rotate(360deg);transform:rotate(360deg)}}@-o-keyframes pace-spinner{0%{-o-transform:rotate(0);transform:rotate(0)}100%{-o-transform:rotate(360deg);transform:rotate(360deg)}}@-ms-keyframes pace-spinner{0%{-ms-transform:rotate(0);transform:rotate(0)}100%{-ms-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes pace-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}","source":"lib/pace/pace-theme-flash.min.css","raw":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background:#29d;position:fixed;z-index:2000;top:0;right:100%;width:100%;height:2px}.pace .pace-progress-inner{display:block;position:absolute;right:0;width:100px;height:100%;box-shadow:0 0 10px #29d,0 0 5px #29d;opacity:1;-webkit-transform:rotate(3deg) translate(0,-4px);-moz-transform:rotate(3deg) translate(0,-4px);-ms-transform:rotate(3deg) translate(0,-4px);-o-transform:rotate(3deg) translate(0,-4px);transform:rotate(3deg) translate(0,-4px)}.pace .pace-activity{display:block;position:fixed;z-index:2000;top:15px;right:15px;width:14px;height:14px;border:2px solid transparent;border-top-color:#29d;border-left-color:#29d;border-radius:10px;-webkit-animation:pace-spinner .4s linear infinite;-moz-animation:pace-spinner .4s linear infinite;-ms-animation:pace-spinner .4s linear infinite;-o-animation:pace-spinner .4s linear infinite;animation:pace-spinner .4s linear infinite}@-webkit-keyframes pace-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-moz-keyframes pace-spinner{0%{-moz-transform:rotate(0);transform:rotate(0)}100%{-moz-transform:rotate(360deg);transform:rotate(360deg)}}@-o-keyframes pace-spinner{0%{-o-transform:rotate(0);transform:rotate(0)}100%{-o-transform:rotate(360deg);transform:rotate(360deg)}}@-ms-keyframes pace-spinner{0%{-ms-transform:rotate(0);transform:rotate(0)}100%{-ms-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes pace-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}","date":"2019-06-21T06:36:41.256Z","updated":"2019-06-21T06:36:41.256Z","path":"lib/pace/pace-theme-flash.min.css","layout":"false","title":"","comments":1,"_id":"cjxijp65f001qdvw9d1k3ndq5","content":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background:#29d;position:fixed;z-index:2000;top:0;right:100%;width:100%;height:2px}.pace .pace-progress-inner{display:block;position:absolute;right:0;width:100px;height:100%;box-shadow:0 0 10px #29d,0 0 5px #29d;opacity:1;-webkit-transform:rotate(3deg) translate(0,-4px);-moz-transform:rotate(3deg) translate(0,-4px);-ms-transform:rotate(3deg) translate(0,-4px);-o-transform:rotate(3deg) translate(0,-4px);transform:rotate(3deg) translate(0,-4px)}.pace .pace-activity{display:block;position:fixed;z-index:2000;top:15px;right:15px;width:14px;height:14px;border:2px solid transparent;border-top-color:#29d;border-left-color:#29d;border-radius:10px;-webkit-animation:pace-spinner .4s linear infinite;-moz-animation:pace-spinner .4s linear infinite;-ms-animation:pace-spinner .4s linear infinite;-o-animation:pace-spinner .4s linear infinite;animation:pace-spinner .4s linear infinite}@-webkit-keyframes pace-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-moz-keyframes pace-spinner{0%{-moz-transform:rotate(0);transform:rotate(0)}100%{-moz-transform:rotate(360deg);transform:rotate(360deg)}}@-o-keyframes pace-spinner{0%{-o-transform:rotate(0);transform:rotate(0)}100%{-o-transform:rotate(360deg);transform:rotate(360deg)}}@-ms-keyframes pace-spinner{0%{-ms-transform:rotate(0);transform:rotate(0)}100%{-ms-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes pace-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}","site":{"data":{}},"excerpt":"","more":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background:#29d;position:fixed;z-index:2000;top:0;right:100%;width:100%;height:2px}.pace .pace-progress-inner{display:block;position:absolute;right:0;width:100px;height:100%;box-shadow:0 0 10px #29d,0 0 5px #29d;opacity:1;-webkit-transform:rotate(3deg) translate(0,-4px);-moz-transform:rotate(3deg) translate(0,-4px);-ms-transform:rotate(3deg) translate(0,-4px);-o-transform:rotate(3deg) translate(0,-4px);transform:rotate(3deg) translate(0,-4px)}.pace .pace-activity{display:block;position:fixed;z-index:2000;top:15px;right:15px;width:14px;height:14px;border:2px solid transparent;border-top-color:#29d;border-left-color:#29d;border-radius:10px;-webkit-animation:pace-spinner .4s linear infinite;-moz-animation:pace-spinner .4s linear infinite;-ms-animation:pace-spinner .4s linear infinite;-o-animation:pace-spinner .4s linear infinite;animation:pace-spinner .4s linear infinite}@-webkit-keyframes pace-spinner{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-moz-keyframes pace-spinner{0%{-moz-transform:rotate(0);transform:rotate(0)}100%{-moz-transform:rotate(360deg);transform:rotate(360deg)}}@-o-keyframes pace-spinner{0%{-o-transform:rotate(0);transform:rotate(0)}100%{-o-transform:rotate(360deg);transform:rotate(360deg)}}@-ms-keyframes pace-spinner{0%{-ms-transform:rotate(0);transform:rotate(0)}100%{-ms-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes pace-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}"},{"_content":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background-color:rgba(34,153,221,.19999999999999996);position:fixed;z-index:-1;top:0;right:100%;bottom:0;width:100%}","source":"lib/pace/pace-theme-fill-left.min.css","raw":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background-color:rgba(34,153,221,.19999999999999996);position:fixed;z-index:-1;top:0;right:100%;bottom:0;width:100%}","date":"2019-06-21T06:36:41.252Z","updated":"2019-06-21T06:36:41.252Z","path":"lib/pace/pace-theme-fill-left.min.css","layout":"false","title":"","comments":1,"_id":"cjxijp65m001rdvw9hg01yjix","content":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background-color:rgba(34,153,221,.19999999999999996);position:fixed;z-index:-1;top:0;right:100%;bottom:0;width:100%}","site":{"data":{}},"excerpt":"","more":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background-color:rgba(34,153,221,.19999999999999996);position:fixed;z-index:-1;top:0;right:100%;bottom:0;width:100%}"},{"_content":".pace {\n\t  -webkit-pointer-events: none;\n\t    pointer-events: none;\n\n\t      -webkit-user-select: none;\n\t        -moz-user-select: none;\n\t\t  user-select: none;\n\n\t\t    -webkit-box-sizing: border-box;\n\t\t      -moz-box-sizing: border-box;\n\t\t        -ms-box-sizing: border-box;\n\t\t\t  -o-box-sizing: border-box;\n\t\t\t    box-sizing: border-box;\n\n\t\t\t      -webkit-border-radius: 10px;\n\t\t\t        -moz-border-radius: 10px;\n\t\t\t\t  border-radius: 10px;\n\n\t\t\t\t    -webkit-background-clip: padding-box;\n\t\t\t\t      -moz-background-clip: padding;\n\t\t\t\t        background-clip: padding-box;\n\n\t\t\t\t\t  z-index: 2000;\n\t\t\t\t\t    position: fixed;\n\t\t\t\t\t      margin: auto;\n\t\t\t\t\t        top: 12px;\n\t\t\t\t\t\t  left: 0;\n\t\t\t\t\t\t    right: 0;\n\t\t\t\t\t\t      bottom: 0;\n\t\t\t\t\t\t        width: 200px;\n\t\t\t\t\t\t\t  height: 50px;\n\t\t\t\t\t\t\t    overflow: hidden;\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t    .pace .pace-progress {\n\t\t\t\t\t\t\t      -webkit-box-sizing: border-box;\n\t\t\t\t\t\t\t        -moz-box-sizing: border-box;\n\t\t\t\t\t\t\t\t  -ms-box-sizing: border-box;\n\t\t\t\t\t\t\t\t    -o-box-sizing: border-box;\n\t\t\t\t\t\t\t\t      box-sizing: border-box;\n\n\t\t\t\t\t\t\t\t        -webkit-border-radius: 2px;\n\t\t\t\t\t\t\t\t\t  -moz-border-radius: 2px;\n\t\t\t\t\t\t\t\t\t    border-radius: 2px;\n\n\t\t\t\t\t\t\t\t\t      -webkit-background-clip: padding-box;\n\t\t\t\t\t\t\t\t\t        -moz-background-clip: padding;\n\t\t\t\t\t\t\t\t\t\t  background-clip: padding-box;\n\n\t\t\t\t\t\t\t\t\t\t    -webkit-transform: translate3d(0, 0, 0);\n\t\t\t\t\t\t\t\t\t\t      transform: translate3d(0, 0, 0);\n\n\t\t\t\t\t\t\t\t\t\t        display: block;\n\t\t\t\t\t\t\t\t\t\t\t  position: absolute;\n\t\t\t\t\t\t\t\t\t\t\t    right: 100%;\n\t\t\t\t\t\t\t\t\t\t\t      margin-right: -7px;\n\t\t\t\t\t\t\t\t\t\t\t        width: 93%;\n\t\t\t\t\t\t\t\t\t\t\t\t  top: 7px;\n\t\t\t\t\t\t\t\t\t\t\t\t    height: 14px;\n\t\t\t\t\t\t\t\t\t\t\t\t      font-size: 12px;\n\t\t\t\t\t\t\t\t\t\t\t\t        background: #0288d1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t  color: #0288d1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t    line-height: 60px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t      font-weight: bold;\n\t\t\t\t\t\t\t\t\t\t\t\t\t        font-family: Helvetica, Arial, \"Lucida Grande\", sans-serif;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  -webkit-box-shadow: 120px 0 #fff, 240px 0 #fff;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t    -ms-box-shadow: 120px 0 #fff, 240px 0 #fff;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t      box-shadow: 120px 0 #fff, 240px 0 #fff;\n\t\t\t\t\t\t\t\t\t\t\t\t\t      }\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress:after {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t        content: attr(data-progress-text);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  display: inline-block;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    position: fixed;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      width: 45px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t        text-align: right;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  right: 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    padding-right: 16px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      top: 4px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      }\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"0%\"]:after { right: -200px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"1%\"]:after { right: -198.14px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"2%\"]:after { right: -196.28px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"3%\"]:after { right: -194.42px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"4%\"]:after { right: -192.56px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"5%\"]:after { right: -190.7px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"6%\"]:after { right: -188.84px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"7%\"]:after { right: -186.98px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"8%\"]:after { right: -185.12px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"9%\"]:after { right: -183.26px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"10%\"]:after { right: -181.4px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"11%\"]:after { right: -179.54px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"12%\"]:after { right: -177.68px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"13%\"]:after { right: -175.82px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"14%\"]:after { right: -173.96px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"15%\"]:after { right: -172.1px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"16%\"]:after { right: -170.24px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"17%\"]:after { right: -168.38px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"18%\"]:after { right: -166.52px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"19%\"]:after { right: -164.66px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"20%\"]:after { right: -162.8px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"21%\"]:after { right: -160.94px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"22%\"]:after { right: -159.08px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"23%\"]:after { right: -157.22px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"24%\"]:after { right: -155.36px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"25%\"]:after { right: -153.5px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"26%\"]:after { right: -151.64px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"27%\"]:after { right: -149.78px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"28%\"]:after { right: -147.92px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"29%\"]:after { right: -146.06px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"30%\"]:after { right: -144.2px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"31%\"]:after { right: -142.34px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"32%\"]:after { right: -140.48px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"33%\"]:after { right: -138.62px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"34%\"]:after { right: -136.76px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"35%\"]:after { right: -134.9px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"36%\"]:after { right: -133.04px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"37%\"]:after { right: -131.18px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"38%\"]:after { right: -129.32px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"39%\"]:after { right: -127.46px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"40%\"]:after { right: -125.6px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"41%\"]:after { right: -123.74px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"42%\"]:after { right: -121.88px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"43%\"]:after { right: -120.02px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"44%\"]:after { right: -118.16px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"45%\"]:after { right: -116.3px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"46%\"]:after { right: -114.44px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"47%\"]:after { right: -112.58px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"48%\"]:after { right: -110.72px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"49%\"]:after { right: -108.86px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"50%\"]:after { right: -107px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"51%\"]:after { right: -105.14px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"52%\"]:after { right: -103.28px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"53%\"]:after { right: -101.42px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"54%\"]:after { right: -99.56px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"55%\"]:after { right: -97.7px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"56%\"]:after { right: -95.84px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"57%\"]:after { right: -93.98px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"58%\"]:after { right: -92.12px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"59%\"]:after { right: -90.26px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"60%\"]:after { right: -88.4px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"61%\"]:after { right: -86.53999999999999px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"62%\"]:after { right: -84.68px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"63%\"]:after { right: -82.82px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"64%\"]:after { right: -80.96000000000001px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"65%\"]:after { right: -79.1px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"66%\"]:after { right: -77.24px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"67%\"]:after { right: -75.38px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"68%\"]:after { right: -73.52px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"69%\"]:after { right: -71.66px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"70%\"]:after { right: -69.8px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"71%\"]:after { right: -67.94px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"72%\"]:after { right: -66.08px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"73%\"]:after { right: -64.22px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"74%\"]:after { right: -62.36px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"75%\"]:after { right: -60.5px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"76%\"]:after { right: -58.64px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"77%\"]:after { right: -56.78px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"78%\"]:after { right: -54.92px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"79%\"]:after { right: -53.06px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"80%\"]:after { right: -51.2px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"81%\"]:after { right: -49.34px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"82%\"]:after { right: -47.480000000000004px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"83%\"]:after { right: -45.62px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"84%\"]:after { right: -43.76px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"85%\"]:after { right: -41.9px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"86%\"]:after { right: -40.04px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"87%\"]:after { right: -38.18px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"88%\"]:after { right: -36.32px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"89%\"]:after { right: -34.46px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"90%\"]:after { right: -32.6px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"91%\"]:after { right: -30.740000000000002px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"92%\"]:after { right: -28.880000000000003px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"93%\"]:after { right: -27.02px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"94%\"]:after { right: -25.16px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"95%\"]:after { right: -23.3px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"96%\"]:after { right: -21.439999999999998px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"97%\"]:after { right: -19.58px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"98%\"]:after { right: -17.72px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"99%\"]:after { right: -15.86px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"100%\"]:after { right: -14px }\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-activity {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t        position: absolute;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  width: 100%;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    height: 28px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      z-index: 2001;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t        box-shadow: inset 0 0 0 2px #0288d1, inset 0 0 0 7px #FFF;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  border-radius: 10px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  }\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  .pace.pace-inactive {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    display: none;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    }\n\n","source":"lib/pace/pace-theme-loading-bar.min.css","raw":".pace {\n\t  -webkit-pointer-events: none;\n\t    pointer-events: none;\n\n\t      -webkit-user-select: none;\n\t        -moz-user-select: none;\n\t\t  user-select: none;\n\n\t\t    -webkit-box-sizing: border-box;\n\t\t      -moz-box-sizing: border-box;\n\t\t        -ms-box-sizing: border-box;\n\t\t\t  -o-box-sizing: border-box;\n\t\t\t    box-sizing: border-box;\n\n\t\t\t      -webkit-border-radius: 10px;\n\t\t\t        -moz-border-radius: 10px;\n\t\t\t\t  border-radius: 10px;\n\n\t\t\t\t    -webkit-background-clip: padding-box;\n\t\t\t\t      -moz-background-clip: padding;\n\t\t\t\t        background-clip: padding-box;\n\n\t\t\t\t\t  z-index: 2000;\n\t\t\t\t\t    position: fixed;\n\t\t\t\t\t      margin: auto;\n\t\t\t\t\t        top: 12px;\n\t\t\t\t\t\t  left: 0;\n\t\t\t\t\t\t    right: 0;\n\t\t\t\t\t\t      bottom: 0;\n\t\t\t\t\t\t        width: 200px;\n\t\t\t\t\t\t\t  height: 50px;\n\t\t\t\t\t\t\t    overflow: hidden;\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t    .pace .pace-progress {\n\t\t\t\t\t\t\t      -webkit-box-sizing: border-box;\n\t\t\t\t\t\t\t        -moz-box-sizing: border-box;\n\t\t\t\t\t\t\t\t  -ms-box-sizing: border-box;\n\t\t\t\t\t\t\t\t    -o-box-sizing: border-box;\n\t\t\t\t\t\t\t\t      box-sizing: border-box;\n\n\t\t\t\t\t\t\t\t        -webkit-border-radius: 2px;\n\t\t\t\t\t\t\t\t\t  -moz-border-radius: 2px;\n\t\t\t\t\t\t\t\t\t    border-radius: 2px;\n\n\t\t\t\t\t\t\t\t\t      -webkit-background-clip: padding-box;\n\t\t\t\t\t\t\t\t\t        -moz-background-clip: padding;\n\t\t\t\t\t\t\t\t\t\t  background-clip: padding-box;\n\n\t\t\t\t\t\t\t\t\t\t    -webkit-transform: translate3d(0, 0, 0);\n\t\t\t\t\t\t\t\t\t\t      transform: translate3d(0, 0, 0);\n\n\t\t\t\t\t\t\t\t\t\t        display: block;\n\t\t\t\t\t\t\t\t\t\t\t  position: absolute;\n\t\t\t\t\t\t\t\t\t\t\t    right: 100%;\n\t\t\t\t\t\t\t\t\t\t\t      margin-right: -7px;\n\t\t\t\t\t\t\t\t\t\t\t        width: 93%;\n\t\t\t\t\t\t\t\t\t\t\t\t  top: 7px;\n\t\t\t\t\t\t\t\t\t\t\t\t    height: 14px;\n\t\t\t\t\t\t\t\t\t\t\t\t      font-size: 12px;\n\t\t\t\t\t\t\t\t\t\t\t\t        background: #0288d1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t  color: #0288d1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t    line-height: 60px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t      font-weight: bold;\n\t\t\t\t\t\t\t\t\t\t\t\t\t        font-family: Helvetica, Arial, \"Lucida Grande\", sans-serif;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  -webkit-box-shadow: 120px 0 #fff, 240px 0 #fff;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t    -ms-box-shadow: 120px 0 #fff, 240px 0 #fff;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t      box-shadow: 120px 0 #fff, 240px 0 #fff;\n\t\t\t\t\t\t\t\t\t\t\t\t\t      }\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress:after {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t        content: attr(data-progress-text);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  display: inline-block;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    position: fixed;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      width: 45px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t        text-align: right;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  right: 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    padding-right: 16px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      top: 4px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      }\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"0%\"]:after { right: -200px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"1%\"]:after { right: -198.14px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"2%\"]:after { right: -196.28px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"3%\"]:after { right: -194.42px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"4%\"]:after { right: -192.56px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"5%\"]:after { right: -190.7px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"6%\"]:after { right: -188.84px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"7%\"]:after { right: -186.98px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"8%\"]:after { right: -185.12px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"9%\"]:after { right: -183.26px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"10%\"]:after { right: -181.4px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"11%\"]:after { right: -179.54px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"12%\"]:after { right: -177.68px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"13%\"]:after { right: -175.82px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"14%\"]:after { right: -173.96px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"15%\"]:after { right: -172.1px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"16%\"]:after { right: -170.24px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"17%\"]:after { right: -168.38px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"18%\"]:after { right: -166.52px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"19%\"]:after { right: -164.66px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"20%\"]:after { right: -162.8px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"21%\"]:after { right: -160.94px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"22%\"]:after { right: -159.08px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"23%\"]:after { right: -157.22px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"24%\"]:after { right: -155.36px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"25%\"]:after { right: -153.5px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"26%\"]:after { right: -151.64px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"27%\"]:after { right: -149.78px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"28%\"]:after { right: -147.92px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"29%\"]:after { right: -146.06px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"30%\"]:after { right: -144.2px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"31%\"]:after { right: -142.34px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"32%\"]:after { right: -140.48px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"33%\"]:after { right: -138.62px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"34%\"]:after { right: -136.76px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"35%\"]:after { right: -134.9px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"36%\"]:after { right: -133.04px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"37%\"]:after { right: -131.18px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"38%\"]:after { right: -129.32px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"39%\"]:after { right: -127.46px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"40%\"]:after { right: -125.6px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"41%\"]:after { right: -123.74px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"42%\"]:after { right: -121.88px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"43%\"]:after { right: -120.02px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"44%\"]:after { right: -118.16px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"45%\"]:after { right: -116.3px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"46%\"]:after { right: -114.44px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"47%\"]:after { right: -112.58px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"48%\"]:after { right: -110.72px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"49%\"]:after { right: -108.86px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"50%\"]:after { right: -107px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"51%\"]:after { right: -105.14px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"52%\"]:after { right: -103.28px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"53%\"]:after { right: -101.42px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"54%\"]:after { right: -99.56px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"55%\"]:after { right: -97.7px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"56%\"]:after { right: -95.84px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"57%\"]:after { right: -93.98px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"58%\"]:after { right: -92.12px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"59%\"]:after { right: -90.26px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"60%\"]:after { right: -88.4px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"61%\"]:after { right: -86.53999999999999px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"62%\"]:after { right: -84.68px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"63%\"]:after { right: -82.82px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"64%\"]:after { right: -80.96000000000001px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"65%\"]:after { right: -79.1px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"66%\"]:after { right: -77.24px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"67%\"]:after { right: -75.38px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"68%\"]:after { right: -73.52px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"69%\"]:after { right: -71.66px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"70%\"]:after { right: -69.8px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"71%\"]:after { right: -67.94px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"72%\"]:after { right: -66.08px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"73%\"]:after { right: -64.22px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"74%\"]:after { right: -62.36px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"75%\"]:after { right: -60.5px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"76%\"]:after { right: -58.64px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"77%\"]:after { right: -56.78px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"78%\"]:after { right: -54.92px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"79%\"]:after { right: -53.06px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"80%\"]:after { right: -51.2px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"81%\"]:after { right: -49.34px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"82%\"]:after { right: -47.480000000000004px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"83%\"]:after { right: -45.62px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"84%\"]:after { right: -43.76px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"85%\"]:after { right: -41.9px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"86%\"]:after { right: -40.04px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"87%\"]:after { right: -38.18px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"88%\"]:after { right: -36.32px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"89%\"]:after { right: -34.46px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"90%\"]:after { right: -32.6px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"91%\"]:after { right: -30.740000000000002px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"92%\"]:after { right: -28.880000000000003px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"93%\"]:after { right: -27.02px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"94%\"]:after { right: -25.16px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"95%\"]:after { right: -23.3px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"96%\"]:after { right: -21.439999999999998px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"97%\"]:after { right: -19.58px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"98%\"]:after { right: -17.72px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"99%\"]:after { right: -15.86px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"100%\"]:after { right: -14px }\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-activity {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t        position: absolute;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  width: 100%;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    height: 28px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      z-index: 2001;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t        box-shadow: inset 0 0 0 2px #0288d1, inset 0 0 0 7px #FFF;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  border-radius: 10px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  }\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  .pace.pace-inactive {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    display: none;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    }\n\n","date":"2019-06-21T06:36:41.260Z","updated":"2019-06-21T06:36:41.260Z","path":"lib/pace/pace-theme-loading-bar.min.css","layout":"false","title":"","comments":1,"_id":"cjxijp65s001sdvw9wjaijomw","content":".pace {\n\t  -webkit-pointer-events: none;\n\t    pointer-events: none;\n\n\t      -webkit-user-select: none;\n\t        -moz-user-select: none;\n\t\t  user-select: none;\n\n\t\t    -webkit-box-sizing: border-box;\n\t\t      -moz-box-sizing: border-box;\n\t\t        -ms-box-sizing: border-box;\n\t\t\t  -o-box-sizing: border-box;\n\t\t\t    box-sizing: border-box;\n\n\t\t\t      -webkit-border-radius: 10px;\n\t\t\t        -moz-border-radius: 10px;\n\t\t\t\t  border-radius: 10px;\n\n\t\t\t\t    -webkit-background-clip: padding-box;\n\t\t\t\t      -moz-background-clip: padding;\n\t\t\t\t        background-clip: padding-box;\n\n\t\t\t\t\t  z-index: 2000;\n\t\t\t\t\t    position: fixed;\n\t\t\t\t\t      margin: auto;\n\t\t\t\t\t        top: 12px;\n\t\t\t\t\t\t  left: 0;\n\t\t\t\t\t\t    right: 0;\n\t\t\t\t\t\t      bottom: 0;\n\t\t\t\t\t\t        width: 200px;\n\t\t\t\t\t\t\t  height: 50px;\n\t\t\t\t\t\t\t    overflow: hidden;\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t    .pace .pace-progress {\n\t\t\t\t\t\t\t      -webkit-box-sizing: border-box;\n\t\t\t\t\t\t\t        -moz-box-sizing: border-box;\n\t\t\t\t\t\t\t\t  -ms-box-sizing: border-box;\n\t\t\t\t\t\t\t\t    -o-box-sizing: border-box;\n\t\t\t\t\t\t\t\t      box-sizing: border-box;\n\n\t\t\t\t\t\t\t\t        -webkit-border-radius: 2px;\n\t\t\t\t\t\t\t\t\t  -moz-border-radius: 2px;\n\t\t\t\t\t\t\t\t\t    border-radius: 2px;\n\n\t\t\t\t\t\t\t\t\t      -webkit-background-clip: padding-box;\n\t\t\t\t\t\t\t\t\t        -moz-background-clip: padding;\n\t\t\t\t\t\t\t\t\t\t  background-clip: padding-box;\n\n\t\t\t\t\t\t\t\t\t\t    -webkit-transform: translate3d(0, 0, 0);\n\t\t\t\t\t\t\t\t\t\t      transform: translate3d(0, 0, 0);\n\n\t\t\t\t\t\t\t\t\t\t        display: block;\n\t\t\t\t\t\t\t\t\t\t\t  position: absolute;\n\t\t\t\t\t\t\t\t\t\t\t    right: 100%;\n\t\t\t\t\t\t\t\t\t\t\t      margin-right: -7px;\n\t\t\t\t\t\t\t\t\t\t\t        width: 93%;\n\t\t\t\t\t\t\t\t\t\t\t\t  top: 7px;\n\t\t\t\t\t\t\t\t\t\t\t\t    height: 14px;\n\t\t\t\t\t\t\t\t\t\t\t\t      font-size: 12px;\n\t\t\t\t\t\t\t\t\t\t\t\t        background: #0288d1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t  color: #0288d1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t    line-height: 60px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t      font-weight: bold;\n\t\t\t\t\t\t\t\t\t\t\t\t\t        font-family: Helvetica, Arial, \"Lucida Grande\", sans-serif;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  -webkit-box-shadow: 120px 0 #fff, 240px 0 #fff;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t    -ms-box-shadow: 120px 0 #fff, 240px 0 #fff;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t      box-shadow: 120px 0 #fff, 240px 0 #fff;\n\t\t\t\t\t\t\t\t\t\t\t\t\t      }\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress:after {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t        content: attr(data-progress-text);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  display: inline-block;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    position: fixed;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      width: 45px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t        text-align: right;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  right: 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    padding-right: 16px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      top: 4px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      }\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"0%\"]:after { right: -200px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"1%\"]:after { right: -198.14px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"2%\"]:after { right: -196.28px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"3%\"]:after { right: -194.42px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"4%\"]:after { right: -192.56px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"5%\"]:after { right: -190.7px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"6%\"]:after { right: -188.84px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"7%\"]:after { right: -186.98px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"8%\"]:after { right: -185.12px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"9%\"]:after { right: -183.26px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"10%\"]:after { right: -181.4px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"11%\"]:after { right: -179.54px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"12%\"]:after { right: -177.68px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"13%\"]:after { right: -175.82px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"14%\"]:after { right: -173.96px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"15%\"]:after { right: -172.1px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"16%\"]:after { right: -170.24px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"17%\"]:after { right: -168.38px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"18%\"]:after { right: -166.52px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"19%\"]:after { right: -164.66px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"20%\"]:after { right: -162.8px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"21%\"]:after { right: -160.94px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"22%\"]:after { right: -159.08px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"23%\"]:after { right: -157.22px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"24%\"]:after { right: -155.36px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"25%\"]:after { right: -153.5px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"26%\"]:after { right: -151.64px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"27%\"]:after { right: -149.78px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"28%\"]:after { right: -147.92px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"29%\"]:after { right: -146.06px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"30%\"]:after { right: -144.2px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"31%\"]:after { right: -142.34px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"32%\"]:after { right: -140.48px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"33%\"]:after { right: -138.62px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"34%\"]:after { right: -136.76px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"35%\"]:after { right: -134.9px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"36%\"]:after { right: -133.04px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"37%\"]:after { right: -131.18px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"38%\"]:after { right: -129.32px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"39%\"]:after { right: -127.46px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"40%\"]:after { right: -125.6px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"41%\"]:after { right: -123.74px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"42%\"]:after { right: -121.88px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"43%\"]:after { right: -120.02px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"44%\"]:after { right: -118.16px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"45%\"]:after { right: -116.3px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"46%\"]:after { right: -114.44px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"47%\"]:after { right: -112.58px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"48%\"]:after { right: -110.72px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"49%\"]:after { right: -108.86px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"50%\"]:after { right: -107px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"51%\"]:after { right: -105.14px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"52%\"]:after { right: -103.28px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"53%\"]:after { right: -101.42px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"54%\"]:after { right: -99.56px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"55%\"]:after { right: -97.7px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"56%\"]:after { right: -95.84px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"57%\"]:after { right: -93.98px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"58%\"]:after { right: -92.12px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"59%\"]:after { right: -90.26px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"60%\"]:after { right: -88.4px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"61%\"]:after { right: -86.53999999999999px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"62%\"]:after { right: -84.68px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"63%\"]:after { right: -82.82px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"64%\"]:after { right: -80.96000000000001px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"65%\"]:after { right: -79.1px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"66%\"]:after { right: -77.24px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"67%\"]:after { right: -75.38px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"68%\"]:after { right: -73.52px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"69%\"]:after { right: -71.66px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"70%\"]:after { right: -69.8px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"71%\"]:after { right: -67.94px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"72%\"]:after { right: -66.08px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"73%\"]:after { right: -64.22px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"74%\"]:after { right: -62.36px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"75%\"]:after { right: -60.5px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"76%\"]:after { right: -58.64px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"77%\"]:after { right: -56.78px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"78%\"]:after { right: -54.92px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"79%\"]:after { right: -53.06px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"80%\"]:after { right: -51.2px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"81%\"]:after { right: -49.34px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"82%\"]:after { right: -47.480000000000004px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"83%\"]:after { right: -45.62px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"84%\"]:after { right: -43.76px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"85%\"]:after { right: -41.9px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"86%\"]:after { right: -40.04px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"87%\"]:after { right: -38.18px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"88%\"]:after { right: -36.32px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"89%\"]:after { right: -34.46px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"90%\"]:after { right: -32.6px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"91%\"]:after { right: -30.740000000000002px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"92%\"]:after { right: -28.880000000000003px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"93%\"]:after { right: -27.02px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"94%\"]:after { right: -25.16px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"95%\"]:after { right: -23.3px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"96%\"]:after { right: -21.439999999999998px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"97%\"]:after { right: -19.58px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"98%\"]:after { right: -17.72px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"99%\"]:after { right: -15.86px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"100%\"]:after { right: -14px }\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-activity {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t        position: absolute;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  width: 100%;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    height: 28px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      z-index: 2001;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t        box-shadow: inset 0 0 0 2px #0288d1, inset 0 0 0 7px #FFF;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  border-radius: 10px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  }\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  .pace.pace-inactive {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    display: none;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    }\n\n","site":{"data":{}},"excerpt":"","more":".pace {\n\t  -webkit-pointer-events: none;\n\t    pointer-events: none;\n\n\t      -webkit-user-select: none;\n\t        -moz-user-select: none;\n\t\t  user-select: none;\n\n\t\t    -webkit-box-sizing: border-box;\n\t\t      -moz-box-sizing: border-box;\n\t\t        -ms-box-sizing: border-box;\n\t\t\t  -o-box-sizing: border-box;\n\t\t\t    box-sizing: border-box;\n\n\t\t\t      -webkit-border-radius: 10px;\n\t\t\t        -moz-border-radius: 10px;\n\t\t\t\t  border-radius: 10px;\n\n\t\t\t\t    -webkit-background-clip: padding-box;\n\t\t\t\t      -moz-background-clip: padding;\n\t\t\t\t        background-clip: padding-box;\n\n\t\t\t\t\t  z-index: 2000;\n\t\t\t\t\t    position: fixed;\n\t\t\t\t\t      margin: auto;\n\t\t\t\t\t        top: 12px;\n\t\t\t\t\t\t  left: 0;\n\t\t\t\t\t\t    right: 0;\n\t\t\t\t\t\t      bottom: 0;\n\t\t\t\t\t\t        width: 200px;\n\t\t\t\t\t\t\t  height: 50px;\n\t\t\t\t\t\t\t    overflow: hidden;\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t    .pace .pace-progress {\n\t\t\t\t\t\t\t      -webkit-box-sizing: border-box;\n\t\t\t\t\t\t\t        -moz-box-sizing: border-box;\n\t\t\t\t\t\t\t\t  -ms-box-sizing: border-box;\n\t\t\t\t\t\t\t\t    -o-box-sizing: border-box;\n\t\t\t\t\t\t\t\t      box-sizing: border-box;\n\n\t\t\t\t\t\t\t\t        -webkit-border-radius: 2px;\n\t\t\t\t\t\t\t\t\t  -moz-border-radius: 2px;\n\t\t\t\t\t\t\t\t\t    border-radius: 2px;\n\n\t\t\t\t\t\t\t\t\t      -webkit-background-clip: padding-box;\n\t\t\t\t\t\t\t\t\t        -moz-background-clip: padding;\n\t\t\t\t\t\t\t\t\t\t  background-clip: padding-box;\n\n\t\t\t\t\t\t\t\t\t\t    -webkit-transform: translate3d(0, 0, 0);\n\t\t\t\t\t\t\t\t\t\t      transform: translate3d(0, 0, 0);\n\n\t\t\t\t\t\t\t\t\t\t        display: block;\n\t\t\t\t\t\t\t\t\t\t\t  position: absolute;\n\t\t\t\t\t\t\t\t\t\t\t    right: 100%;\n\t\t\t\t\t\t\t\t\t\t\t      margin-right: -7px;\n\t\t\t\t\t\t\t\t\t\t\t        width: 93%;\n\t\t\t\t\t\t\t\t\t\t\t\t  top: 7px;\n\t\t\t\t\t\t\t\t\t\t\t\t    height: 14px;\n\t\t\t\t\t\t\t\t\t\t\t\t      font-size: 12px;\n\t\t\t\t\t\t\t\t\t\t\t\t        background: #0288d1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t  color: #0288d1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t    line-height: 60px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t      font-weight: bold;\n\t\t\t\t\t\t\t\t\t\t\t\t\t        font-family: Helvetica, Arial, \"Lucida Grande\", sans-serif;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  -webkit-box-shadow: 120px 0 #fff, 240px 0 #fff;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t    -ms-box-shadow: 120px 0 #fff, 240px 0 #fff;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t      box-shadow: 120px 0 #fff, 240px 0 #fff;\n\t\t\t\t\t\t\t\t\t\t\t\t\t      }\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress:after {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t        content: attr(data-progress-text);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  display: inline-block;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    position: fixed;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      width: 45px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t        text-align: right;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  right: 0;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    padding-right: 16px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      top: 4px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      }\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"0%\"]:after { right: -200px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"1%\"]:after { right: -198.14px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"2%\"]:after { right: -196.28px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"3%\"]:after { right: -194.42px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"4%\"]:after { right: -192.56px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"5%\"]:after { right: -190.7px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"6%\"]:after { right: -188.84px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"7%\"]:after { right: -186.98px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"8%\"]:after { right: -185.12px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"9%\"]:after { right: -183.26px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"10%\"]:after { right: -181.4px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"11%\"]:after { right: -179.54px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"12%\"]:after { right: -177.68px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"13%\"]:after { right: -175.82px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"14%\"]:after { right: -173.96px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"15%\"]:after { right: -172.1px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"16%\"]:after { right: -170.24px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"17%\"]:after { right: -168.38px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"18%\"]:after { right: -166.52px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"19%\"]:after { right: -164.66px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"20%\"]:after { right: -162.8px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"21%\"]:after { right: -160.94px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"22%\"]:after { right: -159.08px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"23%\"]:after { right: -157.22px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"24%\"]:after { right: -155.36px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"25%\"]:after { right: -153.5px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"26%\"]:after { right: -151.64px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"27%\"]:after { right: -149.78px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"28%\"]:after { right: -147.92px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"29%\"]:after { right: -146.06px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"30%\"]:after { right: -144.2px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"31%\"]:after { right: -142.34px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"32%\"]:after { right: -140.48px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"33%\"]:after { right: -138.62px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"34%\"]:after { right: -136.76px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"35%\"]:after { right: -134.9px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"36%\"]:after { right: -133.04px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"37%\"]:after { right: -131.18px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"38%\"]:after { right: -129.32px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"39%\"]:after { right: -127.46px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"40%\"]:after { right: -125.6px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"41%\"]:after { right: -123.74px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"42%\"]:after { right: -121.88px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"43%\"]:after { right: -120.02px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"44%\"]:after { right: -118.16px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"45%\"]:after { right: -116.3px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"46%\"]:after { right: -114.44px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"47%\"]:after { right: -112.58px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"48%\"]:after { right: -110.72px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"49%\"]:after { right: -108.86px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"50%\"]:after { right: -107px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"51%\"]:after { right: -105.14px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"52%\"]:after { right: -103.28px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"53%\"]:after { right: -101.42px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"54%\"]:after { right: -99.56px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"55%\"]:after { right: -97.7px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"56%\"]:after { right: -95.84px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"57%\"]:after { right: -93.98px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"58%\"]:after { right: -92.12px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"59%\"]:after { right: -90.26px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"60%\"]:after { right: -88.4px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"61%\"]:after { right: -86.53999999999999px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"62%\"]:after { right: -84.68px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"63%\"]:after { right: -82.82px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"64%\"]:after { right: -80.96000000000001px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"65%\"]:after { right: -79.1px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"66%\"]:after { right: -77.24px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"67%\"]:after { right: -75.38px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"68%\"]:after { right: -73.52px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"69%\"]:after { right: -71.66px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"70%\"]:after { right: -69.8px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"71%\"]:after { right: -67.94px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"72%\"]:after { right: -66.08px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"73%\"]:after { right: -64.22px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"74%\"]:after { right: -62.36px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"75%\"]:after { right: -60.5px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"76%\"]:after { right: -58.64px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"77%\"]:after { right: -56.78px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"78%\"]:after { right: -54.92px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"79%\"]:after { right: -53.06px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"80%\"]:after { right: -51.2px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"81%\"]:after { right: -49.34px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"82%\"]:after { right: -47.480000000000004px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"83%\"]:after { right: -45.62px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"84%\"]:after { right: -43.76px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"85%\"]:after { right: -41.9px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"86%\"]:after { right: -40.04px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"87%\"]:after { right: -38.18px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"88%\"]:after { right: -36.32px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"89%\"]:after { right: -34.46px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"90%\"]:after { right: -32.6px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"91%\"]:after { right: -30.740000000000002px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"92%\"]:after { right: -28.880000000000003px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"93%\"]:after { right: -27.02px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"94%\"]:after { right: -25.16px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"95%\"]:after { right: -23.3px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"96%\"]:after { right: -21.439999999999998px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"97%\"]:after { right: -19.58px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"98%\"]:after { right: -17.72px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"99%\"]:after { right: -15.86px }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-progress[data-progress-text=\"100%\"]:after { right: -14px }\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      .pace .pace-activity {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t        position: absolute;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  width: 100%;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    height: 28px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      z-index: 2001;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t        box-shadow: inset 0 0 0 2px #0288d1, inset 0 0 0 7px #FFF;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  border-radius: 10px;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  }\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  .pace.pace-inactive {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    display: none;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    }\n\n"},{"_content":".pace,.pace .pace-progress{width:100%;height:12px;overflow:hidden}.pace,.pace .pace-activity{position:fixed;top:0;left:0}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;background:#fff}.pace-inactive{display:none}.pace .pace-progress{background-color:#0087E1;position:fixed;top:0;right:100%;-webkit-border-radius:0 0 4px;-moz-border-radius:0 0 4px;-o-border-radius:0 0 4px;border-radius:0 0 4px;-webkit-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);-moz-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);-o-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3)}.pace .pace-activity{right:-28px;bottom:0;-webkit-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-moz-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-o-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-webkit-background-size:28px 100%;-moz-background-size:28px 100%;-o-background-size:28px 100%;background-size:28px 100%;-webkit-animation:pace-theme-mac-osx-motion .5s linear infinite;-moz-animation:pace-theme-mac-osx-motion .5s linear infinite;-ms-animation:pace-theme-mac-osx-motion .5s linear infinite;-o-animation:pace-theme-mac-osx-motion .5s linear infinite;animation:pace-theme-mac-osx-motion .5s linear infinite}@-webkit-keyframes pace-theme-mac-osx-motion{0%{-webkit-transform:none;transform:none}100%{-webkit-transform:translate(-28px,0);transform:translate(-28px,0)}}@-moz-keyframes pace-theme-mac-osx-motion{0%{-moz-transform:none;transform:none}100%{-moz-transform:translate(-28px,0);transform:translate(-28px,0)}}@-o-keyframes pace-theme-mac-osx-motion{0%{-o-transform:none;transform:none}100%{-o-transform:translate(-28px,0);transform:translate(-28px,0)}}@-ms-keyframes pace-theme-mac-osx-motion{0%{-ms-transform:none;transform:none}100%{-ms-transform:translate(-28px,0);transform:translate(-28px,0)}}@keyframes pace-theme-mac-osx-motion{0%{transform:none}100%{transform:translate(-28px,0)}}","source":"lib/pace/pace-theme-mac-osx.min.css","raw":".pace,.pace .pace-progress{width:100%;height:12px;overflow:hidden}.pace,.pace .pace-activity{position:fixed;top:0;left:0}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;background:#fff}.pace-inactive{display:none}.pace .pace-progress{background-color:#0087E1;position:fixed;top:0;right:100%;-webkit-border-radius:0 0 4px;-moz-border-radius:0 0 4px;-o-border-radius:0 0 4px;border-radius:0 0 4px;-webkit-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);-moz-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);-o-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3)}.pace .pace-activity{right:-28px;bottom:0;-webkit-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-moz-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-o-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-webkit-background-size:28px 100%;-moz-background-size:28px 100%;-o-background-size:28px 100%;background-size:28px 100%;-webkit-animation:pace-theme-mac-osx-motion .5s linear infinite;-moz-animation:pace-theme-mac-osx-motion .5s linear infinite;-ms-animation:pace-theme-mac-osx-motion .5s linear infinite;-o-animation:pace-theme-mac-osx-motion .5s linear infinite;animation:pace-theme-mac-osx-motion .5s linear infinite}@-webkit-keyframes pace-theme-mac-osx-motion{0%{-webkit-transform:none;transform:none}100%{-webkit-transform:translate(-28px,0);transform:translate(-28px,0)}}@-moz-keyframes pace-theme-mac-osx-motion{0%{-moz-transform:none;transform:none}100%{-moz-transform:translate(-28px,0);transform:translate(-28px,0)}}@-o-keyframes pace-theme-mac-osx-motion{0%{-o-transform:none;transform:none}100%{-o-transform:translate(-28px,0);transform:translate(-28px,0)}}@-ms-keyframes pace-theme-mac-osx-motion{0%{-ms-transform:none;transform:none}100%{-ms-transform:translate(-28px,0);transform:translate(-28px,0)}}@keyframes pace-theme-mac-osx-motion{0%{transform:none}100%{transform:translate(-28px,0)}}","date":"2019-06-21T06:36:41.260Z","updated":"2019-06-21T06:36:41.260Z","path":"lib/pace/pace-theme-mac-osx.min.css","layout":"false","title":"","comments":1,"_id":"cjxijp65z001tdvw916cfs8sf","content":".pace,.pace .pace-progress{width:100%;height:12px;overflow:hidden}.pace,.pace .pace-activity{position:fixed;top:0;left:0}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;background:#fff}.pace-inactive{display:none}.pace .pace-progress{background-color:#0087E1;position:fixed;top:0;right:100%;-webkit-border-radius:0 0 4px;-moz-border-radius:0 0 4px;-o-border-radius:0 0 4px;border-radius:0 0 4px;-webkit-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);-moz-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);-o-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3)}.pace .pace-activity{right:-28px;bottom:0;-webkit-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-moz-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-o-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-webkit-background-size:28px 100%;-moz-background-size:28px 100%;-o-background-size:28px 100%;background-size:28px 100%;-webkit-animation:pace-theme-mac-osx-motion .5s linear infinite;-moz-animation:pace-theme-mac-osx-motion .5s linear infinite;-ms-animation:pace-theme-mac-osx-motion .5s linear infinite;-o-animation:pace-theme-mac-osx-motion .5s linear infinite;animation:pace-theme-mac-osx-motion .5s linear infinite}@-webkit-keyframes pace-theme-mac-osx-motion{0%{-webkit-transform:none;transform:none}100%{-webkit-transform:translate(-28px,0);transform:translate(-28px,0)}}@-moz-keyframes pace-theme-mac-osx-motion{0%{-moz-transform:none;transform:none}100%{-moz-transform:translate(-28px,0);transform:translate(-28px,0)}}@-o-keyframes pace-theme-mac-osx-motion{0%{-o-transform:none;transform:none}100%{-o-transform:translate(-28px,0);transform:translate(-28px,0)}}@-ms-keyframes pace-theme-mac-osx-motion{0%{-ms-transform:none;transform:none}100%{-ms-transform:translate(-28px,0);transform:translate(-28px,0)}}@keyframes pace-theme-mac-osx-motion{0%{transform:none}100%{transform:translate(-28px,0)}}","site":{"data":{}},"excerpt":"","more":".pace,.pace .pace-progress{width:100%;height:12px;overflow:hidden}.pace,.pace .pace-activity{position:fixed;top:0;left:0}.pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;z-index:2000;background:#fff}.pace-inactive{display:none}.pace .pace-progress{background-color:#0087E1;position:fixed;top:0;right:100%;-webkit-border-radius:0 0 4px;-moz-border-radius:0 0 4px;-o-border-radius:0 0 4px;border-radius:0 0 4px;-webkit-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);-moz-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);-o-box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3);box-shadow:inset -1px 0 #00558F,inset 0 -1px #00558F,inset 0 2px rgba(255,255,255,.5),inset 0 6px rgba(255,255,255,.3)}.pace .pace-activity{right:-28px;bottom:0;-webkit-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-moz-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-o-background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);background-image:radial-gradient(rgba(255,255,255,.65) 0,rgba(255,255,255,.15) 100%);-webkit-background-size:28px 100%;-moz-background-size:28px 100%;-o-background-size:28px 100%;background-size:28px 100%;-webkit-animation:pace-theme-mac-osx-motion .5s linear infinite;-moz-animation:pace-theme-mac-osx-motion .5s linear infinite;-ms-animation:pace-theme-mac-osx-motion .5s linear infinite;-o-animation:pace-theme-mac-osx-motion .5s linear infinite;animation:pace-theme-mac-osx-motion .5s linear infinite}@-webkit-keyframes pace-theme-mac-osx-motion{0%{-webkit-transform:none;transform:none}100%{-webkit-transform:translate(-28px,0);transform:translate(-28px,0)}}@-moz-keyframes pace-theme-mac-osx-motion{0%{-moz-transform:none;transform:none}100%{-moz-transform:translate(-28px,0);transform:translate(-28px,0)}}@-o-keyframes pace-theme-mac-osx-motion{0%{-o-transform:none;transform:none}100%{-o-transform:translate(-28px,0);transform:translate(-28px,0)}}@-ms-keyframes pace-theme-mac-osx-motion{0%{-ms-transform:none;transform:none}100%{-ms-transform:translate(-28px,0);transform:translate(-28px,0)}}@keyframes pace-theme-mac-osx-motion{0%{transform:none}100%{transform:translate(-28px,0)}}"},{"_content":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background:#29d;position:fixed;z-index:2000;top:0;right:100%;width:100%;height:2px}","source":"lib/pace/pace-theme-minimal.min.css","raw":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background:#29d;position:fixed;z-index:2000;top:0;right:100%;width:100%;height:2px}","date":"2019-06-21T06:36:41.260Z","updated":"2019-06-21T06:36:41.260Z","path":"lib/pace/pace-theme-minimal.min.css","layout":"false","title":"","comments":1,"_id":"cjxijp669001udvw963ug3qp3","content":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background:#29d;position:fixed;z-index:2000;top:0;right:100%;width:100%;height:2px}","site":{"data":{}},"excerpt":"","more":".pace{-webkit-pointer-events:none;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.pace-inactive{display:none}.pace .pace-progress{background:#29d;position:fixed;z-index:2000;top:0;right:100%;width:100%;height:2px}"},{"_content":"/*! pace 1.0.2 */\n(function(){var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X=[].slice,Y={}.hasOwnProperty,Z=function(a,b){function c(){this.constructor=a}for(var d in b)Y.call(b,d)&&(a[d]=b[d]);return c.prototype=b.prototype,a.prototype=new c,a.__super__=b.prototype,a},$=[].indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(b in this&&this[b]===a)return b;return-1};for(u={catchupTime:100,initialRate:.03,minTime:250,ghostTime:100,maxProgressPerFrame:20,easeFactor:1.25,startOnPageLoad:!0,restartOnPushState:!0,restartOnRequestAfter:500,target:\"body\",elements:{checkInterval:100,selectors:[\"body\"]},eventLag:{minSamples:10,sampleCount:3,lagThreshold:3},ajax:{trackMethods:[\"GET\"],trackWebSockets:!0,ignoreURLs:[]}},C=function(){var a;return null!=(a=\"undefined\"!=typeof performance&&null!==performance&&\"function\"==typeof performance.now?performance.now():void 0)?a:+new Date},E=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,t=window.cancelAnimationFrame||window.mozCancelAnimationFrame,null==E&&(E=function(a){return setTimeout(a,50)},t=function(a){return clearTimeout(a)}),G=function(a){var b,c;return b=C(),(c=function(){var d;return d=C()-b,d>=33?(b=C(),a(d,function(){return E(c)})):setTimeout(c,33-d)})()},F=function(){var a,b,c;return c=arguments[0],b=arguments[1],a=3<=arguments.length?X.call(arguments,2):[],\"function\"==typeof c[b]?c[b].apply(c,a):c[b]},v=function(){var a,b,c,d,e,f,g;for(b=arguments[0],d=2<=arguments.length?X.call(arguments,1):[],f=0,g=d.length;g>f;f++)if(c=d[f])for(a in c)Y.call(c,a)&&(e=c[a],null!=b[a]&&\"object\"==typeof b[a]&&null!=e&&\"object\"==typeof e?v(b[a],e):b[a]=e);return b},q=function(a){var b,c,d,e,f;for(c=b=0,e=0,f=a.length;f>e;e++)d=a[e],c+=Math.abs(d),b++;return c/b},x=function(a,b){var c,d,e;if(null==a&&(a=\"options\"),null==b&&(b=!0),e=document.querySelector(\"[data-pace-\"+a+\"]\")){if(c=e.getAttribute(\"data-pace-\"+a),!b)return c;try{return JSON.parse(c)}catch(f){return d=f,\"undefined\"!=typeof console&&null!==console?console.error(\"Error parsing inline pace options\",d):void 0}}},g=function(){function a(){}return a.prototype.on=function(a,b,c,d){var e;return null==d&&(d=!1),null==this.bindings&&(this.bindings={}),null==(e=this.bindings)[a]&&(e[a]=[]),this.bindings[a].push({handler:b,ctx:c,once:d})},a.prototype.once=function(a,b,c){return this.on(a,b,c,!0)},a.prototype.off=function(a,b){var c,d,e;if(null!=(null!=(d=this.bindings)?d[a]:void 0)){if(null==b)return delete this.bindings[a];for(c=0,e=[];c<this.bindings[a].length;)e.push(this.bindings[a][c].handler===b?this.bindings[a].splice(c,1):c++);return e}},a.prototype.trigger=function(){var a,b,c,d,e,f,g,h,i;if(c=arguments[0],a=2<=arguments.length?X.call(arguments,1):[],null!=(g=this.bindings)?g[c]:void 0){for(e=0,i=[];e<this.bindings[c].length;)h=this.bindings[c][e],d=h.handler,b=h.ctx,f=h.once,d.apply(null!=b?b:this,a),i.push(f?this.bindings[c].splice(e,1):e++);return i}},a}(),j=window.Pace||{},window.Pace=j,v(j,g.prototype),D=j.options=v({},u,window.paceOptions,x()),U=[\"ajax\",\"document\",\"eventLag\",\"elements\"],Q=0,S=U.length;S>Q;Q++)K=U[Q],D[K]===!0&&(D[K]=u[K]);i=function(a){function b(){return V=b.__super__.constructor.apply(this,arguments)}return Z(b,a),b}(Error),b=function(){function a(){this.progress=0}return a.prototype.getElement=function(){var a;if(null==this.el){if(a=document.querySelector(D.target),!a)throw new i;this.el=document.createElement(\"div\"),this.el.className=\"pace pace-active\",document.body.className=document.body.className.replace(/pace-done/g,\"\"),document.body.className+=\" pace-running\",this.el.innerHTML='<div class=\"pace-progress\">\\n  <div class=\"pace-progress-inner\"></div>\\n</div>\\n<div class=\"pace-activity\"></div>',null!=a.firstChild?a.insertBefore(this.el,a.firstChild):a.appendChild(this.el)}return this.el},a.prototype.finish=function(){var a;return a=this.getElement(),a.className=a.className.replace(\"pace-active\",\"\"),a.className+=\" pace-inactive\",document.body.className=document.body.className.replace(\"pace-running\",\"\"),document.body.className+=\" pace-done\"},a.prototype.update=function(a){return this.progress=a,this.render()},a.prototype.destroy=function(){try{this.getElement().parentNode.removeChild(this.getElement())}catch(a){i=a}return this.el=void 0},a.prototype.render=function(){var a,b,c,d,e,f,g;if(null==document.querySelector(D.target))return!1;for(a=this.getElement(),d=\"translate3d(\"+this.progress+\"%, 0, 0)\",g=[\"webkitTransform\",\"msTransform\",\"transform\"],e=0,f=g.length;f>e;e++)b=g[e],a.children[0].style[b]=d;return(!this.lastRenderedProgress||this.lastRenderedProgress|0!==this.progress|0)&&(a.children[0].setAttribute(\"data-progress-text\",\"\"+(0|this.progress)+\"%\"),this.progress>=100?c=\"99\":(c=this.progress<10?\"0\":\"\",c+=0|this.progress),a.children[0].setAttribute(\"data-progress\",\"\"+c)),this.lastRenderedProgress=this.progress},a.prototype.done=function(){return this.progress>=100},a}(),h=function(){function a(){this.bindings={}}return a.prototype.trigger=function(a,b){var c,d,e,f,g;if(null!=this.bindings[a]){for(f=this.bindings[a],g=[],d=0,e=f.length;e>d;d++)c=f[d],g.push(c.call(this,b));return g}},a.prototype.on=function(a,b){var c;return null==(c=this.bindings)[a]&&(c[a]=[]),this.bindings[a].push(b)},a}(),P=window.XMLHttpRequest,O=window.XDomainRequest,N=window.WebSocket,w=function(a,b){var c,d,e;e=[];for(d in b.prototype)try{e.push(null==a[d]&&\"function\"!=typeof b[d]?\"function\"==typeof Object.defineProperty?Object.defineProperty(a,d,{get:function(){return b.prototype[d]},configurable:!0,enumerable:!0}):a[d]=b.prototype[d]:void 0)}catch(f){c=f}return e},A=[],j.ignore=function(){var a,b,c;return b=arguments[0],a=2<=arguments.length?X.call(arguments,1):[],A.unshift(\"ignore\"),c=b.apply(null,a),A.shift(),c},j.track=function(){var a,b,c;return b=arguments[0],a=2<=arguments.length?X.call(arguments,1):[],A.unshift(\"track\"),c=b.apply(null,a),A.shift(),c},J=function(a){var b;if(null==a&&(a=\"GET\"),\"track\"===A[0])return\"force\";if(!A.length&&D.ajax){if(\"socket\"===a&&D.ajax.trackWebSockets)return!0;if(b=a.toUpperCase(),$.call(D.ajax.trackMethods,b)>=0)return!0}return!1},k=function(a){function b(){var a,c=this;b.__super__.constructor.apply(this,arguments),a=function(a){var b;return b=a.open,a.open=function(d,e){return J(d)&&c.trigger(\"request\",{type:d,url:e,request:a}),b.apply(a,arguments)}},window.XMLHttpRequest=function(b){var c;return c=new P(b),a(c),c};try{w(window.XMLHttpRequest,P)}catch(d){}if(null!=O){window.XDomainRequest=function(){var b;return b=new O,a(b),b};try{w(window.XDomainRequest,O)}catch(d){}}if(null!=N&&D.ajax.trackWebSockets){window.WebSocket=function(a,b){var d;return d=null!=b?new N(a,b):new N(a),J(\"socket\")&&c.trigger(\"request\",{type:\"socket\",url:a,protocols:b,request:d}),d};try{w(window.WebSocket,N)}catch(d){}}}return Z(b,a),b}(h),R=null,y=function(){return null==R&&(R=new k),R},I=function(a){var b,c,d,e;for(e=D.ajax.ignoreURLs,c=0,d=e.length;d>c;c++)if(b=e[c],\"string\"==typeof b){if(-1!==a.indexOf(b))return!0}else if(b.test(a))return!0;return!1},y().on(\"request\",function(b){var c,d,e,f,g;return f=b.type,e=b.request,g=b.url,I(g)?void 0:j.running||D.restartOnRequestAfter===!1&&\"force\"!==J(f)?void 0:(d=arguments,c=D.restartOnRequestAfter||0,\"boolean\"==typeof c&&(c=0),setTimeout(function(){var b,c,g,h,i,k;if(b=\"socket\"===f?e.readyState<2:0<(h=e.readyState)&&4>h){for(j.restart(),i=j.sources,k=[],c=0,g=i.length;g>c;c++){if(K=i[c],K instanceof a){K.watch.apply(K,d);break}k.push(void 0)}return k}},c))}),a=function(){function a(){var a=this;this.elements=[],y().on(\"request\",function(){return a.watch.apply(a,arguments)})}return a.prototype.watch=function(a){var b,c,d,e;return d=a.type,b=a.request,e=a.url,I(e)?void 0:(c=\"socket\"===d?new n(b):new o(b),this.elements.push(c))},a}(),o=function(){function a(a){var b,c,d,e,f,g,h=this;if(this.progress=0,null!=window.ProgressEvent)for(c=null,a.addEventListener(\"progress\",function(a){return h.progress=a.lengthComputable?100*a.loaded/a.total:h.progress+(100-h.progress)/2},!1),g=[\"load\",\"abort\",\"timeout\",\"error\"],d=0,e=g.length;e>d;d++)b=g[d],a.addEventListener(b,function(){return h.progress=100},!1);else f=a.onreadystatechange,a.onreadystatechange=function(){var b;return 0===(b=a.readyState)||4===b?h.progress=100:3===a.readyState&&(h.progress=50),\"function\"==typeof f?f.apply(null,arguments):void 0}}return a}(),n=function(){function a(a){var b,c,d,e,f=this;for(this.progress=0,e=[\"error\",\"open\"],c=0,d=e.length;d>c;c++)b=e[c],a.addEventListener(b,function(){return f.progress=100},!1)}return a}(),d=function(){function a(a){var b,c,d,f;for(null==a&&(a={}),this.elements=[],null==a.selectors&&(a.selectors=[]),f=a.selectors,c=0,d=f.length;d>c;c++)b=f[c],this.elements.push(new e(b))}return a}(),e=function(){function a(a){this.selector=a,this.progress=0,this.check()}return a.prototype.check=function(){var a=this;return document.querySelector(this.selector)?this.done():setTimeout(function(){return a.check()},D.elements.checkInterval)},a.prototype.done=function(){return this.progress=100},a}(),c=function(){function a(){var a,b,c=this;this.progress=null!=(b=this.states[document.readyState])?b:100,a=document.onreadystatechange,document.onreadystatechange=function(){return null!=c.states[document.readyState]&&(c.progress=c.states[document.readyState]),\"function\"==typeof a?a.apply(null,arguments):void 0}}return a.prototype.states={loading:0,interactive:50,complete:100},a}(),f=function(){function a(){var a,b,c,d,e,f=this;this.progress=0,a=0,e=[],d=0,c=C(),b=setInterval(function(){var g;return g=C()-c-50,c=C(),e.push(g),e.length>D.eventLag.sampleCount&&e.shift(),a=q(e),++d>=D.eventLag.minSamples&&a<D.eventLag.lagThreshold?(f.progress=100,clearInterval(b)):f.progress=100*(3/(a+3))},50)}return a}(),m=function(){function a(a){this.source=a,this.last=this.sinceLastUpdate=0,this.rate=D.initialRate,this.catchup=0,this.progress=this.lastProgress=0,null!=this.source&&(this.progress=F(this.source,\"progress\"))}return a.prototype.tick=function(a,b){var c;return null==b&&(b=F(this.source,\"progress\")),b>=100&&(this.done=!0),b===this.last?this.sinceLastUpdate+=a:(this.sinceLastUpdate&&(this.rate=(b-this.last)/this.sinceLastUpdate),this.catchup=(b-this.progress)/D.catchupTime,this.sinceLastUpdate=0,this.last=b),b>this.progress&&(this.progress+=this.catchup*a),c=1-Math.pow(this.progress/100,D.easeFactor),this.progress+=c*this.rate*a,this.progress=Math.min(this.lastProgress+D.maxProgressPerFrame,this.progress),this.progress=Math.max(0,this.progress),this.progress=Math.min(100,this.progress),this.lastProgress=this.progress,this.progress},a}(),L=null,H=null,r=null,M=null,p=null,s=null,j.running=!1,z=function(){return D.restartOnPushState?j.restart():void 0},null!=window.history.pushState&&(T=window.history.pushState,window.history.pushState=function(){return z(),T.apply(window.history,arguments)}),null!=window.history.replaceState&&(W=window.history.replaceState,window.history.replaceState=function(){return z(),W.apply(window.history,arguments)}),l={ajax:a,elements:d,document:c,eventLag:f},(B=function(){var a,c,d,e,f,g,h,i;for(j.sources=L=[],g=[\"ajax\",\"elements\",\"document\",\"eventLag\"],c=0,e=g.length;e>c;c++)a=g[c],D[a]!==!1&&L.push(new l[a](D[a]));for(i=null!=(h=D.extraSources)?h:[],d=0,f=i.length;f>d;d++)K=i[d],L.push(new K(D));return j.bar=r=new b,H=[],M=new m})(),j.stop=function(){return j.trigger(\"stop\"),j.running=!1,r.destroy(),s=!0,null!=p&&(\"function\"==typeof t&&t(p),p=null),B()},j.restart=function(){return j.trigger(\"restart\"),j.stop(),j.start()},j.go=function(){var a;return j.running=!0,r.render(),a=C(),s=!1,p=G(function(b,c){var d,e,f,g,h,i,k,l,n,o,p,q,t,u,v,w;for(l=100-r.progress,e=p=0,f=!0,i=q=0,u=L.length;u>q;i=++q)for(K=L[i],o=null!=H[i]?H[i]:H[i]=[],h=null!=(w=K.elements)?w:[K],k=t=0,v=h.length;v>t;k=++t)g=h[k],n=null!=o[k]?o[k]:o[k]=new m(g),f&=n.done,n.done||(e++,p+=n.tick(b));return d=p/e,r.update(M.tick(b,d)),r.done()||f||s?(r.update(100),j.trigger(\"done\"),setTimeout(function(){return r.finish(),j.running=!1,j.trigger(\"hide\")},Math.max(D.ghostTime,Math.max(D.minTime-(C()-a),0)))):c()})},j.start=function(a){v(D,a),j.running=!0;try{r.render()}catch(b){i=b}return document.querySelector(\".pace\")?(j.trigger(\"start\"),j.go()):setTimeout(j.start,50)},\"function\"==typeof define&&define.amd?define([\"pace\"],function(){return j}):\"object\"==typeof exports?module.exports=j:D.startOnPageLoad&&j.start()}).call(this);","source":"lib/pace/pace.min.js","raw":"/*! pace 1.0.2 */\n(function(){var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X=[].slice,Y={}.hasOwnProperty,Z=function(a,b){function c(){this.constructor=a}for(var d in b)Y.call(b,d)&&(a[d]=b[d]);return c.prototype=b.prototype,a.prototype=new c,a.__super__=b.prototype,a},$=[].indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(b in this&&this[b]===a)return b;return-1};for(u={catchupTime:100,initialRate:.03,minTime:250,ghostTime:100,maxProgressPerFrame:20,easeFactor:1.25,startOnPageLoad:!0,restartOnPushState:!0,restartOnRequestAfter:500,target:\"body\",elements:{checkInterval:100,selectors:[\"body\"]},eventLag:{minSamples:10,sampleCount:3,lagThreshold:3},ajax:{trackMethods:[\"GET\"],trackWebSockets:!0,ignoreURLs:[]}},C=function(){var a;return null!=(a=\"undefined\"!=typeof performance&&null!==performance&&\"function\"==typeof performance.now?performance.now():void 0)?a:+new Date},E=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,t=window.cancelAnimationFrame||window.mozCancelAnimationFrame,null==E&&(E=function(a){return setTimeout(a,50)},t=function(a){return clearTimeout(a)}),G=function(a){var b,c;return b=C(),(c=function(){var d;return d=C()-b,d>=33?(b=C(),a(d,function(){return E(c)})):setTimeout(c,33-d)})()},F=function(){var a,b,c;return c=arguments[0],b=arguments[1],a=3<=arguments.length?X.call(arguments,2):[],\"function\"==typeof c[b]?c[b].apply(c,a):c[b]},v=function(){var a,b,c,d,e,f,g;for(b=arguments[0],d=2<=arguments.length?X.call(arguments,1):[],f=0,g=d.length;g>f;f++)if(c=d[f])for(a in c)Y.call(c,a)&&(e=c[a],null!=b[a]&&\"object\"==typeof b[a]&&null!=e&&\"object\"==typeof e?v(b[a],e):b[a]=e);return b},q=function(a){var b,c,d,e,f;for(c=b=0,e=0,f=a.length;f>e;e++)d=a[e],c+=Math.abs(d),b++;return c/b},x=function(a,b){var c,d,e;if(null==a&&(a=\"options\"),null==b&&(b=!0),e=document.querySelector(\"[data-pace-\"+a+\"]\")){if(c=e.getAttribute(\"data-pace-\"+a),!b)return c;try{return JSON.parse(c)}catch(f){return d=f,\"undefined\"!=typeof console&&null!==console?console.error(\"Error parsing inline pace options\",d):void 0}}},g=function(){function a(){}return a.prototype.on=function(a,b,c,d){var e;return null==d&&(d=!1),null==this.bindings&&(this.bindings={}),null==(e=this.bindings)[a]&&(e[a]=[]),this.bindings[a].push({handler:b,ctx:c,once:d})},a.prototype.once=function(a,b,c){return this.on(a,b,c,!0)},a.prototype.off=function(a,b){var c,d,e;if(null!=(null!=(d=this.bindings)?d[a]:void 0)){if(null==b)return delete this.bindings[a];for(c=0,e=[];c<this.bindings[a].length;)e.push(this.bindings[a][c].handler===b?this.bindings[a].splice(c,1):c++);return e}},a.prototype.trigger=function(){var a,b,c,d,e,f,g,h,i;if(c=arguments[0],a=2<=arguments.length?X.call(arguments,1):[],null!=(g=this.bindings)?g[c]:void 0){for(e=0,i=[];e<this.bindings[c].length;)h=this.bindings[c][e],d=h.handler,b=h.ctx,f=h.once,d.apply(null!=b?b:this,a),i.push(f?this.bindings[c].splice(e,1):e++);return i}},a}(),j=window.Pace||{},window.Pace=j,v(j,g.prototype),D=j.options=v({},u,window.paceOptions,x()),U=[\"ajax\",\"document\",\"eventLag\",\"elements\"],Q=0,S=U.length;S>Q;Q++)K=U[Q],D[K]===!0&&(D[K]=u[K]);i=function(a){function b(){return V=b.__super__.constructor.apply(this,arguments)}return Z(b,a),b}(Error),b=function(){function a(){this.progress=0}return a.prototype.getElement=function(){var a;if(null==this.el){if(a=document.querySelector(D.target),!a)throw new i;this.el=document.createElement(\"div\"),this.el.className=\"pace pace-active\",document.body.className=document.body.className.replace(/pace-done/g,\"\"),document.body.className+=\" pace-running\",this.el.innerHTML='<div class=\"pace-progress\">\\n  <div class=\"pace-progress-inner\"></div>\\n</div>\\n<div class=\"pace-activity\"></div>',null!=a.firstChild?a.insertBefore(this.el,a.firstChild):a.appendChild(this.el)}return this.el},a.prototype.finish=function(){var a;return a=this.getElement(),a.className=a.className.replace(\"pace-active\",\"\"),a.className+=\" pace-inactive\",document.body.className=document.body.className.replace(\"pace-running\",\"\"),document.body.className+=\" pace-done\"},a.prototype.update=function(a){return this.progress=a,this.render()},a.prototype.destroy=function(){try{this.getElement().parentNode.removeChild(this.getElement())}catch(a){i=a}return this.el=void 0},a.prototype.render=function(){var a,b,c,d,e,f,g;if(null==document.querySelector(D.target))return!1;for(a=this.getElement(),d=\"translate3d(\"+this.progress+\"%, 0, 0)\",g=[\"webkitTransform\",\"msTransform\",\"transform\"],e=0,f=g.length;f>e;e++)b=g[e],a.children[0].style[b]=d;return(!this.lastRenderedProgress||this.lastRenderedProgress|0!==this.progress|0)&&(a.children[0].setAttribute(\"data-progress-text\",\"\"+(0|this.progress)+\"%\"),this.progress>=100?c=\"99\":(c=this.progress<10?\"0\":\"\",c+=0|this.progress),a.children[0].setAttribute(\"data-progress\",\"\"+c)),this.lastRenderedProgress=this.progress},a.prototype.done=function(){return this.progress>=100},a}(),h=function(){function a(){this.bindings={}}return a.prototype.trigger=function(a,b){var c,d,e,f,g;if(null!=this.bindings[a]){for(f=this.bindings[a],g=[],d=0,e=f.length;e>d;d++)c=f[d],g.push(c.call(this,b));return g}},a.prototype.on=function(a,b){var c;return null==(c=this.bindings)[a]&&(c[a]=[]),this.bindings[a].push(b)},a}(),P=window.XMLHttpRequest,O=window.XDomainRequest,N=window.WebSocket,w=function(a,b){var c,d,e;e=[];for(d in b.prototype)try{e.push(null==a[d]&&\"function\"!=typeof b[d]?\"function\"==typeof Object.defineProperty?Object.defineProperty(a,d,{get:function(){return b.prototype[d]},configurable:!0,enumerable:!0}):a[d]=b.prototype[d]:void 0)}catch(f){c=f}return e},A=[],j.ignore=function(){var a,b,c;return b=arguments[0],a=2<=arguments.length?X.call(arguments,1):[],A.unshift(\"ignore\"),c=b.apply(null,a),A.shift(),c},j.track=function(){var a,b,c;return b=arguments[0],a=2<=arguments.length?X.call(arguments,1):[],A.unshift(\"track\"),c=b.apply(null,a),A.shift(),c},J=function(a){var b;if(null==a&&(a=\"GET\"),\"track\"===A[0])return\"force\";if(!A.length&&D.ajax){if(\"socket\"===a&&D.ajax.trackWebSockets)return!0;if(b=a.toUpperCase(),$.call(D.ajax.trackMethods,b)>=0)return!0}return!1},k=function(a){function b(){var a,c=this;b.__super__.constructor.apply(this,arguments),a=function(a){var b;return b=a.open,a.open=function(d,e){return J(d)&&c.trigger(\"request\",{type:d,url:e,request:a}),b.apply(a,arguments)}},window.XMLHttpRequest=function(b){var c;return c=new P(b),a(c),c};try{w(window.XMLHttpRequest,P)}catch(d){}if(null!=O){window.XDomainRequest=function(){var b;return b=new O,a(b),b};try{w(window.XDomainRequest,O)}catch(d){}}if(null!=N&&D.ajax.trackWebSockets){window.WebSocket=function(a,b){var d;return d=null!=b?new N(a,b):new N(a),J(\"socket\")&&c.trigger(\"request\",{type:\"socket\",url:a,protocols:b,request:d}),d};try{w(window.WebSocket,N)}catch(d){}}}return Z(b,a),b}(h),R=null,y=function(){return null==R&&(R=new k),R},I=function(a){var b,c,d,e;for(e=D.ajax.ignoreURLs,c=0,d=e.length;d>c;c++)if(b=e[c],\"string\"==typeof b){if(-1!==a.indexOf(b))return!0}else if(b.test(a))return!0;return!1},y().on(\"request\",function(b){var c,d,e,f,g;return f=b.type,e=b.request,g=b.url,I(g)?void 0:j.running||D.restartOnRequestAfter===!1&&\"force\"!==J(f)?void 0:(d=arguments,c=D.restartOnRequestAfter||0,\"boolean\"==typeof c&&(c=0),setTimeout(function(){var b,c,g,h,i,k;if(b=\"socket\"===f?e.readyState<2:0<(h=e.readyState)&&4>h){for(j.restart(),i=j.sources,k=[],c=0,g=i.length;g>c;c++){if(K=i[c],K instanceof a){K.watch.apply(K,d);break}k.push(void 0)}return k}},c))}),a=function(){function a(){var a=this;this.elements=[],y().on(\"request\",function(){return a.watch.apply(a,arguments)})}return a.prototype.watch=function(a){var b,c,d,e;return d=a.type,b=a.request,e=a.url,I(e)?void 0:(c=\"socket\"===d?new n(b):new o(b),this.elements.push(c))},a}(),o=function(){function a(a){var b,c,d,e,f,g,h=this;if(this.progress=0,null!=window.ProgressEvent)for(c=null,a.addEventListener(\"progress\",function(a){return h.progress=a.lengthComputable?100*a.loaded/a.total:h.progress+(100-h.progress)/2},!1),g=[\"load\",\"abort\",\"timeout\",\"error\"],d=0,e=g.length;e>d;d++)b=g[d],a.addEventListener(b,function(){return h.progress=100},!1);else f=a.onreadystatechange,a.onreadystatechange=function(){var b;return 0===(b=a.readyState)||4===b?h.progress=100:3===a.readyState&&(h.progress=50),\"function\"==typeof f?f.apply(null,arguments):void 0}}return a}(),n=function(){function a(a){var b,c,d,e,f=this;for(this.progress=0,e=[\"error\",\"open\"],c=0,d=e.length;d>c;c++)b=e[c],a.addEventListener(b,function(){return f.progress=100},!1)}return a}(),d=function(){function a(a){var b,c,d,f;for(null==a&&(a={}),this.elements=[],null==a.selectors&&(a.selectors=[]),f=a.selectors,c=0,d=f.length;d>c;c++)b=f[c],this.elements.push(new e(b))}return a}(),e=function(){function a(a){this.selector=a,this.progress=0,this.check()}return a.prototype.check=function(){var a=this;return document.querySelector(this.selector)?this.done():setTimeout(function(){return a.check()},D.elements.checkInterval)},a.prototype.done=function(){return this.progress=100},a}(),c=function(){function a(){var a,b,c=this;this.progress=null!=(b=this.states[document.readyState])?b:100,a=document.onreadystatechange,document.onreadystatechange=function(){return null!=c.states[document.readyState]&&(c.progress=c.states[document.readyState]),\"function\"==typeof a?a.apply(null,arguments):void 0}}return a.prototype.states={loading:0,interactive:50,complete:100},a}(),f=function(){function a(){var a,b,c,d,e,f=this;this.progress=0,a=0,e=[],d=0,c=C(),b=setInterval(function(){var g;return g=C()-c-50,c=C(),e.push(g),e.length>D.eventLag.sampleCount&&e.shift(),a=q(e),++d>=D.eventLag.minSamples&&a<D.eventLag.lagThreshold?(f.progress=100,clearInterval(b)):f.progress=100*(3/(a+3))},50)}return a}(),m=function(){function a(a){this.source=a,this.last=this.sinceLastUpdate=0,this.rate=D.initialRate,this.catchup=0,this.progress=this.lastProgress=0,null!=this.source&&(this.progress=F(this.source,\"progress\"))}return a.prototype.tick=function(a,b){var c;return null==b&&(b=F(this.source,\"progress\")),b>=100&&(this.done=!0),b===this.last?this.sinceLastUpdate+=a:(this.sinceLastUpdate&&(this.rate=(b-this.last)/this.sinceLastUpdate),this.catchup=(b-this.progress)/D.catchupTime,this.sinceLastUpdate=0,this.last=b),b>this.progress&&(this.progress+=this.catchup*a),c=1-Math.pow(this.progress/100,D.easeFactor),this.progress+=c*this.rate*a,this.progress=Math.min(this.lastProgress+D.maxProgressPerFrame,this.progress),this.progress=Math.max(0,this.progress),this.progress=Math.min(100,this.progress),this.lastProgress=this.progress,this.progress},a}(),L=null,H=null,r=null,M=null,p=null,s=null,j.running=!1,z=function(){return D.restartOnPushState?j.restart():void 0},null!=window.history.pushState&&(T=window.history.pushState,window.history.pushState=function(){return z(),T.apply(window.history,arguments)}),null!=window.history.replaceState&&(W=window.history.replaceState,window.history.replaceState=function(){return z(),W.apply(window.history,arguments)}),l={ajax:a,elements:d,document:c,eventLag:f},(B=function(){var a,c,d,e,f,g,h,i;for(j.sources=L=[],g=[\"ajax\",\"elements\",\"document\",\"eventLag\"],c=0,e=g.length;e>c;c++)a=g[c],D[a]!==!1&&L.push(new l[a](D[a]));for(i=null!=(h=D.extraSources)?h:[],d=0,f=i.length;f>d;d++)K=i[d],L.push(new K(D));return j.bar=r=new b,H=[],M=new m})(),j.stop=function(){return j.trigger(\"stop\"),j.running=!1,r.destroy(),s=!0,null!=p&&(\"function\"==typeof t&&t(p),p=null),B()},j.restart=function(){return j.trigger(\"restart\"),j.stop(),j.start()},j.go=function(){var a;return j.running=!0,r.render(),a=C(),s=!1,p=G(function(b,c){var d,e,f,g,h,i,k,l,n,o,p,q,t,u,v,w;for(l=100-r.progress,e=p=0,f=!0,i=q=0,u=L.length;u>q;i=++q)for(K=L[i],o=null!=H[i]?H[i]:H[i]=[],h=null!=(w=K.elements)?w:[K],k=t=0,v=h.length;v>t;k=++t)g=h[k],n=null!=o[k]?o[k]:o[k]=new m(g),f&=n.done,n.done||(e++,p+=n.tick(b));return d=p/e,r.update(M.tick(b,d)),r.done()||f||s?(r.update(100),j.trigger(\"done\"),setTimeout(function(){return r.finish(),j.running=!1,j.trigger(\"hide\")},Math.max(D.ghostTime,Math.max(D.minTime-(C()-a),0)))):c()})},j.start=function(a){v(D,a),j.running=!0;try{r.render()}catch(b){i=b}return document.querySelector(\".pace\")?(j.trigger(\"start\"),j.go()):setTimeout(j.start,50)},\"function\"==typeof define&&define.amd?define([\"pace\"],function(){return j}):\"object\"==typeof exports?module.exports=j:D.startOnPageLoad&&j.start()}).call(this);","date":"2019-06-21T06:36:41.264Z","updated":"2019-06-21T06:36:41.264Z","path":"lib/pace/pace.min.js","layout":"false","title":"","comments":1,"_id":"cjxijp66h001vdvw98o0jbk6m","content":"/*! pace 1.0.2 */\n(function(){var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X=[].slice,Y={}.hasOwnProperty,Z=function(a,b){function c(){this.constructor=a}for(var d in b)Y.call(b,d)&&(a[d]=b[d]);return c.prototype=b.prototype,a.prototype=new c,a.__super__=b.prototype,a},$=[].indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(b in this&&this[b]===a)return b;return-1};for(u={catchupTime:100,initialRate:.03,minTime:250,ghostTime:100,maxProgressPerFrame:20,easeFactor:1.25,startOnPageLoad:!0,restartOnPushState:!0,restartOnRequestAfter:500,target:\"body\",elements:{checkInterval:100,selectors:[\"body\"]},eventLag:{minSamples:10,sampleCount:3,lagThreshold:3},ajax:{trackMethods:[\"GET\"],trackWebSockets:!0,ignoreURLs:[]}},C=function(){var a;return null!=(a=\"undefined\"!=typeof performance&&null!==performance&&\"function\"==typeof performance.now?performance.now():void 0)?a:+new Date},E=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,t=window.cancelAnimationFrame||window.mozCancelAnimationFrame,null==E&&(E=function(a){return setTimeout(a,50)},t=function(a){return clearTimeout(a)}),G=function(a){var b,c;return b=C(),(c=function(){var d;return d=C()-b,d>=33?(b=C(),a(d,function(){return E(c)})):setTimeout(c,33-d)})()},F=function(){var a,b,c;return c=arguments[0],b=arguments[1],a=3<=arguments.length?x.call(arguments,2):[],\"function\"==typeof c[b]?c[b].apply(c,a):c[b]},v=\"function(){var\" a,b,c,d,e,f,g;for(b=\"arguments[0],d=2<=arguments.length?X.call(arguments,1):[],f=0,g=d.length;g\">f;f++)if(c=d[f])for(a in c)Y.call(c,a)&&(e=c[a],null!=b[a]&&\"object\"==typeof b[a]&&null!=e&&\"object\"==typeof e?v(b[a],e):b[a]=e);return b},q=function(a){var b,c,d,e,f;for(c=b=0,e=0,f=a.length;f>e;e++)d=a[e],c+=Math.abs(d),b++;return c/b},x=function(a,b){var c,d,e;if(null==a&&(a=\"options\"),null==b&&(b=!0),e=document.querySelector(\"[data-pace-\"+a+\"]\")){if(c=e.getAttribute(\"data-pace-\"+a),!b)return c;try{return JSON.parse(c)}catch(f){return d=f,\"undefined\"!=typeof console&&null!==console?console.error(\"Error parsing inline pace options\",d):void 0}}},g=function(){function a(){}return a.prototype.on=function(a,b,c,d){var e;return null==d&&(d=!1),null==this.bindings&&(this.bindings={}),null==(e=this.bindings)[a]&&(e[a]=[]),this.bindings[a].push({handler:b,ctx:c,once:d})},a.prototype.once=function(a,b,c){return this.on(a,b,c,!0)},a.prototype.off=function(a,b){var c,d,e;if(null!=(null!=(d=this.bindings)?d[a]:void 0)){if(null==b)return delete this.bindings[a];for(c=0,e=[];c<this.bindings[a].length;)e.push(this.bindings[a][c].handler===b?this.bindings[a].splice(c,1):c++);return e}},a.prototype.trigger=\"function(){var\" a,b,c,d,e,f,g,h,i;if(c=\"arguments[0],a=2<=arguments.length?X.call(arguments,1):[],null!=(g=this.bindings)?g[c]:void\" 0){for(e=\"0,i=[];e<this.bindings[c].length;)h=this.bindings[c][e],d=h.handler,b=h.ctx,f=h.once,d.apply(null!=b?b:this,a),i.push(f?this.bindings[c].splice(e,1):e++);return\" i}},a}(),j=\"window.Pace||{},window.Pace=j,v(j,g.prototype),D=j.options=v({},u,window.paceOptions,x()),U=[\" ajax\",\"document\",\"eventlag\",\"elements\"],q=\"0,S=U.length;S\"\">Q;Q++)K=U[Q],D[K]===!0&&(D[K]=u[K]);i=function(a){function b(){return V=b.__super__.constructor.apply(this,arguments)}return Z(b,a),b}(Error),b=function(){function a(){this.progress=0}return a.prototype.getElement=function(){var a;if(null==this.el){if(a=document.querySelector(D.target),!a)throw new i;this.el=document.createElement(\"div\"),this.el.className=\"pace pace-active\",document.body.className=document.body.className.replace(/pace-done/g,\"\"),document.body.className+=\" pace-running\",this.el.innerHTML='<div class=\"pace-progress\">\\n  <div class=\"pace-progress-inner\"></div>\\n</div>\\n<div class=\"pace-activity\"></div>',null!=a.firstChild?a.insertBefore(this.el,a.firstChild):a.appendChild(this.el)}return this.el},a.prototype.finish=function(){var a;return a=this.getElement(),a.className=a.className.replace(\"pace-active\",\"\"),a.className+=\" pace-inactive\",document.body.className=document.body.className.replace(\"pace-running\",\"\"),document.body.className+=\" pace-done\"},a.prototype.update=function(a){return this.progress=a,this.render()},a.prototype.destroy=function(){try{this.getElement().parentNode.removeChild(this.getElement())}catch(a){i=a}return this.el=void 0},a.prototype.render=function(){var a,b,c,d,e,f,g;if(null==document.querySelector(D.target))return!1;for(a=this.getElement(),d=\"translate3d(\"+this.progress+\"%, 0, 0)\",g=[\"webkitTransform\",\"msTransform\",\"transform\"],e=0,f=g.length;f>e;e++)b=g[e],a.children[0].style[b]=d;return(!this.lastRenderedProgress||this.lastRenderedProgress|0!==this.progress|0)&&(a.children[0].setAttribute(\"data-progress-text\",\"\"+(0|this.progress)+\"%\"),this.progress>=100?c=\"99\":(c=this.progress<10?\"0\":\"\",c+=0|this.progress),a.children[0].setattribute(\"data-progress\",\"\"+c)),this.lastrenderedprogress=this.progress},a.prototype.done=function(){return this.progress>=100},a}(),h=function(){function a(){this.bindings={}}return a.prototype.trigger=function(a,b){var c,d,e,f,g;if(null!=this.bindings[a]){for(f=this.bindings[a],g=[],d=0,e=f.length;e>d;d++)c=f[d],g.push(c.call(this,b));return g}},a.prototype.on=function(a,b){var c;return null==(c=this.bindings)[a]&&(c[a]=[]),this.bindings[a].push(b)},a}(),P=window.XMLHttpRequest,O=window.XDomainRequest,N=window.WebSocket,w=function(a,b){var c,d,e;e=[];for(d in b.prototype)try{e.push(null==a[d]&&\"function\"!=typeof b[d]?\"function\"==typeof Object.defineProperty?Object.defineProperty(a,d,{get:function(){return b.prototype[d]},configurable:!0,enumerable:!0}):a[d]=b.prototype[d]:void 0)}catch(f){c=f}return e},A=[],j.ignore=function(){var a,b,c;return b=arguments[0],a=2<=arguments.length?x.call(arguments,1):[],a.unshift(\"ignore\"),c=b.apply(null,a),a.shift(),c},j.track=function(){var a,b,c;return b=\"arguments[0],a=2<=arguments.length?X.call(arguments,1):[],A.unshift(\" track\"),c=\"b.apply(null,a),A.shift(),c},J=function(a){var\"\" b;if(null=\"=a&&(a=\" get\"),\"track\"=\"==A[0])return\"force\";if(!A.length&&D.ajax){if(\"socket\"===a&&D.ajax.trackWebSockets)return!0;if(b=a.toUpperCase(),$.call(D.ajax.trackMethods,b)\"\">=0)return!0}return!1},k=function(a){function b(){var a,c=this;b.__super__.constructor.apply(this,arguments),a=function(a){var b;return b=a.open,a.open=function(d,e){return J(d)&&c.trigger(\"request\",{type:d,url:e,request:a}),b.apply(a,arguments)}},window.XMLHttpRequest=function(b){var c;return c=new P(b),a(c),c};try{w(window.XMLHttpRequest,P)}catch(d){}if(null!=O){window.XDomainRequest=function(){var b;return b=new O,a(b),b};try{w(window.XDomainRequest,O)}catch(d){}}if(null!=N&&D.ajax.trackWebSockets){window.WebSocket=function(a,b){var d;return d=null!=b?new N(a,b):new N(a),J(\"socket\")&&c.trigger(\"request\",{type:\"socket\",url:a,protocols:b,request:d}),d};try{w(window.WebSocket,N)}catch(d){}}}return Z(b,a),b}(h),R=null,y=function(){return null==R&&(R=new k),R},I=function(a){var b,c,d,e;for(e=D.ajax.ignoreURLs,c=0,d=e.length;d>c;c++)if(b=e[c],\"string\"==typeof b){if(-1!==a.indexOf(b))return!0}else if(b.test(a))return!0;return!1},y().on(\"request\",function(b){var c,d,e,f,g;return f=b.type,e=b.request,g=b.url,I(g)?void 0:j.running||D.restartOnRequestAfter===!1&&\"force\"!==J(f)?void 0:(d=arguments,c=D.restartOnRequestAfter||0,\"boolean\"==typeof c&&(c=0),setTimeout(function(){var b,c,g,h,i,k;if(b=\"socket\"===f?e.readyState<2:0<(h=e.readystate)&&4>h){for(j.restart(),i=j.sources,k=[],c=0,g=i.length;g>c;c++){if(K=i[c],K instanceof a){K.watch.apply(K,d);break}k.push(void 0)}return k}},c))}),a=function(){function a(){var a=this;this.elements=[],y().on(\"request\",function(){return a.watch.apply(a,arguments)})}return a.prototype.watch=function(a){var b,c,d,e;return d=a.type,b=a.request,e=a.url,I(e)?void 0:(c=\"socket\"===d?new n(b):new o(b),this.elements.push(c))},a}(),o=function(){function a(a){var b,c,d,e,f,g,h=this;if(this.progress=0,null!=window.ProgressEvent)for(c=null,a.addEventListener(\"progress\",function(a){return h.progress=a.lengthComputable?100*a.loaded/a.total:h.progress+(100-h.progress)/2},!1),g=[\"load\",\"abort\",\"timeout\",\"error\"],d=0,e=g.length;e>d;d++)b=g[d],a.addEventListener(b,function(){return h.progress=100},!1);else f=a.onreadystatechange,a.onreadystatechange=function(){var b;return 0===(b=a.readyState)||4===b?h.progress=100:3===a.readyState&&(h.progress=50),\"function\"==typeof f?f.apply(null,arguments):void 0}}return a}(),n=function(){function a(a){var b,c,d,e,f=this;for(this.progress=0,e=[\"error\",\"open\"],c=0,d=e.length;d>c;c++)b=e[c],a.addEventListener(b,function(){return f.progress=100},!1)}return a}(),d=function(){function a(a){var b,c,d,f;for(null==a&&(a={}),this.elements=[],null==a.selectors&&(a.selectors=[]),f=a.selectors,c=0,d=f.length;d>c;c++)b=f[c],this.elements.push(new e(b))}return a}(),e=function(){function a(a){this.selector=a,this.progress=0,this.check()}return a.prototype.check=function(){var a=this;return document.querySelector(this.selector)?this.done():setTimeout(function(){return a.check()},D.elements.checkInterval)},a.prototype.done=function(){return this.progress=100},a}(),c=function(){function a(){var a,b,c=this;this.progress=null!=(b=this.states[document.readyState])?b:100,a=document.onreadystatechange,document.onreadystatechange=function(){return null!=c.states[document.readyState]&&(c.progress=c.states[document.readyState]),\"function\"==typeof a?a.apply(null,arguments):void 0}}return a.prototype.states={loading:0,interactive:50,complete:100},a}(),f=function(){function a(){var a,b,c,d,e,f=this;this.progress=0,a=0,e=[],d=0,c=C(),b=setInterval(function(){var g;return g=C()-c-50,c=C(),e.push(g),e.length>D.eventLag.sampleCount&&e.shift(),a=q(e),++d>=D.eventLag.minSamples&&a<d.eventlag.lagthreshold?(f.progress=100,clearinterval(b)):f.progress=100*(3 (a+3))},50)}return a}(),m=\"function(){function\" a(a){this.source=\"a,this.last=this.sinceLastUpdate=0,this.rate=D.initialRate,this.catchup=0,this.progress=this.lastProgress=0,null!=this.source&&(this.progress=F(this.source,\" progress\"))}return\" a.prototype.tick=\"function(a,b){var\" c;return null=\"=b&&(b=F(this.source,\" progress\")),b\">=100&&(this.done=!0),b===this.last?this.sinceLastUpdate+=a:(this.sinceLastUpdate&&(this.rate=(b-this.last)/this.sinceLastUpdate),this.catchup=(b-this.progress)/D.catchupTime,this.sinceLastUpdate=0,this.last=b),b>this.progress&&(this.progress+=this.catchup*a),c=1-Math.pow(this.progress/100,D.easeFactor),this.progress+=c*this.rate*a,this.progress=Math.min(this.lastProgress+D.maxProgressPerFrame,this.progress),this.progress=Math.max(0,this.progress),this.progress=Math.min(100,this.progress),this.lastProgress=this.progress,this.progress},a}(),L=null,H=null,r=null,M=null,p=null,s=null,j.running=!1,z=function(){return D.restartOnPushState?j.restart():void 0},null!=window.history.pushState&&(T=window.history.pushState,window.history.pushState=function(){return z(),T.apply(window.history,arguments)}),null!=window.history.replaceState&&(W=window.history.replaceState,window.history.replaceState=function(){return z(),W.apply(window.history,arguments)}),l={ajax:a,elements:d,document:c,eventLag:f},(B=function(){var a,c,d,e,f,g,h,i;for(j.sources=L=[],g=[\"ajax\",\"elements\",\"document\",\"eventLag\"],c=0,e=g.length;e>c;c++)a=g[c],D[a]!==!1&&L.push(new l[a](D[a]));for(i=null!=(h=D.extraSources)?h:[],d=0,f=i.length;f>d;d++)K=i[d],L.push(new K(D));return j.bar=r=new b,H=[],M=new m})(),j.stop=function(){return j.trigger(\"stop\"),j.running=!1,r.destroy(),s=!0,null!=p&&(\"function\"==typeof t&&t(p),p=null),B()},j.restart=function(){return j.trigger(\"restart\"),j.stop(),j.start()},j.go=function(){var a;return j.running=!0,r.render(),a=C(),s=!1,p=G(function(b,c){var d,e,f,g,h,i,k,l,n,o,p,q,t,u,v,w;for(l=100-r.progress,e=p=0,f=!0,i=q=0,u=L.length;u>q;i=++q)for(K=L[i],o=null!=H[i]?H[i]:H[i]=[],h=null!=(w=K.elements)?w:[K],k=t=0,v=h.length;v>t;k=++t)g=h[k],n=null!=o[k]?o[k]:o[k]=new m(g),f&=n.done,n.done||(e++,p+=n.tick(b));return d=p/e,r.update(M.tick(b,d)),r.done()||f||s?(r.update(100),j.trigger(\"done\"),setTimeout(function(){return r.finish(),j.running=!1,j.trigger(\"hide\")},Math.max(D.ghostTime,Math.max(D.minTime-(C()-a),0)))):c()})},j.start=function(a){v(D,a),j.running=!0;try{r.render()}catch(b){i=b}return document.querySelector(\".pace\")?(j.trigger(\"start\"),j.go()):setTimeout(j.start,50)},\"function\"==typeof define&&define.amd?define([\"pace\"],function(){return j}):\"object\"==typeof exports?module.exports=j:D.startOnPageLoad&&j.start()}).call(this);</d.eventlag.lagthreshold?(f.progress=100,clearinterval(b)):f.progress=100*(3></2:0<(h=e.readystate)&&4></=arguments.length?x.call(arguments,1):[],a.unshift(\"ignore\"),c=b.apply(null,a),a.shift(),c},j.track=function(){var></10?\"0\":\"\",c+=0|this.progress),a.children[0].setattribute(\"data-progress\",\"\"+c)),this.lastrenderedprogress=this.progress},a.prototype.done=function(){return></this.bindings[a].length;)e.push(this.bindings[a][c].handler===b?this.bindings[a].splice(c,1):c++);return></=arguments.length?x.call(arguments,2):[],\"function\"==typeof>","site":{"data":{}},"excerpt":"","more":"/*! pace 1.0.2 */\n(function(){var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X=[].slice,Y={}.hasOwnProperty,Z=function(a,b){function c(){this.constructor=a}for(var d in b)Y.call(b,d)&&(a[d]=b[d]);return c.prototype=b.prototype,a.prototype=new c,a.__super__=b.prototype,a},$=[].indexOf||function(a){for(var b=0,c=this.length;c>b;b++)if(b in this&&this[b]===a)return b;return-1};for(u={catchupTime:100,initialRate:.03,minTime:250,ghostTime:100,maxProgressPerFrame:20,easeFactor:1.25,startOnPageLoad:!0,restartOnPushState:!0,restartOnRequestAfter:500,target:\"body\",elements:{checkInterval:100,selectors:[\"body\"]},eventLag:{minSamples:10,sampleCount:3,lagThreshold:3},ajax:{trackMethods:[\"GET\"],trackWebSockets:!0,ignoreURLs:[]}},C=function(){var a;return null!=(a=\"undefined\"!=typeof performance&&null!==performance&&\"function\"==typeof performance.now?performance.now():void 0)?a:+new Date},E=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,t=window.cancelAnimationFrame||window.mozCancelAnimationFrame,null==E&&(E=function(a){return setTimeout(a,50)},t=function(a){return clearTimeout(a)}),G=function(a){var b,c;return b=C(),(c=function(){var d;return d=C()-b,d>=33?(b=C(),a(d,function(){return E(c)})):setTimeout(c,33-d)})()},F=function(){var a,b,c;return c=arguments[0],b=arguments[1],a=3<=arguments.length?x.call(arguments,2):[],\"function\"==typeof c[b]?c[b].apply(c,a):c[b]},v=\"function(){var\" a,b,c,d,e,f,g;for(b=\"arguments[0],d=2<=arguments.length?X.call(arguments,1):[],f=0,g=d.length;g\">f;f++)if(c=d[f])for(a in c)Y.call(c,a)&&(e=c[a],null!=b[a]&&\"object\"==typeof b[a]&&null!=e&&\"object\"==typeof e?v(b[a],e):b[a]=e);return b},q=function(a){var b,c,d,e,f;for(c=b=0,e=0,f=a.length;f>e;e++)d=a[e],c+=Math.abs(d),b++;return c/b},x=function(a,b){var c,d,e;if(null==a&&(a=\"options\"),null==b&&(b=!0),e=document.querySelector(\"[data-pace-\"+a+\"]\")){if(c=e.getAttribute(\"data-pace-\"+a),!b)return c;try{return JSON.parse(c)}catch(f){return d=f,\"undefined\"!=typeof console&&null!==console?console.error(\"Error parsing inline pace options\",d):void 0}}},g=function(){function a(){}return a.prototype.on=function(a,b,c,d){var e;return null==d&&(d=!1),null==this.bindings&&(this.bindings={}),null==(e=this.bindings)[a]&&(e[a]=[]),this.bindings[a].push({handler:b,ctx:c,once:d})},a.prototype.once=function(a,b,c){return this.on(a,b,c,!0)},a.prototype.off=function(a,b){var c,d,e;if(null!=(null!=(d=this.bindings)?d[a]:void 0)){if(null==b)return delete this.bindings[a];for(c=0,e=[];c<this.bindings[a].length;)e.push(this.bindings[a][c].handler===b?this.bindings[a].splice(c,1):c++);return e}},a.prototype.trigger=\"function(){var\" a,b,c,d,e,f,g,h,i;if(c=\"arguments[0],a=2<=arguments.length?X.call(arguments,1):[],null!=(g=this.bindings)?g[c]:void\" 0){for(e=\"0,i=[];e<this.bindings[c].length;)h=this.bindings[c][e],d=h.handler,b=h.ctx,f=h.once,d.apply(null!=b?b:this,a),i.push(f?this.bindings[c].splice(e,1):e++);return\" i}},a}(),j=\"window.Pace||{},window.Pace=j,v(j,g.prototype),D=j.options=v({},u,window.paceOptions,x()),U=[\" ajax\",\"document\",\"eventlag\",\"elements\"],q=\"0,S=U.length;S\"\">Q;Q++)K=U[Q],D[K]===!0&&(D[K]=u[K]);i=function(a){function b(){return V=b.__super__.constructor.apply(this,arguments)}return Z(b,a),b}(Error),b=function(){function a(){this.progress=0}return a.prototype.getElement=function(){var a;if(null==this.el){if(a=document.querySelector(D.target),!a)throw new i;this.el=document.createElement(\"div\"),this.el.className=\"pace pace-active\",document.body.className=document.body.className.replace(/pace-done/g,\"\"),document.body.className+=\" pace-running\",this.el.innerHTML='<div class=\"pace-progress\">\\n  <div class=\"pace-progress-inner\"></div>\\n</div>\\n<div class=\"pace-activity\"></div>',null!=a.firstChild?a.insertBefore(this.el,a.firstChild):a.appendChild(this.el)}return this.el},a.prototype.finish=function(){var a;return a=this.getElement(),a.className=a.className.replace(\"pace-active\",\"\"),a.className+=\" pace-inactive\",document.body.className=document.body.className.replace(\"pace-running\",\"\"),document.body.className+=\" pace-done\"},a.prototype.update=function(a){return this.progress=a,this.render()},a.prototype.destroy=function(){try{this.getElement().parentNode.removeChild(this.getElement())}catch(a){i=a}return this.el=void 0},a.prototype.render=function(){var a,b,c,d,e,f,g;if(null==document.querySelector(D.target))return!1;for(a=this.getElement(),d=\"translate3d(\"+this.progress+\"%, 0, 0)\",g=[\"webkitTransform\",\"msTransform\",\"transform\"],e=0,f=g.length;f>e;e++)b=g[e],a.children[0].style[b]=d;return(!this.lastRenderedProgress||this.lastRenderedProgress|0!==this.progress|0)&&(a.children[0].setAttribute(\"data-progress-text\",\"\"+(0|this.progress)+\"%\"),this.progress>=100?c=\"99\":(c=this.progress<10?\"0\":\"\",c+=0|this.progress),a.children[0].setattribute(\"data-progress\",\"\"+c)),this.lastrenderedprogress=this.progress},a.prototype.done=function(){return this.progress>=100},a}(),h=function(){function a(){this.bindings={}}return a.prototype.trigger=function(a,b){var c,d,e,f,g;if(null!=this.bindings[a]){for(f=this.bindings[a],g=[],d=0,e=f.length;e>d;d++)c=f[d],g.push(c.call(this,b));return g}},a.prototype.on=function(a,b){var c;return null==(c=this.bindings)[a]&&(c[a]=[]),this.bindings[a].push(b)},a}(),P=window.XMLHttpRequest,O=window.XDomainRequest,N=window.WebSocket,w=function(a,b){var c,d,e;e=[];for(d in b.prototype)try{e.push(null==a[d]&&\"function\"!=typeof b[d]?\"function\"==typeof Object.defineProperty?Object.defineProperty(a,d,{get:function(){return b.prototype[d]},configurable:!0,enumerable:!0}):a[d]=b.prototype[d]:void 0)}catch(f){c=f}return e},A=[],j.ignore=function(){var a,b,c;return b=arguments[0],a=2<=arguments.length?x.call(arguments,1):[],a.unshift(\"ignore\"),c=b.apply(null,a),a.shift(),c},j.track=function(){var a,b,c;return b=\"arguments[0],a=2<=arguments.length?X.call(arguments,1):[],A.unshift(\" track\"),c=\"b.apply(null,a),A.shift(),c},J=function(a){var\"\" b;if(null=\"=a&&(a=\" get\"),\"track\"=\"==A[0])return\"force\";if(!A.length&&D.ajax){if(\"socket\"===a&&D.ajax.trackWebSockets)return!0;if(b=a.toUpperCase(),$.call(D.ajax.trackMethods,b)\"\">=0)return!0}return!1},k=function(a){function b(){var a,c=this;b.__super__.constructor.apply(this,arguments),a=function(a){var b;return b=a.open,a.open=function(d,e){return J(d)&&c.trigger(\"request\",{type:d,url:e,request:a}),b.apply(a,arguments)}},window.XMLHttpRequest=function(b){var c;return c=new P(b),a(c),c};try{w(window.XMLHttpRequest,P)}catch(d){}if(null!=O){window.XDomainRequest=function(){var b;return b=new O,a(b),b};try{w(window.XDomainRequest,O)}catch(d){}}if(null!=N&&D.ajax.trackWebSockets){window.WebSocket=function(a,b){var d;return d=null!=b?new N(a,b):new N(a),J(\"socket\")&&c.trigger(\"request\",{type:\"socket\",url:a,protocols:b,request:d}),d};try{w(window.WebSocket,N)}catch(d){}}}return Z(b,a),b}(h),R=null,y=function(){return null==R&&(R=new k),R},I=function(a){var b,c,d,e;for(e=D.ajax.ignoreURLs,c=0,d=e.length;d>c;c++)if(b=e[c],\"string\"==typeof b){if(-1!==a.indexOf(b))return!0}else if(b.test(a))return!0;return!1},y().on(\"request\",function(b){var c,d,e,f,g;return f=b.type,e=b.request,g=b.url,I(g)?void 0:j.running||D.restartOnRequestAfter===!1&&\"force\"!==J(f)?void 0:(d=arguments,c=D.restartOnRequestAfter||0,\"boolean\"==typeof c&&(c=0),setTimeout(function(){var b,c,g,h,i,k;if(b=\"socket\"===f?e.readyState<2:0<(h=e.readystate)&&4>h){for(j.restart(),i=j.sources,k=[],c=0,g=i.length;g>c;c++){if(K=i[c],K instanceof a){K.watch.apply(K,d);break}k.push(void 0)}return k}},c))}),a=function(){function a(){var a=this;this.elements=[],y().on(\"request\",function(){return a.watch.apply(a,arguments)})}return a.prototype.watch=function(a){var b,c,d,e;return d=a.type,b=a.request,e=a.url,I(e)?void 0:(c=\"socket\"===d?new n(b):new o(b),this.elements.push(c))},a}(),o=function(){function a(a){var b,c,d,e,f,g,h=this;if(this.progress=0,null!=window.ProgressEvent)for(c=null,a.addEventListener(\"progress\",function(a){return h.progress=a.lengthComputable?100*a.loaded/a.total:h.progress+(100-h.progress)/2},!1),g=[\"load\",\"abort\",\"timeout\",\"error\"],d=0,e=g.length;e>d;d++)b=g[d],a.addEventListener(b,function(){return h.progress=100},!1);else f=a.onreadystatechange,a.onreadystatechange=function(){var b;return 0===(b=a.readyState)||4===b?h.progress=100:3===a.readyState&&(h.progress=50),\"function\"==typeof f?f.apply(null,arguments):void 0}}return a}(),n=function(){function a(a){var b,c,d,e,f=this;for(this.progress=0,e=[\"error\",\"open\"],c=0,d=e.length;d>c;c++)b=e[c],a.addEventListener(b,function(){return f.progress=100},!1)}return a}(),d=function(){function a(a){var b,c,d,f;for(null==a&&(a={}),this.elements=[],null==a.selectors&&(a.selectors=[]),f=a.selectors,c=0,d=f.length;d>c;c++)b=f[c],this.elements.push(new e(b))}return a}(),e=function(){function a(a){this.selector=a,this.progress=0,this.check()}return a.prototype.check=function(){var a=this;return document.querySelector(this.selector)?this.done():setTimeout(function(){return a.check()},D.elements.checkInterval)},a.prototype.done=function(){return this.progress=100},a}(),c=function(){function a(){var a,b,c=this;this.progress=null!=(b=this.states[document.readyState])?b:100,a=document.onreadystatechange,document.onreadystatechange=function(){return null!=c.states[document.readyState]&&(c.progress=c.states[document.readyState]),\"function\"==typeof a?a.apply(null,arguments):void 0}}return a.prototype.states={loading:0,interactive:50,complete:100},a}(),f=function(){function a(){var a,b,c,d,e,f=this;this.progress=0,a=0,e=[],d=0,c=C(),b=setInterval(function(){var g;return g=C()-c-50,c=C(),e.push(g),e.length>D.eventLag.sampleCount&&e.shift(),a=q(e),++d>=D.eventLag.minSamples&&a<d.eventlag.lagthreshold?(f.progress=100,clearinterval(b)):f.progress=100*(3 (a+3))},50)}return a}(),m=\"function(){function\" a(a){this.source=\"a,this.last=this.sinceLastUpdate=0,this.rate=D.initialRate,this.catchup=0,this.progress=this.lastProgress=0,null!=this.source&&(this.progress=F(this.source,\" progress\"))}return\" a.prototype.tick=\"function(a,b){var\" c;return null=\"=b&&(b=F(this.source,\" progress\")),b\">=100&&(this.done=!0),b===this.last?this.sinceLastUpdate+=a:(this.sinceLastUpdate&&(this.rate=(b-this.last)/this.sinceLastUpdate),this.catchup=(b-this.progress)/D.catchupTime,this.sinceLastUpdate=0,this.last=b),b>this.progress&&(this.progress+=this.catchup*a),c=1-Math.pow(this.progress/100,D.easeFactor),this.progress+=c*this.rate*a,this.progress=Math.min(this.lastProgress+D.maxProgressPerFrame,this.progress),this.progress=Math.max(0,this.progress),this.progress=Math.min(100,this.progress),this.lastProgress=this.progress,this.progress},a}(),L=null,H=null,r=null,M=null,p=null,s=null,j.running=!1,z=function(){return D.restartOnPushState?j.restart():void 0},null!=window.history.pushState&&(T=window.history.pushState,window.history.pushState=function(){return z(),T.apply(window.history,arguments)}),null!=window.history.replaceState&&(W=window.history.replaceState,window.history.replaceState=function(){return z(),W.apply(window.history,arguments)}),l={ajax:a,elements:d,document:c,eventLag:f},(B=function(){var a,c,d,e,f,g,h,i;for(j.sources=L=[],g=[\"ajax\",\"elements\",\"document\",\"eventLag\"],c=0,e=g.length;e>c;c++)a=g[c],D[a]!==!1&&L.push(new l[a](D[a]));for(i=null!=(h=D.extraSources)?h:[],d=0,f=i.length;f>d;d++)K=i[d],L.push(new K(D));return j.bar=r=new b,H=[],M=new m})(),j.stop=function(){return j.trigger(\"stop\"),j.running=!1,r.destroy(),s=!0,null!=p&&(\"function\"==typeof t&&t(p),p=null),B()},j.restart=function(){return j.trigger(\"restart\"),j.stop(),j.start()},j.go=function(){var a;return j.running=!0,r.render(),a=C(),s=!1,p=G(function(b,c){var d,e,f,g,h,i,k,l,n,o,p,q,t,u,v,w;for(l=100-r.progress,e=p=0,f=!0,i=q=0,u=L.length;u>q;i=++q)for(K=L[i],o=null!=H[i]?H[i]:H[i]=[],h=null!=(w=K.elements)?w:[K],k=t=0,v=h.length;v>t;k=++t)g=h[k],n=null!=o[k]?o[k]:o[k]=new m(g),f&=n.done,n.done||(e++,p+=n.tick(b));return d=p/e,r.update(M.tick(b,d)),r.done()||f||s?(r.update(100),j.trigger(\"done\"),setTimeout(function(){return r.finish(),j.running=!1,j.trigger(\"hide\")},Math.max(D.ghostTime,Math.max(D.minTime-(C()-a),0)))):c()})},j.start=function(a){v(D,a),j.running=!0;try{r.render()}catch(b){i=b}return document.querySelector(\".pace\")?(j.trigger(\"start\"),j.go()):setTimeout(j.start,50)},\"function\"==typeof define&&define.amd?define([\"pace\"],function(){return j}):\"object\"==typeof exports?module.exports=j:D.startOnPageLoad&&j.start()}).call(this);</d.eventlag.lagthreshold?(f.progress=100,clearinterval(b)):f.progress=100*(3></2:0<(h=e.readystate)&&4></=arguments.length?x.call(arguments,1):[],a.unshift(\"ignore\"),c=b.apply(null,a),a.shift(),c},j.track=function(){var></10?\"0\":\"\",c+=0|this.progress),a.children[0].setattribute(\"data-progress\",\"\"+c)),this.lastrenderedprogress=this.progress},a.prototype.done=function(){return></this.bindings[a].length;)e.push(this.bindings[a][c].handler===b?this.bindings[a].splice(c,1):c++);return></=arguments.length?x.call(arguments,2):[],\"function\"==typeof>"}],"Post":[{"title":"Binary Indexed Tree","mathjax":true,"date":"2016-07-02T06:13:00.000Z","_content":"給予一個陣列arr，在有以下兩個請求時，可以透過binary indexed tree 加速運算速度\n\n1. (Update) add x to arr[index]\n2. (Sum) find the sum from arr[L] to arr[R]\n\n---\n\n{% math %}index=1...N{% endmath %} <br>\n{% math %}f[i]= {% endmath %} **frequency of each index **<br>\n{% math %}c[i]= {% endmath %} **cummulation from index 1 to index i**<br>\n{% math %}tree[i]={% endmath %} 在tree各自負責區段的總和 \n\nusually we will set index 0 as dummy, f[0]=0, c[0] =0\n\n{% codeblock line_number:false %}\nnum  1  2  3  4  5  6   7   8  9  10  11  12  13  14  15  16\n\nf    1  0  2  1  1  3   0   4  2   5   2   2   3   1  0    2\n\nc    1  1  3  4  5  8   8  12 14  19  21  23  26  27  27  29\n\ntree 1  1  2  4  1  4   0  12  2   7   2  11   3   4   0  29\n\n{% endcodeblock %}\n\n<!--more-->\n\n<p align=\"center\">\n<img src=\"/Binary Indexed Tree/9385E82DD2EEB5AB2AB9C2BABDD9CDA5.gif\">\n</p>\nBIT (according to the graph above)\n<p align=\"center\">\n<img src=\"/Binary Indexed Tree/17D73226B1C6E38DC57F3305CB3A4FE3.jpg\" width=\"400\" height=\"400\" />\n</p>\n\n---\n\n在BIT當中，每一個Node都存放著自己負責“區段”的總和。\n\n將index轉換成binary representation後，透過binary number有幾個1，來尋找從{% math %}1 \\Rightarrow index{% endmath %}的總和\n\n若某一個Node的index = idx， 則其存放的總和 {% math %}= idx - 2^r +1 \\Rightarrow idx {% endmath %} ( r是該idx從左而右最後一個1的位置）\n\ne.g. 譬如idx = 13;\n\n13 = 01101， 最後一個1的位置是0th（由右而作從零開始，所以Node 13負責的總和為 {% math %}index = 13-2^0+1 = 13 \\Rightarrow 13 {% endmath %}，負責自己的Node)\n\n(if idx = 12, 其負責的總和為{% math %} index = 12-2^2+1 = 9 \\Rightarrow 12{% endmath %})\n\n換句話說，就是 `(自己的left subtree + 自己的frequency)`\n\n若要求得c[13] = c[01101] = tree[01101] + tree[01100] + tree[01000]\n\n由此可知，皆是從Node移動到Root\n\n* BIT的主要概念即是給一個index 轉換成binary後，若要得知從1至該index的總和，就是把binary index 從右至左每次把最右邊的1砍掉後（刪去最低為的1)，全部的總和。\n* 如此作法可以比通常各Node是從1......index全部加起來還要快，因為此方法是看binary index 中有多少個1，就加多少個Node即可，不需要從頭到尾累加。\n* 只可以更新數值，不能插入新的節點\n\n---\n\n### 如何得到最低位的1(Rightmost Set bit) ? \n\n`index & -index`\n\nProof:\n\nif index = A(anything)1B(all zero) = (...101110101) 1 (000000000….)\n\n-index = **(A1B)¯ + 1 ****(to get the negative binary number of a specific index, take complement and add 1) num****¯ = complement of num**\n\n** = A¯0B¯ + 1 (since B = (1111111…), if we add 1, then B = (000000), and 0 becomes 1)**\n\n** = ****A¯1B **\n\n---\n\n### Sum:\n\ngiven an index, go from node to root to find the summation \n\n從BIT 樹圖分析，\n\n從Node開始，若是這個Node是parent 的left tree, 則不需要將sum+=tree[index]\n\n若是這個Node是parent 的right tree, 則需要將sum+=tree[index]\n\n```c\nint getSum(const vector<int> &BIT, int index){\n    int sum = 0;\n    while(index>0){\n        sum += BIT[index];\n        index -= (index & -index);    //刪去最低位的1\n    }\n    return sum;\n}\n```\n\n---\n\n### Update:\n\n跟Sum類似，更新有負責(包含)到該index的Node\n\n換句話說，若是該Node是parent’s left child的話，則需要更新parent\n\n若是該Node是parent’s right child的話，則不需要更新parent\n\n```c\nint update(vector<int> BIT, int index, int addition){\n    while(index < BIT.size()){      //index < size of the tree\n        BIT[index] += addition;\n        index += (index & -index);  //將最低位的1加1，就可以找到parent\n    }\n}\n```\n\n---\n\n### Get single node frequency \n\n最直覺的方式就是 f[index] = c[index] - c[index-1]，意思就是跑兩次Sum;\n\n但如何可以只跑一次就好？\n\nc[index] 和 c[index-1] 一定有相同的\n\nif index = x = A1B**¯** , then y = index - 1 = A0B\n\n從這邊可以看出 \n\n c[x] = c[A0**B¯**] + tree[A1B**¯**] ,\n\n c[y] = c[A0**B¯**] + tree[A0(111...111)] + tree[A0(111..110] + tree[A0(111..100] + ………\n\n=\\> c[x] - c[y] = tree[A1B**¯**] - { tree[A0(111...111)] + tree[A0(111..110] + tree[A0(111..100] + ………}\n\n所以當y開始一直刪去最低位的1後，最後 y 會變成A0B¯(common predecessor ) ，也就是停止的時候。\n\n＊換句話說，將x負責的區段一直刪去只剩下f[x]而已\n\n```c\nint getFrequency(vector<int> BIT, int index){   //index!=0\n    int sum = BIT[index];        //set sum = tree[index]\n    int common_pre = index - (index & -index);    //find common predecessor\n    index--;        //index is not important anymore, we could use it as our variable\n    while(index != common_pre){     //after deleting the rightmost set bit, it will become common_pre\n        sum -= BIT[index];\n        index -= (index & -index);\n    }\n    return sum;\n}\n```\n\n---\n\n```c\n#include <iostream>\n#include <vector>\n#include <iomanip>\nusing namespace std;\n\nint getSum(const vector<int> &BIT, int index){\n    int sum = 0;\n    while(index>0){\n        sum += BIT[index];\n        index -= (index & -index);    //刪去最低位的1\n    }\n    return sum;\n}\n\nvoid update(vector<int> &BIT, int index, int addition){\n    while(index < BIT.size()){      //index < size of the tree\n        BIT[index] += addition;\n        index += (index & -index);  //將最低位的1加1，就可以找到parent\n    }\n}\n\nint getFrequency(vector<int> BIT, int index){   //index!=0\n    int sum = BIT[index];        //set sum = tree[index]\n    int common_pre = index - (index & -index);    //find common predecessor\n    index--;        //index is not important anymore, we could use it as our variable\n    while(index != common_pre){     //after deleting the rightmost set bit, it will become common_pre\n        sum -= BIT[index];\n        index -= (index & -index);\n    }\n    return sum;\n}\n\nvoid printTree(const vector<int> &BIT){\n    cout<<\"i    \";\n    for(int i=1; i<BIT.size(); i++) cout<<setw(3)<<i;\n    cout<<endl;\n\n    cout<<\"F    \";\n    for(int k=1; k<BIT.size(); k++)\n        cout<<setw(3)<<getFrequency(BIT, k);\n    cout<<endl;\n\n    cout<<\"C    \";\n    for(int t=1; t<BIT.size(); t++)\n        cout<<setw(3)<<getSum(BIT, t);\n    cout<<endl;\n    \n    cout<<\"Tree \";\n    for(int p=1; p<BIT.size(); p++)\n        cout<<setw(3)<<BIT[p];\n    cout<<endl;\n}\n\nvector<int> constructBIT(int arr[], int N)\n{\n    vector<int> BIT(N+1);\n    for(int i=0; i<=N; i++) BIT[i] = 0;  //initialize tree\n\n    for(int j=0; j<N; j++)\n        update(BIT, j+1, arr[j]);\n\n    return BIT;\n}\n\nint main(int argc, char const *argv[])\n{\n    int N = 16;   //length of frequecy array\n    int freq_arr[] =  { 1, 0, 2, 1, 1, 3, 0, 4, 2, 5, 2, 2, 3, 1, 0, 2};  //given data\n    vector<int> BITree = constructBIT(freq_arr, N);\n\n    /* use to demontrate */\n    printTree(BITree);\n    return 0;\n}\n```\n\n\n### [Hackerrank: Similar Pair](https://www.hackerrank.com/challenges/similarpair/problem)\n\nA pair of nodes, ***(a,b)***, is a *similar pair* if both of the following conditions are true:\n\n1. Node ***a*** is the ancestor of node ***b***\n2. {% math %}abs(a-b) \\leqslant k {% endmath %}\n\nGiven a tree where each node is labeled from ***1*** to ***n*** , find the number of similar pairs in the tree.\n\nFor example, given the following tree:\n\n<p align=\"center\">\n<img src=\"/Binary Indexed Tree/similarpairsExample.png\" width=\"200\" height=\"250\" />\n</p>\n\n\nWe have the following pairs of ancestors and dependents:\n\n```\nPair      abs(a-b)\n1,2         1\n1,3         2\n1,4         3\n1,5         4\n1,6         5\n3,4         1\n3,5         2\n3,6         3\n```\n\n\nIf ***k=3*** for example, we have **6** pairs that are similar, where {% math %}abs(a,b) \\leqslant k{% endmath %}.\n\n\n**Function Description**\n\nComplete the similarPair function in the editor below. It should return an integer that represents the number of pairs meeting the criteria.\n\nsimilarPair has the following parameter(s):\n\n- n: an integer that represents the number of nodes\n- k: an integer\n- edges: a two dimensional array where each element consists of two integers that represent connected node numbers\n\n\n**Input Format**\n\nThe first line contains two space-separated integers **n** and  **k** , the number of nodes and the similarity threshold. \nEach of the next **n-1** lines contains two space-separated integers defining an edge connecting nodes  **p[i]**  and **c[i]**, where node **p[i]** is the parent to node **c[i]**.\n\n**Constraints**\n\n- {% math %}1 \\leqslant n \\leqslant 10^5{% endmath %} \n- {% math %}0 \\leqslant k \\leqslant n{% endmath %} \n- {% math %}1 \\leqslant p[i], c[i] \\leqslant n{% endmath %} \n\n\n**Output Format**\n\nPrint a single integer denoting the number of similar pairs in the tree.\n\n**Sample Input**\n\n<pre>\n5 2\n3 2\n3 1\n1 4\n1 5\n</pre>\n\n**Sample Output**\n\n<pre>\n4\n</pre>\n\n**Explanation**\n\nThe similar pairs are **(3,2)**, **(3,1)**, **(3,4)**, and **(3,5)**, so we print **4** as our answer. Observe that **(1,4)** and **(1,5)** are *not* similar pairs because they do not satisfy {% math %}abs(a,b) \\leqslant k{% endmath %} for {% math %}k=2{% endmath %}.\n\n<p align=\"center\">\n<img src=\"/Binary Indexed Tree/BA897C1126BE8DC856F1F1EE1090A016.png\" width=\"250\" height=\"300\" />\n</p>\n\n\n**Solution**\n\n1. 先建構好題目要的樹（不是BIT)。\n2. BIT的用途是，透過存放parent index至BIT，使其Child在尋找他所需要的範圍時(child+k, child-k)，可以透過Sum，統計在這個範圍裡parent 的 total\n3. 每次訪問一個Node的時候，先問BIT該Node index的 index+k and index-K這個範圍當中，有多少，然後將加到similar pair\n4. 接著就將Node 的index 更新(該index於BIT +1)\n5. 然後再用Recursive 跑這個Node的Child\n6. 跑完全部該Node的child後，又更新一次Node index (-1)\n7. 所以由此可以確保每次訪問BIT時，BIT裡面的各Index一定是該Node的ancestor\n8. 如此可以不需要一個一個和parent比對，因為若有M個ancestor，則只需要花Olog(M)的時間來找到該Node的similiar pair，而非O(M)\n\n\n```cpp\n#include <iostream>\n#include <vector>\nusing namespace std;\n\n//bt : bit array\n//i and j are starting and ending index INCLUSIVE\nlong long bit_q(long long * bt,int i,int j)\n{\n\t//尋找範圍裡的總數\n    long long sum=0ll;\n    while(j>0)\n    {\n        sum+=bt[j];\n        j -= (j & (j*-1));\n    }\n    i--;\n    while(i>0)\n    {\n        sum-=bt[i];\n        i -= (i & (i*-1));\n    }\n    return sum;\n}\n//bt : binary indexed tree\n//n : size of bit array\n//i is the index to be updated\nvoid bit_up(long long * bt,int n,int i,long long diff)\n{\n    while(i<=n)\n    {\n        bt[i] += diff;\n        i += (i & (i*-1));\n    }\n}\n\nint n,k;\nvector<int> al[100005]; //adjacency list\nlong long similar_pair;\nlong long bit[100005];     //binary indexed tree\n\nvoid dfs(int node)\n{\n    similar_pair += bit_q(bit,max(1,node-k),min(n,node+k));\n    bit_up(bit,n,node,1);       //將該index在binary indexed tree 的值+1，換句話說就是將index push to bit\n    for(int i=0; i<al[node].size();i++)\n    \tdfs(al[node][i]);\n\tbit_up(bit,n,node,-1);\n}\nint main() {\n    int x,y;\n    cin>>n>>k;\n    similar_pair=0;   //answer\n    for(int i=0;i<=n;i++)   //initialize binary indexed tree\n        bit[i]=0ll;\n\n    int r ;\n    for(int i=0;i<n-1;i++)\n    {\n        cin>>x>>y;\n        if(i==0) r=x;      //the first one is root\n        al[x].push_back(y);   \n    }\n    dfs(r);\n    cout<<similar_pair<<endl;\n    return 0;\n}\n```","source":"_posts/Binary Indexed Tree.md","raw":"title: Binary Indexed Tree\ntags:\n  - Data Structures\n  - Hackerrank\ncategories:\n  - Algorithms\nmathjax: true\ndate: 2016-07-02 14:13:00\n---\n給予一個陣列arr，在有以下兩個請求時，可以透過binary indexed tree 加速運算速度\n\n1. (Update) add x to arr[index]\n2. (Sum) find the sum from arr[L] to arr[R]\n\n---\n\n{% math %}index=1...N{% endmath %} <br>\n{% math %}f[i]= {% endmath %} **frequency of each index **<br>\n{% math %}c[i]= {% endmath %} **cummulation from index 1 to index i**<br>\n{% math %}tree[i]={% endmath %} 在tree各自負責區段的總和 \n\nusually we will set index 0 as dummy, f[0]=0, c[0] =0\n\n{% codeblock line_number:false %}\nnum  1  2  3  4  5  6   7   8  9  10  11  12  13  14  15  16\n\nf    1  0  2  1  1  3   0   4  2   5   2   2   3   1  0    2\n\nc    1  1  3  4  5  8   8  12 14  19  21  23  26  27  27  29\n\ntree 1  1  2  4  1  4   0  12  2   7   2  11   3   4   0  29\n\n{% endcodeblock %}\n\n<!--more-->\n\n<p align=\"center\">\n<img src=\"/Binary Indexed Tree/9385E82DD2EEB5AB2AB9C2BABDD9CDA5.gif\">\n</p>\nBIT (according to the graph above)\n<p align=\"center\">\n<img src=\"/Binary Indexed Tree/17D73226B1C6E38DC57F3305CB3A4FE3.jpg\" width=\"400\" height=\"400\" />\n</p>\n\n---\n\n在BIT當中，每一個Node都存放著自己負責“區段”的總和。\n\n將index轉換成binary representation後，透過binary number有幾個1，來尋找從{% math %}1 \\Rightarrow index{% endmath %}的總和\n\n若某一個Node的index = idx， 則其存放的總和 {% math %}= idx - 2^r +1 \\Rightarrow idx {% endmath %} ( r是該idx從左而右最後一個1的位置）\n\ne.g. 譬如idx = 13;\n\n13 = 01101， 最後一個1的位置是0th（由右而作從零開始，所以Node 13負責的總和為 {% math %}index = 13-2^0+1 = 13 \\Rightarrow 13 {% endmath %}，負責自己的Node)\n\n(if idx = 12, 其負責的總和為{% math %} index = 12-2^2+1 = 9 \\Rightarrow 12{% endmath %})\n\n換句話說，就是 `(自己的left subtree + 自己的frequency)`\n\n若要求得c[13] = c[01101] = tree[01101] + tree[01100] + tree[01000]\n\n由此可知，皆是從Node移動到Root\n\n* BIT的主要概念即是給一個index 轉換成binary後，若要得知從1至該index的總和，就是把binary index 從右至左每次把最右邊的1砍掉後（刪去最低為的1)，全部的總和。\n* 如此作法可以比通常各Node是從1......index全部加起來還要快，因為此方法是看binary index 中有多少個1，就加多少個Node即可，不需要從頭到尾累加。\n* 只可以更新數值，不能插入新的節點\n\n---\n\n### 如何得到最低位的1(Rightmost Set bit) ? \n\n`index & -index`\n\nProof:\n\nif index = A(anything)1B(all zero) = (...101110101) 1 (000000000….)\n\n-index = **(A1B)¯ + 1 ****(to get the negative binary number of a specific index, take complement and add 1) num****¯ = complement of num**\n\n** = A¯0B¯ + 1 (since B = (1111111…), if we add 1, then B = (000000), and 0 becomes 1)**\n\n** = ****A¯1B **\n\n---\n\n### Sum:\n\ngiven an index, go from node to root to find the summation \n\n從BIT 樹圖分析，\n\n從Node開始，若是這個Node是parent 的left tree, 則不需要將sum+=tree[index]\n\n若是這個Node是parent 的right tree, 則需要將sum+=tree[index]\n\n```c\nint getSum(const vector<int> &BIT, int index){\n    int sum = 0;\n    while(index>0){\n        sum += BIT[index];\n        index -= (index & -index);    //刪去最低位的1\n    }\n    return sum;\n}\n```\n\n---\n\n### Update:\n\n跟Sum類似，更新有負責(包含)到該index的Node\n\n換句話說，若是該Node是parent’s left child的話，則需要更新parent\n\n若是該Node是parent’s right child的話，則不需要更新parent\n\n```c\nint update(vector<int> BIT, int index, int addition){\n    while(index < BIT.size()){      //index < size of the tree\n        BIT[index] += addition;\n        index += (index & -index);  //將最低位的1加1，就可以找到parent\n    }\n}\n```\n\n---\n\n### Get single node frequency \n\n最直覺的方式就是 f[index] = c[index] - c[index-1]，意思就是跑兩次Sum;\n\n但如何可以只跑一次就好？\n\nc[index] 和 c[index-1] 一定有相同的\n\nif index = x = A1B**¯** , then y = index - 1 = A0B\n\n從這邊可以看出 \n\n c[x] = c[A0**B¯**] + tree[A1B**¯**] ,\n\n c[y] = c[A0**B¯**] + tree[A0(111...111)] + tree[A0(111..110] + tree[A0(111..100] + ………\n\n=\\> c[x] - c[y] = tree[A1B**¯**] - { tree[A0(111...111)] + tree[A0(111..110] + tree[A0(111..100] + ………}\n\n所以當y開始一直刪去最低位的1後，最後 y 會變成A0B¯(common predecessor ) ，也就是停止的時候。\n\n＊換句話說，將x負責的區段一直刪去只剩下f[x]而已\n\n```c\nint getFrequency(vector<int> BIT, int index){   //index!=0\n    int sum = BIT[index];        //set sum = tree[index]\n    int common_pre = index - (index & -index);    //find common predecessor\n    index--;        //index is not important anymore, we could use it as our variable\n    while(index != common_pre){     //after deleting the rightmost set bit, it will become common_pre\n        sum -= BIT[index];\n        index -= (index & -index);\n    }\n    return sum;\n}\n```\n\n---\n\n```c\n#include <iostream>\n#include <vector>\n#include <iomanip>\nusing namespace std;\n\nint getSum(const vector<int> &BIT, int index){\n    int sum = 0;\n    while(index>0){\n        sum += BIT[index];\n        index -= (index & -index);    //刪去最低位的1\n    }\n    return sum;\n}\n\nvoid update(vector<int> &BIT, int index, int addition){\n    while(index < BIT.size()){      //index < size of the tree\n        BIT[index] += addition;\n        index += (index & -index);  //將最低位的1加1，就可以找到parent\n    }\n}\n\nint getFrequency(vector<int> BIT, int index){   //index!=0\n    int sum = BIT[index];        //set sum = tree[index]\n    int common_pre = index - (index & -index);    //find common predecessor\n    index--;        //index is not important anymore, we could use it as our variable\n    while(index != common_pre){     //after deleting the rightmost set bit, it will become common_pre\n        sum -= BIT[index];\n        index -= (index & -index);\n    }\n    return sum;\n}\n\nvoid printTree(const vector<int> &BIT){\n    cout<<\"i    \";\n    for(int i=1; i<BIT.size(); i++) cout<<setw(3)<<i;\n    cout<<endl;\n\n    cout<<\"F    \";\n    for(int k=1; k<BIT.size(); k++)\n        cout<<setw(3)<<getFrequency(BIT, k);\n    cout<<endl;\n\n    cout<<\"C    \";\n    for(int t=1; t<BIT.size(); t++)\n        cout<<setw(3)<<getSum(BIT, t);\n    cout<<endl;\n    \n    cout<<\"Tree \";\n    for(int p=1; p<BIT.size(); p++)\n        cout<<setw(3)<<BIT[p];\n    cout<<endl;\n}\n\nvector<int> constructBIT(int arr[], int N)\n{\n    vector<int> BIT(N+1);\n    for(int i=0; i<=N; i++) BIT[i] = 0;  //initialize tree\n\n    for(int j=0; j<N; j++)\n        update(BIT, j+1, arr[j]);\n\n    return BIT;\n}\n\nint main(int argc, char const *argv[])\n{\n    int N = 16;   //length of frequecy array\n    int freq_arr[] =  { 1, 0, 2, 1, 1, 3, 0, 4, 2, 5, 2, 2, 3, 1, 0, 2};  //given data\n    vector<int> BITree = constructBIT(freq_arr, N);\n\n    /* use to demontrate */\n    printTree(BITree);\n    return 0;\n}\n```\n\n\n### [Hackerrank: Similar Pair](https://www.hackerrank.com/challenges/similarpair/problem)\n\nA pair of nodes, ***(a,b)***, is a *similar pair* if both of the following conditions are true:\n\n1. Node ***a*** is the ancestor of node ***b***\n2. {% math %}abs(a-b) \\leqslant k {% endmath %}\n\nGiven a tree where each node is labeled from ***1*** to ***n*** , find the number of similar pairs in the tree.\n\nFor example, given the following tree:\n\n<p align=\"center\">\n<img src=\"/Binary Indexed Tree/similarpairsExample.png\" width=\"200\" height=\"250\" />\n</p>\n\n\nWe have the following pairs of ancestors and dependents:\n\n```\nPair      abs(a-b)\n1,2         1\n1,3         2\n1,4         3\n1,5         4\n1,6         5\n3,4         1\n3,5         2\n3,6         3\n```\n\n\nIf ***k=3*** for example, we have **6** pairs that are similar, where {% math %}abs(a,b) \\leqslant k{% endmath %}.\n\n\n**Function Description**\n\nComplete the similarPair function in the editor below. It should return an integer that represents the number of pairs meeting the criteria.\n\nsimilarPair has the following parameter(s):\n\n- n: an integer that represents the number of nodes\n- k: an integer\n- edges: a two dimensional array where each element consists of two integers that represent connected node numbers\n\n\n**Input Format**\n\nThe first line contains two space-separated integers **n** and  **k** , the number of nodes and the similarity threshold. \nEach of the next **n-1** lines contains two space-separated integers defining an edge connecting nodes  **p[i]**  and **c[i]**, where node **p[i]** is the parent to node **c[i]**.\n\n**Constraints**\n\n- {% math %}1 \\leqslant n \\leqslant 10^5{% endmath %} \n- {% math %}0 \\leqslant k \\leqslant n{% endmath %} \n- {% math %}1 \\leqslant p[i], c[i] \\leqslant n{% endmath %} \n\n\n**Output Format**\n\nPrint a single integer denoting the number of similar pairs in the tree.\n\n**Sample Input**\n\n<pre>\n5 2\n3 2\n3 1\n1 4\n1 5\n</pre>\n\n**Sample Output**\n\n<pre>\n4\n</pre>\n\n**Explanation**\n\nThe similar pairs are **(3,2)**, **(3,1)**, **(3,4)**, and **(3,5)**, so we print **4** as our answer. Observe that **(1,4)** and **(1,5)** are *not* similar pairs because they do not satisfy {% math %}abs(a,b) \\leqslant k{% endmath %} for {% math %}k=2{% endmath %}.\n\n<p align=\"center\">\n<img src=\"/Binary Indexed Tree/BA897C1126BE8DC856F1F1EE1090A016.png\" width=\"250\" height=\"300\" />\n</p>\n\n\n**Solution**\n\n1. 先建構好題目要的樹（不是BIT)。\n2. BIT的用途是，透過存放parent index至BIT，使其Child在尋找他所需要的範圍時(child+k, child-k)，可以透過Sum，統計在這個範圍裡parent 的 total\n3. 每次訪問一個Node的時候，先問BIT該Node index的 index+k and index-K這個範圍當中，有多少，然後將加到similar pair\n4. 接著就將Node 的index 更新(該index於BIT +1)\n5. 然後再用Recursive 跑這個Node的Child\n6. 跑完全部該Node的child後，又更新一次Node index (-1)\n7. 所以由此可以確保每次訪問BIT時，BIT裡面的各Index一定是該Node的ancestor\n8. 如此可以不需要一個一個和parent比對，因為若有M個ancestor，則只需要花Olog(M)的時間來找到該Node的similiar pair，而非O(M)\n\n\n```cpp\n#include <iostream>\n#include <vector>\nusing namespace std;\n\n//bt : bit array\n//i and j are starting and ending index INCLUSIVE\nlong long bit_q(long long * bt,int i,int j)\n{\n\t//尋找範圍裡的總數\n    long long sum=0ll;\n    while(j>0)\n    {\n        sum+=bt[j];\n        j -= (j & (j*-1));\n    }\n    i--;\n    while(i>0)\n    {\n        sum-=bt[i];\n        i -= (i & (i*-1));\n    }\n    return sum;\n}\n//bt : binary indexed tree\n//n : size of bit array\n//i is the index to be updated\nvoid bit_up(long long * bt,int n,int i,long long diff)\n{\n    while(i<=n)\n    {\n        bt[i] += diff;\n        i += (i & (i*-1));\n    }\n}\n\nint n,k;\nvector<int> al[100005]; //adjacency list\nlong long similar_pair;\nlong long bit[100005];     //binary indexed tree\n\nvoid dfs(int node)\n{\n    similar_pair += bit_q(bit,max(1,node-k),min(n,node+k));\n    bit_up(bit,n,node,1);       //將該index在binary indexed tree 的值+1，換句話說就是將index push to bit\n    for(int i=0; i<al[node].size();i++)\n    \tdfs(al[node][i]);\n\tbit_up(bit,n,node,-1);\n}\nint main() {\n    int x,y;\n    cin>>n>>k;\n    similar_pair=0;   //answer\n    for(int i=0;i<=n;i++)   //initialize binary indexed tree\n        bit[i]=0ll;\n\n    int r ;\n    for(int i=0;i<n-1;i++)\n    {\n        cin>>x>>y;\n        if(i==0) r=x;      //the first one is root\n        al[x].push_back(y);   \n    }\n    dfs(r);\n    cout<<similar_pair<<endl;\n    return 0;\n}\n```","slug":"Binary Indexed Tree","published":1,"updated":"2019-06-21T06:36:40.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxijp4zd0000dvw9vwe9qlnq","content":"<p>給予一個陣列arr，在有以下兩個請求時，可以透過binary indexed tree 加速運算速度</p>\n<ol>\n<li>(Update) add x to arr[index]</li>\n<li>(Sum) find the sum from arr[L] to arr[R]</li>\n</ol>\n<hr>\n<span>$index=1...N$</span><!-- Has MathJax --> <br>\n<span>$f[i]=$</span><!-- Has MathJax --> **frequency of each index **<br>\n<span>$c[i]=$</span><!-- Has MathJax --> **cummulation from index 1 to index i**<br>\n<span>$tree[i]=$</span><!-- Has MathJax --> 在tree各自負責區段的總和 \n\n<p>usually we will set index 0 as dummy, f[0]=0, c[0] =0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">num  1  2  3  4  5  6   7   8  9  10  11  12  13  14  15  16</span><br><span class=\"line\"></span><br><span class=\"line\">f    1  0  2  1  1  3   0   4  2   5   2   2   3   1  0    2</span><br><span class=\"line\"></span><br><span class=\"line\">c    1  1  3  4  5  8   8  12 14  19  21  23  26  27  27  29</span><br><span class=\"line\"></span><br><span class=\"line\">tree 1  1  2  4  1  4   0  12  2   7   2  11   3   4   0  29</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p align=\"center\">\n<img src=\"/Binary Indexed Tree/9385E82DD2EEB5AB2AB9C2BABDD9CDA5.gif\">\n</p>\nBIT (according to the graph above)\n<p align=\"center\">\n<img src=\"/Binary Indexed Tree/17D73226B1C6E38DC57F3305CB3A4FE3.jpg\" width=\"400\" height=\"400\">\n</p>\n\n<hr>\n<p>在BIT當中，每一個Node都存放著自己負責“區段”的總和。</p>\n<p>將index轉換成binary representation後，透過binary number有幾個1，來尋找從<span>$1 \\Rightarrow index$</span><!-- Has MathJax -->的總和</p>\n<p>若某一個Node的index = idx， 則其存放的總和 <span>$= idx - 2^r +1 \\Rightarrow idx$</span><!-- Has MathJax --> ( r是該idx從左而右最後一個1的位置）</p>\n<p>e.g. 譬如idx = 13;</p>\n<p>13 = 01101， 最後一個1的位置是0th（由右而作從零開始，所以Node 13負責的總和為 <span>$index = 13-2^0+1 = 13 \\Rightarrow 13$</span><!-- Has MathJax -->，負責自己的Node)</p>\n<p>(if idx = 12, 其負責的總和為<span>$index = 12-2^2+1 = 9 \\Rightarrow 12$</span><!-- Has MathJax -->)</p>\n<p>換句話說，就是 <code>(自己的left subtree + 自己的frequency)</code></p>\n<p>若要求得c[13] = c[01101] = tree[01101] + tree[01100] + tree[01000]</p>\n<p>由此可知，皆是從Node移動到Root</p>\n<ul>\n<li>BIT的主要概念即是給一個index 轉換成binary後，若要得知從1至該index的總和，就是把binary index 從右至左每次把最右邊的1砍掉後（刪去最低為的1)，全部的總和。</li>\n<li>如此作法可以比通常各Node是從1……index全部加起來還要快，因為此方法是看binary index 中有多少個1，就加多少個Node即可，不需要從頭到尾累加。</li>\n<li>只可以更新數值，不能插入新的節點</li>\n</ul>\n<hr>\n<h3 id=\"如何得到最低位的1-Rightmost-Set-bit\"><a href=\"#如何得到最低位的1-Rightmost-Set-bit\" class=\"headerlink\" title=\"如何得到最低位的1(Rightmost Set bit) ?\"></a>如何得到最低位的1(Rightmost Set bit) ?</h3><p><code>index &amp; -index</code></p>\n<p>Proof:</p>\n<p>if index = A(anything)1B(all zero) = (…101110101) 1 (000000000….)</p>\n<p>-index = <strong>(A1B)¯ + 1 **</strong>(to get the negative binary number of a specific index, take complement and add 1) num<strong>**¯ = complement of num</strong></p>\n<p>** = A¯0B¯ + 1 (since B = (1111111…), if we add 1, then B = (000000), and 0 becomes 1)**</p>\n<p>** = ***<em>A¯1B *</em></p>\n<hr>\n<h3 id=\"Sum\"><a href=\"#Sum\" class=\"headerlink\" title=\"Sum:\"></a>Sum:</h3><p>given an index, go from node to root to find the summation </p>\n<p>從BIT 樹圖分析，</p>\n<p>從Node開始，若是這個Node是parent 的left tree, 則不需要將sum+=tree[index]</p>\n<p>若是這個Node是parent 的right tree, 則需要將sum+=tree[index]</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getSum</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;BIT, <span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        sum += BIT[index];</span><br><span class=\"line\">        index -= (index &amp; -index);    <span class=\"comment\">//刪去最低位的1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update:\"></a>Update:</h3><p>跟Sum類似，更新有負責(包含)到該index的Node</p>\n<p>換句話說，若是該Node是parent’s left child的話，則需要更新parent</p>\n<p>若是該Node是parent’s right child的話，則不需要更新parent</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; BIT, <span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> addition)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index &lt; BIT.size())&#123;      <span class=\"comment\">//index &lt; size of the tree</span></span><br><span class=\"line\">        BIT[index] += addition;</span><br><span class=\"line\">        index += (index &amp; -index);  <span class=\"comment\">//將最低位的1加1，就可以找到parent</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"Get-single-node-frequency\"><a href=\"#Get-single-node-frequency\" class=\"headerlink\" title=\"Get single node frequency\"></a>Get single node frequency</h3><p>最直覺的方式就是 f[index] = c[index] - c[index-1]，意思就是跑兩次Sum;</p>\n<p>但如何可以只跑一次就好？</p>\n<p>c[index] 和 c[index-1] 一定有相同的</p>\n<p>if index = x = A1B<strong>¯</strong> , then y = index - 1 = A0B</p>\n<p>從這邊可以看出 </p>\n<p> c[x] = c[A0<strong>B¯</strong>] + tree[A1B<strong>¯</strong>] ,</p>\n<p> c[y] = c[A0<strong>B¯</strong>] + tree[A0(111…111)] + tree[A0(111..110] + tree[A0(111..100] + ………</p>\n<p>=&gt; c[x] - c[y] = tree[A1B<strong>¯</strong>] - { tree[A0(111…111)] + tree[A0(111..110] + tree[A0(111..100] + ………}</p>\n<p>所以當y開始一直刪去最低位的1後，最後 y 會變成A0B¯(common predecessor ) ，也就是停止的時候。</p>\n<p>＊換句話說，將x負責的區段一直刪去只剩下f[x]而已</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getFrequency</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; BIT, <span class=\"keyword\">int</span> index)</span></span>&#123;   <span class=\"comment\">//index!=0</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = BIT[index];        <span class=\"comment\">//set sum = tree[index]</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> common_pre = index - (index &amp; -index);    <span class=\"comment\">//find common predecessor</span></span><br><span class=\"line\">    index--;        <span class=\"comment\">//index is not important anymore, we could use it as our variable</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index != common_pre)&#123;     <span class=\"comment\">//after deleting the rightmost set bit, it will become common_pre</span></span><br><span class=\"line\">        sum -= BIT[index];</span><br><span class=\"line\">        index -= (index &amp; -index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getSum</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;BIT, <span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        sum += BIT[index];</span><br><span class=\"line\">        index -= (index &amp; -index);    <span class=\"comment\">//刪去最低位的1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;BIT, <span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> addition)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index &lt; BIT.size())&#123;      <span class=\"comment\">//index &lt; size of the tree</span></span><br><span class=\"line\">        BIT[index] += addition;</span><br><span class=\"line\">        index += (index &amp; -index);  <span class=\"comment\">//將最低位的1加1，就可以找到parent</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getFrequency</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; BIT, <span class=\"keyword\">int</span> index)</span></span>&#123;   <span class=\"comment\">//index!=0</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = BIT[index];        <span class=\"comment\">//set sum = tree[index]</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> common_pre = index - (index &amp; -index);    <span class=\"comment\">//find common predecessor</span></span><br><span class=\"line\">    index--;        <span class=\"comment\">//index is not important anymore, we could use it as our variable</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index != common_pre)&#123;     <span class=\"comment\">//after deleting the rightmost set bit, it will become common_pre</span></span><br><span class=\"line\">        sum -= BIT[index];</span><br><span class=\"line\">        index -= (index &amp; -index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printTree</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;BIT)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"i    \"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;BIT.size(); i++) <span class=\"built_in\">cout</span>&lt;&lt;setw(<span class=\"number\">3</span>)&lt;&lt;i;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"F    \"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>; k&lt;BIT.size(); k++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;setw(<span class=\"number\">3</span>)&lt;&lt;getFrequency(BIT, k);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"C    \"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t=<span class=\"number\">1</span>; t&lt;BIT.size(); t++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;setw(<span class=\"number\">3</span>)&lt;&lt;getSum(BIT, t);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Tree \"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p=<span class=\"number\">1</span>; p&lt;BIT.size(); p++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;setw(<span class=\"number\">3</span>)&lt;&lt;BIT[p];</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; constructBIT(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> N)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; BIT(N+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;=N; i++) BIT[i] = <span class=\"number\">0</span>;  <span class=\"comment\">//initialize tree</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;N; j++)</span><br><span class=\"line\">        update(BIT, j+<span class=\"number\">1</span>, arr[j]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> BIT;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">16</span>;   <span class=\"comment\">//length of frequecy array</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> freq_arr[] =  &#123; <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>&#125;;  <span class=\"comment\">//given data</span></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; BITree = constructBIT(freq_arr, N);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* use to demontrate */</span></span><br><span class=\"line\">    printTree(BITree);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hackerrank-Similar-Pair\"><a href=\"#Hackerrank-Similar-Pair\" class=\"headerlink\" title=\"Hackerrank: Similar Pair\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaGFja2VycmFuay5jb20vY2hhbGxlbmdlcy9zaW1pbGFycGFpci9wcm9ibGVt\" title=\"https://www.hackerrank.com/challenges/similarpair/problem\">Hackerrank: Similar Pair<i class=\"fa fa-external-link\"></i></span></h3><p>A pair of nodes, <strong><em>(a,b)</em></strong>, is a <em>similar pair</em> if both of the following conditions are true:</p>\n<ol>\n<li>Node <strong><em>a</em></strong> is the ancestor of node <strong><em>b</em></strong></li>\n<li><span>$abs(a-b) \\leqslant k$</span><!-- Has MathJax -->\n\n</li>\n</ol>\n<p>Given a tree where each node is labeled from <strong><em>1</em></strong> to <strong><em>n</em></strong> , find the number of similar pairs in the tree.</p>\n<p>For example, given the following tree:</p>\n<p align=\"center\">\n<img src=\"/Binary Indexed Tree/similarpairsExample.png\" width=\"200\" height=\"250\">\n</p>\n\n\n<p>We have the following pairs of ancestors and dependents:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pair      abs(a-b)</span><br><span class=\"line\">1,2         1</span><br><span class=\"line\">1,3         2</span><br><span class=\"line\">1,4         3</span><br><span class=\"line\">1,5         4</span><br><span class=\"line\">1,6         5</span><br><span class=\"line\">3,4         1</span><br><span class=\"line\">3,5         2</span><br><span class=\"line\">3,6         3</span><br></pre></td></tr></table></figure>\n\n<p>If <strong><em>k=3</em></strong> for example, we have <strong>6</strong> pairs that are similar, where <span>$abs(a,b) \\leqslant k$</span><!-- Has MathJax -->.</p>\n<p><strong>Function Description</strong></p>\n<p>Complete the similarPair function in the editor below. It should return an integer that represents the number of pairs meeting the criteria.</p>\n<p>similarPair has the following parameter(s):</p>\n<ul>\n<li>n: an integer that represents the number of nodes</li>\n<li>k: an integer</li>\n<li>edges: a two dimensional array where each element consists of two integers that represent connected node numbers</li>\n</ul>\n<p><strong>Input Format</strong></p>\n<p>The first line contains two space-separated integers <strong>n</strong> and  <strong>k</strong> , the number of nodes and the similarity threshold.<br>Each of the next <strong>n-1</strong> lines contains two space-separated integers defining an edge connecting nodes  <strong>p[i]</strong>  and <strong>c[i]</strong>, where node <strong>p[i]</strong> is the parent to node <strong>c[i]</strong>.</p>\n<p><strong>Constraints</strong></p>\n<ul>\n<li><span>$1 \\leqslant n \\leqslant 10^5$</span><!-- Has MathJax --> </li>\n<li><span>$0 \\leqslant k \\leqslant n$</span><!-- Has MathJax --> </li>\n<li><span>$1 \\leqslant p[i], c[i] \\leqslant n$</span><!-- Has MathJax --> \n\n\n</li>\n</ul>\n<p><strong>Output Format</strong></p>\n<p>Print a single integer denoting the number of similar pairs in the tree.</p>\n<p><strong>Sample Input</strong></p>\n<pre>\n5 2\n3 2\n3 1\n1 4\n1 5\n</pre>\n\n<p><strong>Sample Output</strong></p>\n<pre>\n4\n</pre>\n\n<p><strong>Explanation</strong></p>\n<p>The similar pairs are <strong>(3,2)</strong>, <strong>(3,1)</strong>, <strong>(3,4)</strong>, and <strong>(3,5)</strong>, so we print <strong>4</strong> as our answer. Observe that <strong>(1,4)</strong> and <strong>(1,5)</strong> are <em>not</em> similar pairs because they do not satisfy <span>$abs(a,b) \\leqslant k$</span><!-- Has MathJax --> for <span>$k=2$</span><!-- Has MathJax -->.</p>\n<p align=\"center\">\n<img src=\"/Binary Indexed Tree/BA897C1126BE8DC856F1F1EE1090A016.png\" width=\"250\" height=\"300\">\n</p>\n\n\n<p><strong>Solution</strong></p>\n<ol>\n<li>先建構好題目要的樹（不是BIT)。</li>\n<li>BIT的用途是，透過存放parent index至BIT，使其Child在尋找他所需要的範圍時(child+k, child-k)，可以透過Sum，統計在這個範圍裡parent 的 total</li>\n<li>每次訪問一個Node的時候，先問BIT該Node index的 index+k and index-K這個範圍當中，有多少，然後將加到similar pair</li>\n<li>接著就將Node 的index 更新(該index於BIT +1)</li>\n<li>然後再用Recursive 跑這個Node的Child</li>\n<li>跑完全部該Node的child後，又更新一次Node index (-1)</li>\n<li>所以由此可以確保每次訪問BIT時，BIT裡面的各Index一定是該Node的ancestor</li>\n<li>如此可以不需要一個一個和parent比對，因為若有M個ancestor，則只需要花Olog(M)的時間來找到該Node的similiar pair，而非O(M)</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//bt : bit array</span></span><br><span class=\"line\"><span class=\"comment\">//i and j are starting and ending index INCLUSIVE</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">bit_q</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> * bt,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//尋找範圍裡的總數</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum=<span class=\"number\">0l</span>l;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum+=bt[j];</span><br><span class=\"line\">        j -= (j &amp; (j*<span class=\"number\">-1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i--;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum-=bt[i];</span><br><span class=\"line\">        i -= (i &amp; (i*<span class=\"number\">-1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//bt : binary indexed tree</span></span><br><span class=\"line\"><span class=\"comment\">//n : size of bit array</span></span><br><span class=\"line\"><span class=\"comment\">//i is the index to be updated</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bit_up</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> * bt,<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> i,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> diff)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        bt[i] += diff;</span><br><span class=\"line\">        i += (i &amp; (i*<span class=\"number\">-1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,k;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; al[<span class=\"number\">100005</span>]; <span class=\"comment\">//adjacency list</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> similar_pair;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> bit[<span class=\"number\">100005</span>];     <span class=\"comment\">//binary indexed tree</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> node)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    similar_pair += bit_q(bit,max(<span class=\"number\">1</span>,node-k),min(n,node+k));</span><br><span class=\"line\">    bit_up(bit,n,node,<span class=\"number\">1</span>);       <span class=\"comment\">//將該index在binary indexed tree 的值+1，換句話說就是將index push to bit</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;al[node].size();i++)</span><br><span class=\"line\">    \tdfs(al[node][i]);</span><br><span class=\"line\">\tbit_up(bit,n,node,<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">    similar_pair=<span class=\"number\">0</span>;   <span class=\"comment\">//answer</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++)   <span class=\"comment\">//initialize binary indexed tree</span></span><br><span class=\"line\">        bit[i]=<span class=\"number\">0l</span>l;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> r ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i==<span class=\"number\">0</span>) r=x;      <span class=\"comment\">//the first one is root</span></span><br><span class=\"line\">        al[x].push_back(y);   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dfs(r);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;similar_pair&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>給予一個陣列arr，在有以下兩個請求時，可以透過binary indexed tree 加速運算速度</p>\n<ol>\n<li>(Update) add x to arr[index]</li>\n<li>(Sum) find the sum from arr[L] to arr[R]</li>\n</ol>\n<hr>\n<span>$index=1...N$</span><!-- Has MathJax --> <br>\n<span>$f[i]=$</span><!-- Has MathJax --> **frequency of each index **<br>\n<span>$c[i]=$</span><!-- Has MathJax --> **cummulation from index 1 to index i**<br>\n<span>$tree[i]=$</span><!-- Has MathJax --> 在tree各自負責區段的總和 \n\n<p>usually we will set index 0 as dummy, f[0]=0, c[0] =0</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">num  1  2  3  4  5  6   7   8  9  10  11  12  13  14  15  16</span><br><span class=\"line\"></span><br><span class=\"line\">f    1  0  2  1  1  3   0   4  2   5   2   2   3   1  0    2</span><br><span class=\"line\"></span><br><span class=\"line\">c    1  1  3  4  5  8   8  12 14  19  21  23  26  27  27  29</span><br><span class=\"line\"></span><br><span class=\"line\">tree 1  1  2  4  1  4   0  12  2   7   2  11   3   4   0  29</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","more":"<p align=\"center\">\n<img src=\"/Binary Indexed Tree/9385E82DD2EEB5AB2AB9C2BABDD9CDA5.gif\">\n</p>\nBIT (according to the graph above)\n<p align=\"center\">\n<img src=\"/Binary Indexed Tree/17D73226B1C6E38DC57F3305CB3A4FE3.jpg\" width=\"400\" height=\"400\">\n</p>\n\n<hr>\n<p>在BIT當中，每一個Node都存放著自己負責“區段”的總和。</p>\n<p>將index轉換成binary representation後，透過binary number有幾個1，來尋找從<span>$1 \\Rightarrow index$</span><!-- Has MathJax -->的總和</p>\n<p>若某一個Node的index = idx， 則其存放的總和 <span>$= idx - 2^r +1 \\Rightarrow idx$</span><!-- Has MathJax --> ( r是該idx從左而右最後一個1的位置）</p>\n<p>e.g. 譬如idx = 13;</p>\n<p>13 = 01101， 最後一個1的位置是0th（由右而作從零開始，所以Node 13負責的總和為 <span>$index = 13-2^0+1 = 13 \\Rightarrow 13$</span><!-- Has MathJax -->，負責自己的Node)</p>\n<p>(if idx = 12, 其負責的總和為<span>$index = 12-2^2+1 = 9 \\Rightarrow 12$</span><!-- Has MathJax -->)</p>\n<p>換句話說，就是 <code>(自己的left subtree + 自己的frequency)</code></p>\n<p>若要求得c[13] = c[01101] = tree[01101] + tree[01100] + tree[01000]</p>\n<p>由此可知，皆是從Node移動到Root</p>\n<ul>\n<li>BIT的主要概念即是給一個index 轉換成binary後，若要得知從1至該index的總和，就是把binary index 從右至左每次把最右邊的1砍掉後（刪去最低為的1)，全部的總和。</li>\n<li>如此作法可以比通常各Node是從1……index全部加起來還要快，因為此方法是看binary index 中有多少個1，就加多少個Node即可，不需要從頭到尾累加。</li>\n<li>只可以更新數值，不能插入新的節點</li>\n</ul>\n<hr>\n<h3 id=\"如何得到最低位的1-Rightmost-Set-bit\"><a href=\"#如何得到最低位的1-Rightmost-Set-bit\" class=\"headerlink\" title=\"如何得到最低位的1(Rightmost Set bit) ?\"></a>如何得到最低位的1(Rightmost Set bit) ?</h3><p><code>index &amp; -index</code></p>\n<p>Proof:</p>\n<p>if index = A(anything)1B(all zero) = (…101110101) 1 (000000000….)</p>\n<p>-index = <strong>(A1B)¯ + 1 **</strong>(to get the negative binary number of a specific index, take complement and add 1) num<strong>**¯ = complement of num</strong></p>\n<p>** = A¯0B¯ + 1 (since B = (1111111…), if we add 1, then B = (000000), and 0 becomes 1)**</p>\n<p>** = ***<em>A¯1B *</em></p>\n<hr>\n<h3 id=\"Sum\"><a href=\"#Sum\" class=\"headerlink\" title=\"Sum:\"></a>Sum:</h3><p>given an index, go from node to root to find the summation </p>\n<p>從BIT 樹圖分析，</p>\n<p>從Node開始，若是這個Node是parent 的left tree, 則不需要將sum+=tree[index]</p>\n<p>若是這個Node是parent 的right tree, 則需要將sum+=tree[index]</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getSum</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;BIT, <span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        sum += BIT[index];</span><br><span class=\"line\">        index -= (index &amp; -index);    <span class=\"comment\">//刪去最低位的1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update:\"></a>Update:</h3><p>跟Sum類似，更新有負責(包含)到該index的Node</p>\n<p>換句話說，若是該Node是parent’s left child的話，則需要更新parent</p>\n<p>若是該Node是parent’s right child的話，則不需要更新parent</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; BIT, <span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> addition)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index &lt; BIT.size())&#123;      <span class=\"comment\">//index &lt; size of the tree</span></span><br><span class=\"line\">        BIT[index] += addition;</span><br><span class=\"line\">        index += (index &amp; -index);  <span class=\"comment\">//將最低位的1加1，就可以找到parent</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"Get-single-node-frequency\"><a href=\"#Get-single-node-frequency\" class=\"headerlink\" title=\"Get single node frequency\"></a>Get single node frequency</h3><p>最直覺的方式就是 f[index] = c[index] - c[index-1]，意思就是跑兩次Sum;</p>\n<p>但如何可以只跑一次就好？</p>\n<p>c[index] 和 c[index-1] 一定有相同的</p>\n<p>if index = x = A1B<strong>¯</strong> , then y = index - 1 = A0B</p>\n<p>從這邊可以看出 </p>\n<p> c[x] = c[A0<strong>B¯</strong>] + tree[A1B<strong>¯</strong>] ,</p>\n<p> c[y] = c[A0<strong>B¯</strong>] + tree[A0(111…111)] + tree[A0(111..110] + tree[A0(111..100] + ………</p>\n<p>=&gt; c[x] - c[y] = tree[A1B<strong>¯</strong>] - { tree[A0(111…111)] + tree[A0(111..110] + tree[A0(111..100] + ………}</p>\n<p>所以當y開始一直刪去最低位的1後，最後 y 會變成A0B¯(common predecessor ) ，也就是停止的時候。</p>\n<p>＊換句話說，將x負責的區段一直刪去只剩下f[x]而已</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getFrequency</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; BIT, <span class=\"keyword\">int</span> index)</span></span>&#123;   <span class=\"comment\">//index!=0</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = BIT[index];        <span class=\"comment\">//set sum = tree[index]</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> common_pre = index - (index &amp; -index);    <span class=\"comment\">//find common predecessor</span></span><br><span class=\"line\">    index--;        <span class=\"comment\">//index is not important anymore, we could use it as our variable</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index != common_pre)&#123;     <span class=\"comment\">//after deleting the rightmost set bit, it will become common_pre</span></span><br><span class=\"line\">        sum -= BIT[index];</span><br><span class=\"line\">        index -= (index &amp; -index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getSum</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;BIT, <span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        sum += BIT[index];</span><br><span class=\"line\">        index -= (index &amp; -index);    <span class=\"comment\">//刪去最低位的1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;BIT, <span class=\"keyword\">int</span> index, <span class=\"keyword\">int</span> addition)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index &lt; BIT.size())&#123;      <span class=\"comment\">//index &lt; size of the tree</span></span><br><span class=\"line\">        BIT[index] += addition;</span><br><span class=\"line\">        index += (index &amp; -index);  <span class=\"comment\">//將最低位的1加1，就可以找到parent</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getFrequency</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; BIT, <span class=\"keyword\">int</span> index)</span></span>&#123;   <span class=\"comment\">//index!=0</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = BIT[index];        <span class=\"comment\">//set sum = tree[index]</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> common_pre = index - (index &amp; -index);    <span class=\"comment\">//find common predecessor</span></span><br><span class=\"line\">    index--;        <span class=\"comment\">//index is not important anymore, we could use it as our variable</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index != common_pre)&#123;     <span class=\"comment\">//after deleting the rightmost set bit, it will become common_pre</span></span><br><span class=\"line\">        sum -= BIT[index];</span><br><span class=\"line\">        index -= (index &amp; -index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printTree</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;BIT)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"i    \"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;BIT.size(); i++) <span class=\"built_in\">cout</span>&lt;&lt;setw(<span class=\"number\">3</span>)&lt;&lt;i;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"F    \"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>; k&lt;BIT.size(); k++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;setw(<span class=\"number\">3</span>)&lt;&lt;getFrequency(BIT, k);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"C    \"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t=<span class=\"number\">1</span>; t&lt;BIT.size(); t++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;setw(<span class=\"number\">3</span>)&lt;&lt;getSum(BIT, t);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Tree \"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p=<span class=\"number\">1</span>; p&lt;BIT.size(); p++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;setw(<span class=\"number\">3</span>)&lt;&lt;BIT[p];</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; constructBIT(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> N)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; BIT(N+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;=N; i++) BIT[i] = <span class=\"number\">0</span>;  <span class=\"comment\">//initialize tree</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;N; j++)</span><br><span class=\"line\">        update(BIT, j+<span class=\"number\">1</span>, arr[j]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> BIT;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">16</span>;   <span class=\"comment\">//length of frequecy array</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> freq_arr[] =  &#123; <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>&#125;;  <span class=\"comment\">//given data</span></span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; BITree = constructBIT(freq_arr, N);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* use to demontrate */</span></span><br><span class=\"line\">    printTree(BITree);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hackerrank-Similar-Pair\"><a href=\"#Hackerrank-Similar-Pair\" class=\"headerlink\" title=\"Hackerrank: Similar Pair\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaGFja2VycmFuay5jb20vY2hhbGxlbmdlcy9zaW1pbGFycGFpci9wcm9ibGVt\" title=\"https://www.hackerrank.com/challenges/similarpair/problem\">Hackerrank: Similar Pair<i class=\"fa fa-external-link\"></i></span></h3><p>A pair of nodes, <strong><em>(a,b)</em></strong>, is a <em>similar pair</em> if both of the following conditions are true:</p>\n<ol>\n<li>Node <strong><em>a</em></strong> is the ancestor of node <strong><em>b</em></strong></li>\n<li><span>$abs(a-b) \\leqslant k$</span><!-- Has MathJax -->\n\n</li>\n</ol>\n<p>Given a tree where each node is labeled from <strong><em>1</em></strong> to <strong><em>n</em></strong> , find the number of similar pairs in the tree.</p>\n<p>For example, given the following tree:</p>\n<p align=\"center\">\n<img src=\"/Binary Indexed Tree/similarpairsExample.png\" width=\"200\" height=\"250\">\n</p>\n\n\n<p>We have the following pairs of ancestors and dependents:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pair      abs(a-b)</span><br><span class=\"line\">1,2         1</span><br><span class=\"line\">1,3         2</span><br><span class=\"line\">1,4         3</span><br><span class=\"line\">1,5         4</span><br><span class=\"line\">1,6         5</span><br><span class=\"line\">3,4         1</span><br><span class=\"line\">3,5         2</span><br><span class=\"line\">3,6         3</span><br></pre></td></tr></table></figure>\n\n<p>If <strong><em>k=3</em></strong> for example, we have <strong>6</strong> pairs that are similar, where <span>$abs(a,b) \\leqslant k$</span><!-- Has MathJax -->.</p>\n<p><strong>Function Description</strong></p>\n<p>Complete the similarPair function in the editor below. It should return an integer that represents the number of pairs meeting the criteria.</p>\n<p>similarPair has the following parameter(s):</p>\n<ul>\n<li>n: an integer that represents the number of nodes</li>\n<li>k: an integer</li>\n<li>edges: a two dimensional array where each element consists of two integers that represent connected node numbers</li>\n</ul>\n<p><strong>Input Format</strong></p>\n<p>The first line contains two space-separated integers <strong>n</strong> and  <strong>k</strong> , the number of nodes and the similarity threshold.<br>Each of the next <strong>n-1</strong> lines contains two space-separated integers defining an edge connecting nodes  <strong>p[i]</strong>  and <strong>c[i]</strong>, where node <strong>p[i]</strong> is the parent to node <strong>c[i]</strong>.</p>\n<p><strong>Constraints</strong></p>\n<ul>\n<li><span>$1 \\leqslant n \\leqslant 10^5$</span><!-- Has MathJax --> </li>\n<li><span>$0 \\leqslant k \\leqslant n$</span><!-- Has MathJax --> </li>\n<li><span>$1 \\leqslant p[i], c[i] \\leqslant n$</span><!-- Has MathJax --> \n\n\n</li>\n</ul>\n<p><strong>Output Format</strong></p>\n<p>Print a single integer denoting the number of similar pairs in the tree.</p>\n<p><strong>Sample Input</strong></p>\n<pre>\n5 2\n3 2\n3 1\n1 4\n1 5\n</pre>\n\n<p><strong>Sample Output</strong></p>\n<pre>\n4\n</pre>\n\n<p><strong>Explanation</strong></p>\n<p>The similar pairs are <strong>(3,2)</strong>, <strong>(3,1)</strong>, <strong>(3,4)</strong>, and <strong>(3,5)</strong>, so we print <strong>4</strong> as our answer. Observe that <strong>(1,4)</strong> and <strong>(1,5)</strong> are <em>not</em> similar pairs because they do not satisfy <span>$abs(a,b) \\leqslant k$</span><!-- Has MathJax --> for <span>$k=2$</span><!-- Has MathJax -->.</p>\n<p align=\"center\">\n<img src=\"/Binary Indexed Tree/BA897C1126BE8DC856F1F1EE1090A016.png\" width=\"250\" height=\"300\">\n</p>\n\n\n<p><strong>Solution</strong></p>\n<ol>\n<li>先建構好題目要的樹（不是BIT)。</li>\n<li>BIT的用途是，透過存放parent index至BIT，使其Child在尋找他所需要的範圍時(child+k, child-k)，可以透過Sum，統計在這個範圍裡parent 的 total</li>\n<li>每次訪問一個Node的時候，先問BIT該Node index的 index+k and index-K這個範圍當中，有多少，然後將加到similar pair</li>\n<li>接著就將Node 的index 更新(該index於BIT +1)</li>\n<li>然後再用Recursive 跑這個Node的Child</li>\n<li>跑完全部該Node的child後，又更新一次Node index (-1)</li>\n<li>所以由此可以確保每次訪問BIT時，BIT裡面的各Index一定是該Node的ancestor</li>\n<li>如此可以不需要一個一個和parent比對，因為若有M個ancestor，則只需要花Olog(M)的時間來找到該Node的similiar pair，而非O(M)</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//bt : bit array</span></span><br><span class=\"line\"><span class=\"comment\">//i and j are starting and ending index INCLUSIVE</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">bit_q</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> * bt,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//尋找範圍裡的總數</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum=<span class=\"number\">0l</span>l;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum+=bt[j];</span><br><span class=\"line\">        j -= (j &amp; (j*<span class=\"number\">-1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i--;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum-=bt[i];</span><br><span class=\"line\">        i -= (i &amp; (i*<span class=\"number\">-1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//bt : binary indexed tree</span></span><br><span class=\"line\"><span class=\"comment\">//n : size of bit array</span></span><br><span class=\"line\"><span class=\"comment\">//i is the index to be updated</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bit_up</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> * bt,<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> i,<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> diff)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;=n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        bt[i] += diff;</span><br><span class=\"line\">        i += (i &amp; (i*<span class=\"number\">-1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n,k;</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; al[<span class=\"number\">100005</span>]; <span class=\"comment\">//adjacency list</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> similar_pair;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> bit[<span class=\"number\">100005</span>];     <span class=\"comment\">//binary indexed tree</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> node)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    similar_pair += bit_q(bit,max(<span class=\"number\">1</span>,node-k),min(n,node+k));</span><br><span class=\"line\">    bit_up(bit,n,node,<span class=\"number\">1</span>);       <span class=\"comment\">//將該index在binary indexed tree 的值+1，換句話說就是將index push to bit</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;al[node].size();i++)</span><br><span class=\"line\">    \tdfs(al[node][i]);</span><br><span class=\"line\">\tbit_up(bit,n,node,<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class=\"line\">    similar_pair=<span class=\"number\">0</span>;   <span class=\"comment\">//answer</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;i++)   <span class=\"comment\">//initialize binary indexed tree</span></span><br><span class=\"line\">        bit[i]=<span class=\"number\">0l</span>l;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> r ;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n<span class=\"number\">-1</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i==<span class=\"number\">0</span>) r=x;      <span class=\"comment\">//the first one is root</span></span><br><span class=\"line\">        al[x].push_back(y);   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dfs(r);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;similar_pair&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Floyd Warshall Algorithm","mathjax":true,"date":"2016-07-19T06:13:00.000Z","_content":"給一個有向圖(direct graph)，建立一個table，用以搜尋從one source to one destination最短路徑。\n\n方法：\n\n假設有N個點，從0開始一直挑到N-1，每次挑的時候，就把它納入intermediate set（一開始是空集合)。\n\n納入之後，讓該點當作intermediate vertex，開始以這個intermediate vertex作為中繼站，試每個點到另一個點的最短路徑(N\\*N次），不斷更新該table。\n<!--more-->\n意思就是若\n**i** - - - \\> **k** - - - \\> **j** 的distance  &nbsp;&nbsp;< &nbsp; &nbsp;**i** - - - \\> **j** 的distance <br>\n，則更新該table’s **i** to **j** as **table[i][k] + table[k][j]**\n\n當我們挑到**k**點時，表示我們已經考慮了**0, 1, …. k-1個**點了\n\nexample: from A to E\n<pre>\n    B - - - - - 7- - - - - > E\n   /                      /\n 5/                      / 1\n A - - 2 - - > C - - 3 ->D\n</pre>\n\n \n{% codeblock line_number:false %}\n                                                                             A->E distance\n1. 挑A， table[a][e]== INF is not allowed to test                                  -1\n2. 挑B，table[a][b] + table[b][e] < table[a][e] == INF, let table[a][e]=12         12\n3. 挑Ｃ，仍無法到達E，因Ｄ還沒在intermediate set，但更新了A->D為5                        12\n4. 挑D， table[a][d] + table[d][e] == 5+1 < table[a][e] == 12                       6\n5. 挑E，table[a][e] + table[e][e], table[e][e]== INF is not allowed to test         6\nans == 6\n{% endcodeblock %}\n\n\n---\n\n# [Floyd : City of Blinding Lights](https://www.hackerrank.com/challenges/floyd-city-of-blinding-lights/problem)\n\nGiven a directed weighted graph where weight indicates distance, for each query, determine the length of the shortest path between nodes. There may be many queries, so efficiency counts.\n\nFor example, your graph consists of **5** nodes as in the following:\n<p align=\"center\">\n<img src=\"/Floyd Warshall Algorithm/1525461069-142e0d306a-blindingLightsExample.png\" />\n</p>\n\n\nA few queries are from node **4** to node **3**, node **2** to node **5** , and node **5** to node **3**.\n\n1. There are two paths from **4** to **3**: \n\n\t- {% math %}4 \\Rightarrow 1 \\Rightarrow 2 \\Rightarrow 3{% endmath %} at a distance of **4 + 5 + 1 = 10**\n\t- {% math %}4 \\Rightarrow 1 \\Rightarrow 5 \\Rightarrow 3{% endmath %} at a distance of **4 + 3 + 2 = 9** <br>\n\tIn this case we choose path **2**\n\n2. There is no path from **2** to **5**, so we return **-1**.\n3. There is one path from **5** to **3**:\n\t- \t{% math %}4 \\Rightarrow 5{% endmath %} at a distance of **2**\n\n\n**Input Format**\n\nFirst line has two integers ***N***, denoting the number of nodes in the graph and ***M***, denoting the number of edges in the graph. \n\nThe next **M** lines each consist of three space separated integers *x* *y* *r*  , where *x* and  *y* denote the two nodes between which the *directed* edge ( *x* -\\> *y* ) exists, *r* denotes the length of the edge between the corresponding edges. \nThe next line contains a single integer **Q** , denoting number of queries. \n\nThe next **Q** lines each, contain two space separated integers *a* and *b*, denoting the node numbers specified according to the question. \n\n**Constraints** \n\n- {% math %}2 \\leqslant N \\leqslant 400 {% endmath %}\n- {% math %}1 \\leqslant M \\leqslant frac{N*(N-1)}{2} {% endmath %}\n- {% math %}1 \\leqslant Q \\leqslant 10^5 {% endmath %}\n- {% math %}1 \\leqslant x,y \\leqslant N {% endmath %}\n- {% math %}1 \\leqslant r \\leqslant 350 {% endmath %}\n\n**If there are edges between the same pair of nodes with different weights, the last one (most recent) is to be considered as the only edge between them.**\n\n**Output Format**\n\nPrint **Q** lines, each containing a single integer, specifying the shortest distance between the nodes specified for that query in the input. \n\nIf the distance between a pair of nodes is infinite (not reachable), then print -1 as the shortest distance. \n\n**Sample Input**\n\n<pre>\n4 5\n1 2 5\n1 4 24\n2 4 6\n3 4 4\n3 2 7\n3\n1 2\n3 1\n1 4\n\n</pre>\n\n**Sample Output**\n\n<pre>\n5\n-1\n11\n</pre>\n\n**Explanation**\n\nThe graph given in the test case is shown as :\n<p align=\"center\">\n<img src=\"/Floyd Warshall Algorithm/F67D409077D41849E6DA24F72FA750E5.png\" />\n</p>\n\n\n* The nodes A,B,C and D denote the 1,2,3 and 4 node numbers.\n\nThe shortest paths for the 3 queries are :\n\n* **A-\\>B** (Direct Path is shortest with weight 5)\n* **-1** (There is no way of reaching node 1 from node 3, hence unreachable)\n* **A-\\>B-\\>D** (Indirect path is shortest with weight (5+6) = 11 units, the direct path is longer with 24 units length)\n\n```cpp\n#include <vector>\n#include <iostream>\n#include <limits.h>\nusing namespace std;\n\nvoid floyd(vector< vector<int> > graph)\n{\n    //Add all vertices one by one to the set of intermediate vertices.\n    for(int k=0; k<graph.size(); k++){\n        \n        // Pick all vertices as source one by one\n        for(int i=0; i<graph.size(); i++){\n            \n            // Pick all vertices as destination for the\n            // above picked source\n            for(int j=0; j<graph.size(); j++){\n                \n                //either i to k or k to j is INT_MAX, there's no way to move from the source to destination\n                //however if i==k || k==j, there's no need to consider it\n                if(graph[i][k]!=INT_MAX && graph[k][j]!=INT_MAX){\n                    if(graph[i][k]+graph[k][j]<graph[i][j])\n                        graph[i][j] = graph[i][k]+graph[k][j];\n                }\n            }\n        }\n    }\n    \n    //print solution\n    int q;\n    cin>>q;\n    while(q>0){\n        int c, d;\n        cin>>c>>d;\n        c--;\n        d--;\n        //need to consider that source and destination are the same, self to self\n        if(c==d) cout<<0<<endl;\n        \n        //if destination is unreachable\n        else if(graph[c][d]==INT_MAX) cout<<-1<<endl;\n        \n        else cout<<graph[c][d]<<endl;\n        q--;\n    }\n}\n\nint main() {\n    int N, M;\n    cin>>N>>M;\n    vector< vector<int> > graph(N, vector<int> (N));\n    for(int i=0; i<N; i++)\n        for(int j=0; j<N; j++)\n            graph[i][j] = INT_MAX;\n    while(M>0){\n        int a, b, w;\n        cin>>a>>b>>w;\n        a--;\n        b--;\n        graph[a][b] = w;\n        M--;\n    }\n    floyd(graph);\n    return 0;\n}\n```","source":"_posts/Floyd Warshall Algorithm.md","raw":"title: Floyd Warshall Algorithm\ntags:\n  - Graph\n  - Hackerrank\ncategories:\n  - Algorithms\nmathjax: true\ndate: 2016-07-19 14:13:00\n---\n給一個有向圖(direct graph)，建立一個table，用以搜尋從one source to one destination最短路徑。\n\n方法：\n\n假設有N個點，從0開始一直挑到N-1，每次挑的時候，就把它納入intermediate set（一開始是空集合)。\n\n納入之後，讓該點當作intermediate vertex，開始以這個intermediate vertex作為中繼站，試每個點到另一個點的最短路徑(N\\*N次），不斷更新該table。\n<!--more-->\n意思就是若\n**i** - - - \\> **k** - - - \\> **j** 的distance  &nbsp;&nbsp;< &nbsp; &nbsp;**i** - - - \\> **j** 的distance <br>\n，則更新該table’s **i** to **j** as **table[i][k] + table[k][j]**\n\n當我們挑到**k**點時，表示我們已經考慮了**0, 1, …. k-1個**點了\n\nexample: from A to E\n<pre>\n    B - - - - - 7- - - - - > E\n   /                      /\n 5/                      / 1\n A - - 2 - - > C - - 3 ->D\n</pre>\n\n \n{% codeblock line_number:false %}\n                                                                             A->E distance\n1. 挑A， table[a][e]== INF is not allowed to test                                  -1\n2. 挑B，table[a][b] + table[b][e] < table[a][e] == INF, let table[a][e]=12         12\n3. 挑Ｃ，仍無法到達E，因Ｄ還沒在intermediate set，但更新了A->D為5                        12\n4. 挑D， table[a][d] + table[d][e] == 5+1 < table[a][e] == 12                       6\n5. 挑E，table[a][e] + table[e][e], table[e][e]== INF is not allowed to test         6\nans == 6\n{% endcodeblock %}\n\n\n---\n\n# [Floyd : City of Blinding Lights](https://www.hackerrank.com/challenges/floyd-city-of-blinding-lights/problem)\n\nGiven a directed weighted graph where weight indicates distance, for each query, determine the length of the shortest path between nodes. There may be many queries, so efficiency counts.\n\nFor example, your graph consists of **5** nodes as in the following:\n<p align=\"center\">\n<img src=\"/Floyd Warshall Algorithm/1525461069-142e0d306a-blindingLightsExample.png\" />\n</p>\n\n\nA few queries are from node **4** to node **3**, node **2** to node **5** , and node **5** to node **3**.\n\n1. There are two paths from **4** to **3**: \n\n\t- {% math %}4 \\Rightarrow 1 \\Rightarrow 2 \\Rightarrow 3{% endmath %} at a distance of **4 + 5 + 1 = 10**\n\t- {% math %}4 \\Rightarrow 1 \\Rightarrow 5 \\Rightarrow 3{% endmath %} at a distance of **4 + 3 + 2 = 9** <br>\n\tIn this case we choose path **2**\n\n2. There is no path from **2** to **5**, so we return **-1**.\n3. There is one path from **5** to **3**:\n\t- \t{% math %}4 \\Rightarrow 5{% endmath %} at a distance of **2**\n\n\n**Input Format**\n\nFirst line has two integers ***N***, denoting the number of nodes in the graph and ***M***, denoting the number of edges in the graph. \n\nThe next **M** lines each consist of three space separated integers *x* *y* *r*  , where *x* and  *y* denote the two nodes between which the *directed* edge ( *x* -\\> *y* ) exists, *r* denotes the length of the edge between the corresponding edges. \nThe next line contains a single integer **Q** , denoting number of queries. \n\nThe next **Q** lines each, contain two space separated integers *a* and *b*, denoting the node numbers specified according to the question. \n\n**Constraints** \n\n- {% math %}2 \\leqslant N \\leqslant 400 {% endmath %}\n- {% math %}1 \\leqslant M \\leqslant frac{N*(N-1)}{2} {% endmath %}\n- {% math %}1 \\leqslant Q \\leqslant 10^5 {% endmath %}\n- {% math %}1 \\leqslant x,y \\leqslant N {% endmath %}\n- {% math %}1 \\leqslant r \\leqslant 350 {% endmath %}\n\n**If there are edges between the same pair of nodes with different weights, the last one (most recent) is to be considered as the only edge between them.**\n\n**Output Format**\n\nPrint **Q** lines, each containing a single integer, specifying the shortest distance between the nodes specified for that query in the input. \n\nIf the distance between a pair of nodes is infinite (not reachable), then print -1 as the shortest distance. \n\n**Sample Input**\n\n<pre>\n4 5\n1 2 5\n1 4 24\n2 4 6\n3 4 4\n3 2 7\n3\n1 2\n3 1\n1 4\n\n</pre>\n\n**Sample Output**\n\n<pre>\n5\n-1\n11\n</pre>\n\n**Explanation**\n\nThe graph given in the test case is shown as :\n<p align=\"center\">\n<img src=\"/Floyd Warshall Algorithm/F67D409077D41849E6DA24F72FA750E5.png\" />\n</p>\n\n\n* The nodes A,B,C and D denote the 1,2,3 and 4 node numbers.\n\nThe shortest paths for the 3 queries are :\n\n* **A-\\>B** (Direct Path is shortest with weight 5)\n* **-1** (There is no way of reaching node 1 from node 3, hence unreachable)\n* **A-\\>B-\\>D** (Indirect path is shortest with weight (5+6) = 11 units, the direct path is longer with 24 units length)\n\n```cpp\n#include <vector>\n#include <iostream>\n#include <limits.h>\nusing namespace std;\n\nvoid floyd(vector< vector<int> > graph)\n{\n    //Add all vertices one by one to the set of intermediate vertices.\n    for(int k=0; k<graph.size(); k++){\n        \n        // Pick all vertices as source one by one\n        for(int i=0; i<graph.size(); i++){\n            \n            // Pick all vertices as destination for the\n            // above picked source\n            for(int j=0; j<graph.size(); j++){\n                \n                //either i to k or k to j is INT_MAX, there's no way to move from the source to destination\n                //however if i==k || k==j, there's no need to consider it\n                if(graph[i][k]!=INT_MAX && graph[k][j]!=INT_MAX){\n                    if(graph[i][k]+graph[k][j]<graph[i][j])\n                        graph[i][j] = graph[i][k]+graph[k][j];\n                }\n            }\n        }\n    }\n    \n    //print solution\n    int q;\n    cin>>q;\n    while(q>0){\n        int c, d;\n        cin>>c>>d;\n        c--;\n        d--;\n        //need to consider that source and destination are the same, self to self\n        if(c==d) cout<<0<<endl;\n        \n        //if destination is unreachable\n        else if(graph[c][d]==INT_MAX) cout<<-1<<endl;\n        \n        else cout<<graph[c][d]<<endl;\n        q--;\n    }\n}\n\nint main() {\n    int N, M;\n    cin>>N>>M;\n    vector< vector<int> > graph(N, vector<int> (N));\n    for(int i=0; i<N; i++)\n        for(int j=0; j<N; j++)\n            graph[i][j] = INT_MAX;\n    while(M>0){\n        int a, b, w;\n        cin>>a>>b>>w;\n        a--;\n        b--;\n        graph[a][b] = w;\n        M--;\n    }\n    floyd(graph);\n    return 0;\n}\n```","slug":"Floyd Warshall Algorithm","published":1,"updated":"2019-06-21T06:36:40.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxijp50r0002dvw9znvmk0id","content":"<p>給一個有向圖(direct graph)，建立一個table，用以搜尋從one source to one destination最短路徑。</p>\n<p>方法：</p>\n<p>假設有N個點，從0開始一直挑到N-1，每次挑的時候，就把它納入intermediate set（一開始是空集合)。</p>\n<p>納入之後，讓該點當作intermediate vertex，開始以這個intermediate vertex作為中繼站，試每個點到另一個點的最短路徑(N*N次），不斷更新該table。</p>\n<a id=\"more\"></a>\n<p>意思就是若<br><strong>i</strong> - - - &gt; <strong>k</strong> - - - &gt; <strong>j</strong> 的distance  &nbsp;&nbsp;&lt; &nbsp; &nbsp;<strong>i</strong> - - - &gt; <strong>j</strong> 的distance <br><br>，則更新該table’s <strong>i</strong> to <strong>j</strong> as <strong>table[i][k] + table[k][j]</strong></p>\n<p>當我們挑到<strong>k</strong>點時，表示我們已經考慮了<strong>0, 1, …. k-1個</strong>點了</p>\n<p>example: from A to E</p>\n<pre>\n    B - - - - - 7- - - - - > E\n   /                      /\n 5/                      / 1\n A - - 2 - - > C - - 3 ->D\n</pre>\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">                                                                             A-&gt;E distance</span><br><span class=\"line\">1. 挑A， table[a][e]== INF is not allowed to test                                  -1</span><br><span class=\"line\">2. 挑B，table[a][b] + table[b][e] &lt; table[a][e] == INF, let table[a][e]=12         12</span><br><span class=\"line\">3. 挑Ｃ，仍無法到達E，因Ｄ還沒在intermediate set，但更新了A-&gt;D為5                        12</span><br><span class=\"line\">4. 挑D， table[a][d] + table[d][e] == 5+1 &lt; table[a][e] == 12                       6</span><br><span class=\"line\">5. 挑E，table[a][e] + table[e][e], table[e][e]== INF is not allowed to test         6</span><br><span class=\"line\">ans == 6</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h1 id=\"Floyd-City-of-Blinding-Lights\"><a href=\"#Floyd-City-of-Blinding-Lights\" class=\"headerlink\" title=\"Floyd : City of Blinding Lights\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaGFja2VycmFuay5jb20vY2hhbGxlbmdlcy9mbG95ZC1jaXR5LW9mLWJsaW5kaW5nLWxpZ2h0cy9wcm9ibGVt\" title=\"https://www.hackerrank.com/challenges/floyd-city-of-blinding-lights/problem\">Floyd : City of Blinding Lights<i class=\"fa fa-external-link\"></i></span></h1><p>Given a directed weighted graph where weight indicates distance, for each query, determine the length of the shortest path between nodes. There may be many queries, so efficiency counts.</p>\n<p>For example, your graph consists of <strong>5</strong> nodes as in the following:</p>\n<p align=\"center\">\n<img src=\"/Floyd Warshall Algorithm/1525461069-142e0d306a-blindingLightsExample.png\">\n</p>\n\n\n<p>A few queries are from node <strong>4</strong> to node <strong>3</strong>, node <strong>2</strong> to node <strong>5</strong> , and node <strong>5</strong> to node <strong>3</strong>.</p>\n<ol>\n<li><p>There are two paths from <strong>4</strong> to <strong>3</strong>: </p>\n<ul>\n<li><span>$4 \\Rightarrow 1 \\Rightarrow 2 \\Rightarrow 3$</span><!-- Has MathJax --> at a distance of **4 + 5 + 1 = 10**</li>\n<li><span>$4 \\Rightarrow 1 \\Rightarrow 5 \\Rightarrow 3$</span><!-- Has MathJax --> at a distance of **4 + 3 + 2 = 9** <br>\nIn this case we choose path <strong>2</strong></li>\n</ul>\n</li>\n<li><p>There is no path from <strong>2</strong> to <strong>5</strong>, so we return <strong>-1</strong>.</p>\n</li>\n<li><p>There is one path from <strong>5</strong> to <strong>3</strong>:</p>\n<ul>\n<li><span>$4 \\Rightarrow 5$</span><!-- Has MathJax --> at a distance of **2**\n\n\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>Input Format</strong></p>\n<p>First line has two integers <strong><em>N</em></strong>, denoting the number of nodes in the graph and <strong><em>M</em></strong>, denoting the number of edges in the graph. </p>\n<p>The next <strong>M</strong> lines each consist of three space separated integers <em>x</em> <em>y</em> <em>r</em>  , where <em>x</em> and  <em>y</em> denote the two nodes between which the <em>directed</em> edge ( <em>x</em> -&gt; <em>y</em> ) exists, <em>r</em> denotes the length of the edge between the corresponding edges.<br>The next line contains a single integer <strong>Q</strong> , denoting number of queries. </p>\n<p>The next <strong>Q</strong> lines each, contain two space separated integers <em>a</em> and <em>b</em>, denoting the node numbers specified according to the question. </p>\n<p><strong>Constraints</strong> </p>\n<ul>\n<li><span>$2 \\leqslant N \\leqslant 400$</span><!-- Has MathJax --></li>\n<li><span>$1 \\leqslant M \\leqslant frac{N*(N-1)}{2}$</span><!-- Has MathJax --></li>\n<li><span>$1 \\leqslant Q \\leqslant 10^5$</span><!-- Has MathJax --></li>\n<li><span>$1 \\leqslant x,y \\leqslant N$</span><!-- Has MathJax --></li>\n<li><span>$1 \\leqslant r \\leqslant 350$</span><!-- Has MathJax -->\n\n</li>\n</ul>\n<p><strong>If there are edges between the same pair of nodes with different weights, the last one (most recent) is to be considered as the only edge between them.</strong></p>\n<p><strong>Output Format</strong></p>\n<p>Print <strong>Q</strong> lines, each containing a single integer, specifying the shortest distance between the nodes specified for that query in the input. </p>\n<p>If the distance between a pair of nodes is infinite (not reachable), then print -1 as the shortest distance. </p>\n<p><strong>Sample Input</strong></p>\n<pre>\n4 5\n1 2 5\n1 4 24\n2 4 6\n3 4 4\n3 2 7\n3\n1 2\n3 1\n1 4\n\n</pre>\n\n<p><strong>Sample Output</strong></p>\n<pre>\n5\n-1\n11\n</pre>\n\n<p><strong>Explanation</strong></p>\n<p>The graph given in the test case is shown as :</p>\n<p align=\"center\">\n<img src=\"/Floyd Warshall Algorithm/F67D409077D41849E6DA24F72FA750E5.png\">\n</p>\n\n\n<ul>\n<li>The nodes A,B,C and D denote the 1,2,3 and 4 node numbers.</li>\n</ul>\n<p>The shortest paths for the 3 queries are :</p>\n<ul>\n<li><strong>A-&gt;B</strong> (Direct Path is shortest with weight 5)</li>\n<li><strong>-1</strong> (There is no way of reaching node 1 from node 3, hence unreachable)</li>\n<li><strong>A-&gt;B-&gt;D</strong> (Indirect path is shortest with weight (5+6) = 11 units, the direct path is longer with 24 units length)</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;limits.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">floyd</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt; <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt; graph)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Add all vertices one by one to the set of intermediate vertices.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>; k&lt;graph.size(); k++)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Pick all vertices as source one by one</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;graph.size(); i++)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// Pick all vertices as destination for the</span></span><br><span class=\"line\">            <span class=\"comment\">// above picked source</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;graph.size(); j++)&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">//either i to k or k to j is INT_MAX, there's no way to move from the source to destination</span></span><br><span class=\"line\">                <span class=\"comment\">//however if i==k || k==j, there's no need to consider it</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(graph[i][k]!=INT_MAX &amp;&amp; graph[k][j]!=INT_MAX)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(graph[i][k]+graph[k][j]&lt;graph[i][j])</span><br><span class=\"line\">                        graph[i][j] = graph[i][k]+graph[k][j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//print solution</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> q;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;q;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c, d;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;c&gt;&gt;d;</span><br><span class=\"line\">        c--;</span><br><span class=\"line\">        d--;</span><br><span class=\"line\">        <span class=\"comment\">//need to consider that source and destination are the same, self to self</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c==d) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">0</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//if destination is unreachable</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(graph[c][d]==INT_MAX) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">-1</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;graph[c][d]&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        q--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N, M;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;N&gt;&gt;M;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt; <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt; graph(N, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; (N));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;N; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;N; j++)</span><br><span class=\"line\">            graph[i][j] = INT_MAX;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(M&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a, b, w;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;w;</span><br><span class=\"line\">        a--;</span><br><span class=\"line\">        b--;</span><br><span class=\"line\">        graph[a][b] = w;</span><br><span class=\"line\">        M--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    floyd(graph);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>給一個有向圖(direct graph)，建立一個table，用以搜尋從one source to one destination最短路徑。</p>\n<p>方法：</p>\n<p>假設有N個點，從0開始一直挑到N-1，每次挑的時候，就把它納入intermediate set（一開始是空集合)。</p>\n<p>納入之後，讓該點當作intermediate vertex，開始以這個intermediate vertex作為中繼站，試每個點到另一個點的最短路徑(N*N次），不斷更新該table。</p>","more":"<p>意思就是若<br><strong>i</strong> - - - &gt; <strong>k</strong> - - - &gt; <strong>j</strong> 的distance  &nbsp;&nbsp;&lt; &nbsp; &nbsp;<strong>i</strong> - - - &gt; <strong>j</strong> 的distance <br><br>，則更新該table’s <strong>i</strong> to <strong>j</strong> as <strong>table[i][k] + table[k][j]</strong></p>\n<p>當我們挑到<strong>k</strong>點時，表示我們已經考慮了<strong>0, 1, …. k-1個</strong>點了</p>\n<p>example: from A to E</p>\n<pre>\n    B - - - - - 7- - - - - > E\n   /                      /\n 5/                      / 1\n A - - 2 - - > C - - 3 ->D\n</pre>\n\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">                                                                             A-&gt;E distance</span><br><span class=\"line\">1. 挑A， table[a][e]== INF is not allowed to test                                  -1</span><br><span class=\"line\">2. 挑B，table[a][b] + table[b][e] &lt; table[a][e] == INF, let table[a][e]=12         12</span><br><span class=\"line\">3. 挑Ｃ，仍無法到達E，因Ｄ還沒在intermediate set，但更新了A-&gt;D為5                        12</span><br><span class=\"line\">4. 挑D， table[a][d] + table[d][e] == 5+1 &lt; table[a][e] == 12                       6</span><br><span class=\"line\">5. 挑E，table[a][e] + table[e][e], table[e][e]== INF is not allowed to test         6</span><br><span class=\"line\">ans == 6</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<h1 id=\"Floyd-City-of-Blinding-Lights\"><a href=\"#Floyd-City-of-Blinding-Lights\" class=\"headerlink\" title=\"Floyd : City of Blinding Lights\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaGFja2VycmFuay5jb20vY2hhbGxlbmdlcy9mbG95ZC1jaXR5LW9mLWJsaW5kaW5nLWxpZ2h0cy9wcm9ibGVt\" title=\"https://www.hackerrank.com/challenges/floyd-city-of-blinding-lights/problem\">Floyd : City of Blinding Lights<i class=\"fa fa-external-link\"></i></span></h1><p>Given a directed weighted graph where weight indicates distance, for each query, determine the length of the shortest path between nodes. There may be many queries, so efficiency counts.</p>\n<p>For example, your graph consists of <strong>5</strong> nodes as in the following:</p>\n<p align=\"center\">\n<img src=\"/Floyd Warshall Algorithm/1525461069-142e0d306a-blindingLightsExample.png\">\n</p>\n\n\n<p>A few queries are from node <strong>4</strong> to node <strong>3</strong>, node <strong>2</strong> to node <strong>5</strong> , and node <strong>5</strong> to node <strong>3</strong>.</p>\n<ol>\n<li><p>There are two paths from <strong>4</strong> to <strong>3</strong>: </p>\n<ul>\n<li><span>$4 \\Rightarrow 1 \\Rightarrow 2 \\Rightarrow 3$</span><!-- Has MathJax --> at a distance of **4 + 5 + 1 = 10**</li>\n<li><span>$4 \\Rightarrow 1 \\Rightarrow 5 \\Rightarrow 3$</span><!-- Has MathJax --> at a distance of **4 + 3 + 2 = 9** <br>\nIn this case we choose path <strong>2</strong></li>\n</ul>\n</li>\n<li><p>There is no path from <strong>2</strong> to <strong>5</strong>, so we return <strong>-1</strong>.</p>\n</li>\n<li><p>There is one path from <strong>5</strong> to <strong>3</strong>:</p>\n<ul>\n<li><span>$4 \\Rightarrow 5$</span><!-- Has MathJax --> at a distance of **2**\n\n\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>Input Format</strong></p>\n<p>First line has two integers <strong><em>N</em></strong>, denoting the number of nodes in the graph and <strong><em>M</em></strong>, denoting the number of edges in the graph. </p>\n<p>The next <strong>M</strong> lines each consist of three space separated integers <em>x</em> <em>y</em> <em>r</em>  , where <em>x</em> and  <em>y</em> denote the two nodes between which the <em>directed</em> edge ( <em>x</em> -&gt; <em>y</em> ) exists, <em>r</em> denotes the length of the edge between the corresponding edges.<br>The next line contains a single integer <strong>Q</strong> , denoting number of queries. </p>\n<p>The next <strong>Q</strong> lines each, contain two space separated integers <em>a</em> and <em>b</em>, denoting the node numbers specified according to the question. </p>\n<p><strong>Constraints</strong> </p>\n<ul>\n<li><span>$2 \\leqslant N \\leqslant 400$</span><!-- Has MathJax --></li>\n<li><span>$1 \\leqslant M \\leqslant frac{N*(N-1)}{2}$</span><!-- Has MathJax --></li>\n<li><span>$1 \\leqslant Q \\leqslant 10^5$</span><!-- Has MathJax --></li>\n<li><span>$1 \\leqslant x,y \\leqslant N$</span><!-- Has MathJax --></li>\n<li><span>$1 \\leqslant r \\leqslant 350$</span><!-- Has MathJax -->\n\n</li>\n</ul>\n<p><strong>If there are edges between the same pair of nodes with different weights, the last one (most recent) is to be considered as the only edge between them.</strong></p>\n<p><strong>Output Format</strong></p>\n<p>Print <strong>Q</strong> lines, each containing a single integer, specifying the shortest distance between the nodes specified for that query in the input. </p>\n<p>If the distance between a pair of nodes is infinite (not reachable), then print -1 as the shortest distance. </p>\n<p><strong>Sample Input</strong></p>\n<pre>\n4 5\n1 2 5\n1 4 24\n2 4 6\n3 4 4\n3 2 7\n3\n1 2\n3 1\n1 4\n\n</pre>\n\n<p><strong>Sample Output</strong></p>\n<pre>\n5\n-1\n11\n</pre>\n\n<p><strong>Explanation</strong></p>\n<p>The graph given in the test case is shown as :</p>\n<p align=\"center\">\n<img src=\"/Floyd Warshall Algorithm/F67D409077D41849E6DA24F72FA750E5.png\">\n</p>\n\n\n<ul>\n<li>The nodes A,B,C and D denote the 1,2,3 and 4 node numbers.</li>\n</ul>\n<p>The shortest paths for the 3 queries are :</p>\n<ul>\n<li><strong>A-&gt;B</strong> (Direct Path is shortest with weight 5)</li>\n<li><strong>-1</strong> (There is no way of reaching node 1 from node 3, hence unreachable)</li>\n<li><strong>A-&gt;B-&gt;D</strong> (Indirect path is shortest with weight (5+6) = 11 units, the direct path is longer with 24 units length)</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;limits.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">floyd</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt; <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt; graph)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Add all vertices one by one to the set of intermediate vertices.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>; k&lt;graph.size(); k++)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Pick all vertices as source one by one</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;graph.size(); i++)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// Pick all vertices as destination for the</span></span><br><span class=\"line\">            <span class=\"comment\">// above picked source</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;graph.size(); j++)&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">//either i to k or k to j is INT_MAX, there's no way to move from the source to destination</span></span><br><span class=\"line\">                <span class=\"comment\">//however if i==k || k==j, there's no need to consider it</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(graph[i][k]!=INT_MAX &amp;&amp; graph[k][j]!=INT_MAX)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(graph[i][k]+graph[k][j]&lt;graph[i][j])</span><br><span class=\"line\">                        graph[i][j] = graph[i][k]+graph[k][j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//print solution</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> q;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;q;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c, d;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;c&gt;&gt;d;</span><br><span class=\"line\">        c--;</span><br><span class=\"line\">        d--;</span><br><span class=\"line\">        <span class=\"comment\">//need to consider that source and destination are the same, self to self</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c==d) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">0</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//if destination is unreachable</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(graph[c][d]==INT_MAX) <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"number\">-1</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;graph[c][d]&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">        q--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N, M;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;N&gt;&gt;M;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt; <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &gt; graph(N, <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; (N));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;N; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;N; j++)</span><br><span class=\"line\">            graph[i][j] = INT_MAX;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(M&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a, b, w;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;w;</span><br><span class=\"line\">        a--;</span><br><span class=\"line\">        b--;</span><br><span class=\"line\">        graph[a][b] = w;</span><br><span class=\"line\">        M--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    floyd(graph);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Ford–Fulkerson Algorithm for Maximum Flow Problem","mathjax":true,"date":"2016-12-23T06:13:00.000Z","_content":"Given a graph which represents a flow network where every edge has a capacity. Also given two vertices source **s** and sink **t** in the graph, find the maximum possible flow from s to t with following constraints:\n\na) Flow on an edge doesn’t exceed the given capacity of the edge.\n\nb) Incoming flow is equal to outgoing flow for every vertex except **s** and **t**.\n\n---\n\n首先，給予各點之間的關係（construct an adjacent list)\n基本的找法是： \n\n* 尋找一條從s -\\> t 的有效路徑 (BFS or DFS)\n* 找到此路徑能通過的最小flow，更新Residual Graph\n* 將flow加到 max\\_flow\n* 結束後，return max\\_flow\n\nResidual Graph：一開始先複製original graph，而其點與點之間存放的是“剩餘可以通過的Flow (residual capacity)”。\n<!--more-->\n換句話說，每當找到一條路徑可以是flow通過時，假設某edge的capacity 是 C，而通過的flow 是 F，則將更新此edge於該Residual Graph成 C-F，若是C-F=0，代表此edge不能再被挑選，因為沒有剩餘的quota。\n\n需要注意的是，在更新residual某條edge時，假設是從u -\\> v，則u -\\> v 將被減掉 F，但是反方向 v -\\> u 卻要增加F (起初反方向是0)，這個動作叫做”Cancellation”。\n\n> **各Node的進出要維持不變**\n\n以下圖為例 （整條黑色路徑假設是s -\\> b -\\> v -\\> a -\\> c -\\> t）\n\n現在先看上面那條，若要推送一個10 flow時，在更新 10 flow / 15 capacity這條路徑時`（設u ->`(10/10)` a ->(10/15) v)`，則` u->v`在 Residual Graph上應該被減去10 ，剩餘5 ；但在反方向 `v -> u` 這邊，卻要增加**10**。\n\n之所以如此，我們可以看到若是在選擇上面那條後，準備要選擇中間這條路徑時 `(u -> b -> v)`，我們可以將 `10/15` 這條的` 5` 搬移到上面的 `0/9 ( a -> c )`，使其變成 `5/9`，而讓中間這條能夠傳一個`Flow = 5 `至 **v** 再到 **t** ，對於**v**來說，輸入的還是總和還是**10**（守恆）。換個角度想，就好像是轉換跑道，從`s -> b -> v -> a -> c -> t。`​ 所以，在更新時增加的flow (reverse direction)，可以當作是能夠被Cancel掉的quota。\n\n<p align=\"center\">\n<img src=\"/Ford–Fulkerson Algorithm for Maximum Flow Problem/8192498D233C4AD0BAE0735BE71A5BCF.jpg\" width=\"500\" height=\"300\" />\n</p>\n\n---\n\nFrom Geeksforgeeks\n\n<p align=\"center\">\n<img src=\"/Ford–Fulkerson Algorithm for Maximum Flow Problem/D3E155A097BE2558402055553E91AF0B.png\" width=\"500\" height=\"200\" />\n</p>\n\nans: The maximum possible flow in the above graph is 23.\n\n<p align=\"center\">\n<img src=\"/Ford–Fulkerson Algorithm for Maximum Flow Problem/E8F4263CD10E3CF47AEFDE0F3E249A6A.png\" width=\"500\" height=\"200\" />\n</p>\n\n```cpp\n#include <iostream>\n#include <limits.h>\n#include <string.h>\n#include <queue>\nusing namespace std;\n \n// Number of vertices in given graph\n#define V 6\n \n/* Returns true if there is a path from source 's' to sink 't' in\n  residual graph. Also fills parent[] to store the path */\nbool bfs(int rGraph[V][V], int s, int t, int parent[])\n{\n    // Create a visited array and mark all vertices as not visited\n    bool visited[V];\n    memset(visited, 0, sizeof(visited));\n \n    // Create a queue, enqueue source vertex and mark source vertex\n    // as visited\n    queue <int> q;\n    q.push(s);\n    visited[s] = true;\n    parent[s] = -1;\n \n    // Standard BFS Loop\n    while (!q.empty())\n    {\n        int u = q.front();\n        q.pop();\n        \n        // if u = t, because all t's adjacent list elements are zero, no new element push to queue, queue will be empty\n        for (int v=0; v<V; v++)   \n        {\n            if (visited[v]==false && rGraph[u][v] > 0)\n            {\n                q.push(v);\n                parent[v] = u;\n                visited[v] = true;\n            }\n        }\n    }\n \n    // If we reached sink in BFS starting from source, then return\n    // true, else false\n    return (visited[t] == true);\n}\n \n// Returns tne maximum flow from s to t in the given graph\nint fordFulkerson(int graph[V][V], int s, int t)\n{\n    int u, v;\n \n    // Create a residual graph and fill the residual graph with\n    // given capacities in the original graph as residual capacities\n    // in residual graph\n    int rGraph[V][V]; // Residual graph where rGraph[i][j] indicates \n                     // residual capacity of edge from i to j (if there\n                     // is an edge. If rGraph[i][j] is 0, then there is not)  \n    for (u = 0; u < V; u++)\n        for (v = 0; v < V; v++)\n             rGraph[u][v] = graph[u][v];\n \n    int parent[V];  // This array is filled by BFS and to store path\n \n    int max_flow = 0;  // There is no flow initially\n \n    // Augment the flow while there is path from source to sink\n    while (bfs(rGraph, s, t, parent))\n    {\n        // Find minimum residual capacity of the edges along the\n        // path filled by BFS. Or we can say find the maximum flow\n        // through the path found.\n        int path_flow = INT_MAX;\n        for (v=t; v!=s; v=parent[v])\n        {\n            u = parent[v];\n            path_flow = min(path_flow, rGraph[u][v]);\n        }\n \n        // update residual capacities of the edges and reverse edges\n        // along the path\n        for (v=t; v != s; v=parent[v])\n        {\n            u = parent[v];\n            rGraph[u][v] -= path_flow;\n            rGraph[v][u] += path_flow;   \n        }\n \n        // Add path flow to overall flow\n        max_flow += path_flow;\n    }\n \n    // Return the overall flow\n    return max_flow;\n}\n \n// Driver program to test above functions\nint main()\n{\n    // Let us create a graph shown in the above example\n    int graph[V][V] = { {0, 16, 13, 0, 0, 0},\n                        {0, 0, 10, 12, 0, 0},\n                        {0, 4, 0, 0, 14, 0},\n                        {0, 0, 9, 0, 0, 20},\n                        {0, 0, 0, 7, 0, 4},\n                        {0, 0, 0, 0, 0, 0}\n                      };\n \n    cout << \"The maximum possible flow is \" << fordFulkerson(graph, 0, 5);\n \n    return 0;\n}\n```","source":"_posts/Ford–Fulkerson Algorithm for Maximum Flow Problem.md","raw":"title: Ford–Fulkerson Algorithm for Maximum Flow Problem\ntags:\n  - Graph\ncategories:\n  - Algorithms\nmathjax: true\ndate: 2016-12-23 14:13:00\n---\nGiven a graph which represents a flow network where every edge has a capacity. Also given two vertices source **s** and sink **t** in the graph, find the maximum possible flow from s to t with following constraints:\n\na) Flow on an edge doesn’t exceed the given capacity of the edge.\n\nb) Incoming flow is equal to outgoing flow for every vertex except **s** and **t**.\n\n---\n\n首先，給予各點之間的關係（construct an adjacent list)\n基本的找法是： \n\n* 尋找一條從s -\\> t 的有效路徑 (BFS or DFS)\n* 找到此路徑能通過的最小flow，更新Residual Graph\n* 將flow加到 max\\_flow\n* 結束後，return max\\_flow\n\nResidual Graph：一開始先複製original graph，而其點與點之間存放的是“剩餘可以通過的Flow (residual capacity)”。\n<!--more-->\n換句話說，每當找到一條路徑可以是flow通過時，假設某edge的capacity 是 C，而通過的flow 是 F，則將更新此edge於該Residual Graph成 C-F，若是C-F=0，代表此edge不能再被挑選，因為沒有剩餘的quota。\n\n需要注意的是，在更新residual某條edge時，假設是從u -\\> v，則u -\\> v 將被減掉 F，但是反方向 v -\\> u 卻要增加F (起初反方向是0)，這個動作叫做”Cancellation”。\n\n> **各Node的進出要維持不變**\n\n以下圖為例 （整條黑色路徑假設是s -\\> b -\\> v -\\> a -\\> c -\\> t）\n\n現在先看上面那條，若要推送一個10 flow時，在更新 10 flow / 15 capacity這條路徑時`（設u ->`(10/10)` a ->(10/15) v)`，則` u->v`在 Residual Graph上應該被減去10 ，剩餘5 ；但在反方向 `v -> u` 這邊，卻要增加**10**。\n\n之所以如此，我們可以看到若是在選擇上面那條後，準備要選擇中間這條路徑時 `(u -> b -> v)`，我們可以將 `10/15` 這條的` 5` 搬移到上面的 `0/9 ( a -> c )`，使其變成 `5/9`，而讓中間這條能夠傳一個`Flow = 5 `至 **v** 再到 **t** ，對於**v**來說，輸入的還是總和還是**10**（守恆）。換個角度想，就好像是轉換跑道，從`s -> b -> v -> a -> c -> t。`​ 所以，在更新時增加的flow (reverse direction)，可以當作是能夠被Cancel掉的quota。\n\n<p align=\"center\">\n<img src=\"/Ford–Fulkerson Algorithm for Maximum Flow Problem/8192498D233C4AD0BAE0735BE71A5BCF.jpg\" width=\"500\" height=\"300\" />\n</p>\n\n---\n\nFrom Geeksforgeeks\n\n<p align=\"center\">\n<img src=\"/Ford–Fulkerson Algorithm for Maximum Flow Problem/D3E155A097BE2558402055553E91AF0B.png\" width=\"500\" height=\"200\" />\n</p>\n\nans: The maximum possible flow in the above graph is 23.\n\n<p align=\"center\">\n<img src=\"/Ford–Fulkerson Algorithm for Maximum Flow Problem/E8F4263CD10E3CF47AEFDE0F3E249A6A.png\" width=\"500\" height=\"200\" />\n</p>\n\n```cpp\n#include <iostream>\n#include <limits.h>\n#include <string.h>\n#include <queue>\nusing namespace std;\n \n// Number of vertices in given graph\n#define V 6\n \n/* Returns true if there is a path from source 's' to sink 't' in\n  residual graph. Also fills parent[] to store the path */\nbool bfs(int rGraph[V][V], int s, int t, int parent[])\n{\n    // Create a visited array and mark all vertices as not visited\n    bool visited[V];\n    memset(visited, 0, sizeof(visited));\n \n    // Create a queue, enqueue source vertex and mark source vertex\n    // as visited\n    queue <int> q;\n    q.push(s);\n    visited[s] = true;\n    parent[s] = -1;\n \n    // Standard BFS Loop\n    while (!q.empty())\n    {\n        int u = q.front();\n        q.pop();\n        \n        // if u = t, because all t's adjacent list elements are zero, no new element push to queue, queue will be empty\n        for (int v=0; v<V; v++)   \n        {\n            if (visited[v]==false && rGraph[u][v] > 0)\n            {\n                q.push(v);\n                parent[v] = u;\n                visited[v] = true;\n            }\n        }\n    }\n \n    // If we reached sink in BFS starting from source, then return\n    // true, else false\n    return (visited[t] == true);\n}\n \n// Returns tne maximum flow from s to t in the given graph\nint fordFulkerson(int graph[V][V], int s, int t)\n{\n    int u, v;\n \n    // Create a residual graph and fill the residual graph with\n    // given capacities in the original graph as residual capacities\n    // in residual graph\n    int rGraph[V][V]; // Residual graph where rGraph[i][j] indicates \n                     // residual capacity of edge from i to j (if there\n                     // is an edge. If rGraph[i][j] is 0, then there is not)  \n    for (u = 0; u < V; u++)\n        for (v = 0; v < V; v++)\n             rGraph[u][v] = graph[u][v];\n \n    int parent[V];  // This array is filled by BFS and to store path\n \n    int max_flow = 0;  // There is no flow initially\n \n    // Augment the flow while there is path from source to sink\n    while (bfs(rGraph, s, t, parent))\n    {\n        // Find minimum residual capacity of the edges along the\n        // path filled by BFS. Or we can say find the maximum flow\n        // through the path found.\n        int path_flow = INT_MAX;\n        for (v=t; v!=s; v=parent[v])\n        {\n            u = parent[v];\n            path_flow = min(path_flow, rGraph[u][v]);\n        }\n \n        // update residual capacities of the edges and reverse edges\n        // along the path\n        for (v=t; v != s; v=parent[v])\n        {\n            u = parent[v];\n            rGraph[u][v] -= path_flow;\n            rGraph[v][u] += path_flow;   \n        }\n \n        // Add path flow to overall flow\n        max_flow += path_flow;\n    }\n \n    // Return the overall flow\n    return max_flow;\n}\n \n// Driver program to test above functions\nint main()\n{\n    // Let us create a graph shown in the above example\n    int graph[V][V] = { {0, 16, 13, 0, 0, 0},\n                        {0, 0, 10, 12, 0, 0},\n                        {0, 4, 0, 0, 14, 0},\n                        {0, 0, 9, 0, 0, 20},\n                        {0, 0, 0, 7, 0, 4},\n                        {0, 0, 0, 0, 0, 0}\n                      };\n \n    cout << \"The maximum possible flow is \" << fordFulkerson(graph, 0, 5);\n \n    return 0;\n}\n```","slug":"Ford–Fulkerson Algorithm for Maximum Flow Problem","published":1,"updated":"2019-06-21T06:36:40.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxijp52c0006dvw9xnss8y32","content":"<p>Given a graph which represents a flow network where every edge has a capacity. Also given two vertices source <strong>s</strong> and sink <strong>t</strong> in the graph, find the maximum possible flow from s to t with following constraints:</p>\n<p>a) Flow on an edge doesn’t exceed the given capacity of the edge.</p>\n<p>b) Incoming flow is equal to outgoing flow for every vertex except <strong>s</strong> and <strong>t</strong>.</p>\n<hr>\n<p>首先，給予各點之間的關係（construct an adjacent list)<br>基本的找法是： </p>\n<ul>\n<li>尋找一條從s -&gt; t 的有效路徑 (BFS or DFS)</li>\n<li>找到此路徑能通過的最小flow，更新Residual Graph</li>\n<li>將flow加到 max_flow</li>\n<li>結束後，return max_flow</li>\n</ul>\n<p>Residual Graph：一開始先複製original graph，而其點與點之間存放的是“剩餘可以通過的Flow (residual capacity)”。</p>\n<a id=\"more\"></a>\n<p>換句話說，每當找到一條路徑可以是flow通過時，假設某edge的capacity 是 C，而通過的flow 是 F，則將更新此edge於該Residual Graph成 C-F，若是C-F=0，代表此edge不能再被挑選，因為沒有剩餘的quota。</p>\n<p>需要注意的是，在更新residual某條edge時，假設是從u -&gt; v，則u -&gt; v 將被減掉 F，但是反方向 v -&gt; u 卻要增加F (起初反方向是0)，這個動作叫做”Cancellation”。</p>\n<blockquote>\n<p><strong>各Node的進出要維持不變</strong></p>\n</blockquote>\n<p>以下圖為例 （整條黑色路徑假設是s -&gt; b -&gt; v -&gt; a -&gt; c -&gt; t）</p>\n<p>現在先看上面那條，若要推送一個10 flow時，在更新 10 flow / 15 capacity這條路徑時<code>（設u -&gt;</code>(10/10)<code>a -&gt;(10/15) v)</code>，則<code>u-&gt;v</code>在 Residual Graph上應該被減去10 ，剩餘5 ；但在反方向 <code>v -&gt; u</code> 這邊，卻要增加<strong>10</strong>。</p>\n<p>之所以如此，我們可以看到若是在選擇上面那條後，準備要選擇中間這條路徑時 <code>(u -&gt; b -&gt; v)</code>，我們可以將 <code>10/15</code> 這條的<code>5</code> 搬移到上面的 <code>0/9 ( a -&gt; c )</code>，使其變成 <code>5/9</code>，而讓中間這條能夠傳一個<code>Flow = 5</code>至 <strong>v</strong> 再到 <strong>t</strong> ，對於<strong>v</strong>來說，輸入的還是總和還是<strong>10</strong>（守恆）。換個角度想，就好像是轉換跑道，從<code>s -&gt; b -&gt; v -&gt; a -&gt; c -&gt; t。</code>​ 所以，在更新時增加的flow (reverse direction)，可以當作是能夠被Cancel掉的quota。</p>\n<p align=\"center\">\n<img src=\"/Ford–Fulkerson Algorithm for Maximum Flow Problem/8192498D233C4AD0BAE0735BE71A5BCF.jpg\" width=\"500\" height=\"300\">\n</p>\n\n<hr>\n<p>From Geeksforgeeks</p>\n<p align=\"center\">\n<img src=\"/Ford–Fulkerson Algorithm for Maximum Flow Problem/D3E155A097BE2558402055553E91AF0B.png\" width=\"500\" height=\"200\">\n</p>\n\n<p>ans: The maximum possible flow in the above graph is 23.</p>\n<p align=\"center\">\n<img src=\"/Ford–Fulkerson Algorithm for Maximum Flow Problem/E8F4263CD10E3CF47AEFDE0F3E249A6A.png\" width=\"500\" height=\"200\">\n</p>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;limits.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Number of vertices in given graph</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> V 6</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* Returns true if there is a path from source 's' to sink 't' in</span></span><br><span class=\"line\"><span class=\"comment\">  residual graph. Also fills parent[] to store the path */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> rGraph[V][V], <span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> parent[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Create a visited array and mark all vertices as not visited</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> visited[V];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(visited, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(visited));</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Create a queue, enqueue source vertex and mark source vertex</span></span><br><span class=\"line\">    <span class=\"comment\">// as visited</span></span><br><span class=\"line\">    <span class=\"built_in\">queue</span> &lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    visited[s] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    parent[s] = <span class=\"number\">-1</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Standard BFS Loop</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q.front();</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// if u = t, because all t's adjacent list elements are zero, no new element push to queue, queue will be empty</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v=<span class=\"number\">0</span>; v&lt;V; v++)   </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (visited[v]==<span class=\"literal\">false</span> &amp;&amp; rGraph[u][v] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                q.push(v);</span><br><span class=\"line\">                parent[v] = u;</span><br><span class=\"line\">                visited[v] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// If we reached sink in BFS starting from source, then return</span></span><br><span class=\"line\">    <span class=\"comment\">// true, else false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (visited[t] == <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Returns tne maximum flow from s to t in the given graph</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fordFulkerson</span><span class=\"params\">(<span class=\"keyword\">int</span> graph[V][V], <span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Create a residual graph and fill the residual graph with</span></span><br><span class=\"line\">    <span class=\"comment\">// given capacities in the original graph as residual capacities</span></span><br><span class=\"line\">    <span class=\"comment\">// in residual graph</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> rGraph[V][V]; <span class=\"comment\">// Residual graph where rGraph[i][j] indicates </span></span><br><span class=\"line\">                     <span class=\"comment\">// residual capacity of edge from i to j (if there</span></span><br><span class=\"line\">                     <span class=\"comment\">// is an edge. If rGraph[i][j] is 0, then there is not)  </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (u = <span class=\"number\">0</span>; u &lt; V; u++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (v = <span class=\"number\">0</span>; v &lt; V; v++)</span><br><span class=\"line\">             rGraph[u][v] = graph[u][v];</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">int</span> parent[V];  <span class=\"comment\">// This array is filled by BFS and to store path</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">int</span> max_flow = <span class=\"number\">0</span>;  <span class=\"comment\">// There is no flow initially</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Augment the flow while there is path from source to sink</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (bfs(rGraph, s, t, parent))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Find minimum residual capacity of the edges along the</span></span><br><span class=\"line\">        <span class=\"comment\">// path filled by BFS. Or we can say find the maximum flow</span></span><br><span class=\"line\">        <span class=\"comment\">// through the path found.</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> path_flow = INT_MAX;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (v=t; v!=s; v=parent[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            u = parent[v];</span><br><span class=\"line\">            path_flow = min(path_flow, rGraph[u][v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// update residual capacities of the edges and reverse edges</span></span><br><span class=\"line\">        <span class=\"comment\">// along the path</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (v=t; v != s; v=parent[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            u = parent[v];</span><br><span class=\"line\">            rGraph[u][v] -= path_flow;</span><br><span class=\"line\">            rGraph[v][u] += path_flow;   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// Add path flow to overall flow</span></span><br><span class=\"line\">        max_flow += path_flow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Return the overall flow</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_flow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Driver program to test above functions</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Let us create a graph shown in the above example</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> graph[V][V] = &#123; &#123;<span class=\"number\">0</span>, <span class=\"number\">16</span>, <span class=\"number\">13</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">                        &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">                        &#123;<span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">14</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">                        &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">                        &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">7</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">                        &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">                      &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The maximum possible flow is \"</span> &lt;&lt; fordFulkerson(graph, <span class=\"number\">0</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>Given a graph which represents a flow network where every edge has a capacity. Also given two vertices source <strong>s</strong> and sink <strong>t</strong> in the graph, find the maximum possible flow from s to t with following constraints:</p>\n<p>a) Flow on an edge doesn’t exceed the given capacity of the edge.</p>\n<p>b) Incoming flow is equal to outgoing flow for every vertex except <strong>s</strong> and <strong>t</strong>.</p>\n<hr>\n<p>首先，給予各點之間的關係（construct an adjacent list)<br>基本的找法是： </p>\n<ul>\n<li>尋找一條從s -&gt; t 的有效路徑 (BFS or DFS)</li>\n<li>找到此路徑能通過的最小flow，更新Residual Graph</li>\n<li>將flow加到 max_flow</li>\n<li>結束後，return max_flow</li>\n</ul>\n<p>Residual Graph：一開始先複製original graph，而其點與點之間存放的是“剩餘可以通過的Flow (residual capacity)”。</p>","more":"<p>換句話說，每當找到一條路徑可以是flow通過時，假設某edge的capacity 是 C，而通過的flow 是 F，則將更新此edge於該Residual Graph成 C-F，若是C-F=0，代表此edge不能再被挑選，因為沒有剩餘的quota。</p>\n<p>需要注意的是，在更新residual某條edge時，假設是從u -&gt; v，則u -&gt; v 將被減掉 F，但是反方向 v -&gt; u 卻要增加F (起初反方向是0)，這個動作叫做”Cancellation”。</p>\n<blockquote>\n<p><strong>各Node的進出要維持不變</strong></p>\n</blockquote>\n<p>以下圖為例 （整條黑色路徑假設是s -&gt; b -&gt; v -&gt; a -&gt; c -&gt; t）</p>\n<p>現在先看上面那條，若要推送一個10 flow時，在更新 10 flow / 15 capacity這條路徑時<code>（設u -&gt;</code>(10/10)<code>a -&gt;(10/15) v)</code>，則<code>u-&gt;v</code>在 Residual Graph上應該被減去10 ，剩餘5 ；但在反方向 <code>v -&gt; u</code> 這邊，卻要增加<strong>10</strong>。</p>\n<p>之所以如此，我們可以看到若是在選擇上面那條後，準備要選擇中間這條路徑時 <code>(u -&gt; b -&gt; v)</code>，我們可以將 <code>10/15</code> 這條的<code>5</code> 搬移到上面的 <code>0/9 ( a -&gt; c )</code>，使其變成 <code>5/9</code>，而讓中間這條能夠傳一個<code>Flow = 5</code>至 <strong>v</strong> 再到 <strong>t</strong> ，對於<strong>v</strong>來說，輸入的還是總和還是<strong>10</strong>（守恆）。換個角度想，就好像是轉換跑道，從<code>s -&gt; b -&gt; v -&gt; a -&gt; c -&gt; t。</code>​ 所以，在更新時增加的flow (reverse direction)，可以當作是能夠被Cancel掉的quota。</p>\n<p align=\"center\">\n<img src=\"/Ford–Fulkerson Algorithm for Maximum Flow Problem/8192498D233C4AD0BAE0735BE71A5BCF.jpg\" width=\"500\" height=\"300\">\n</p>\n\n<hr>\n<p>From Geeksforgeeks</p>\n<p align=\"center\">\n<img src=\"/Ford–Fulkerson Algorithm for Maximum Flow Problem/D3E155A097BE2558402055553E91AF0B.png\" width=\"500\" height=\"200\">\n</p>\n\n<p>ans: The maximum possible flow in the above graph is 23.</p>\n<p align=\"center\">\n<img src=\"/Ford–Fulkerson Algorithm for Maximum Flow Problem/E8F4263CD10E3CF47AEFDE0F3E249A6A.png\" width=\"500\" height=\"200\">\n</p>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;limits.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Number of vertices in given graph</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> V 6</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/* Returns true if there is a path from source 's' to sink 't' in</span></span><br><span class=\"line\"><span class=\"comment\">  residual graph. Also fills parent[] to store the path */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> rGraph[V][V], <span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> parent[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Create a visited array and mark all vertices as not visited</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> visited[V];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(visited, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(visited));</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Create a queue, enqueue source vertex and mark source vertex</span></span><br><span class=\"line\">    <span class=\"comment\">// as visited</span></span><br><span class=\"line\">    <span class=\"built_in\">queue</span> &lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    visited[s] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    parent[s] = <span class=\"number\">-1</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Standard BFS Loop</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = q.front();</span><br><span class=\"line\">        q.pop();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// if u = t, because all t's adjacent list elements are zero, no new element push to queue, queue will be empty</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> v=<span class=\"number\">0</span>; v&lt;V; v++)   </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (visited[v]==<span class=\"literal\">false</span> &amp;&amp; rGraph[u][v] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                q.push(v);</span><br><span class=\"line\">                parent[v] = u;</span><br><span class=\"line\">                visited[v] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// If we reached sink in BFS starting from source, then return</span></span><br><span class=\"line\">    <span class=\"comment\">// true, else false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (visited[t] == <span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Returns tne maximum flow from s to t in the given graph</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fordFulkerson</span><span class=\"params\">(<span class=\"keyword\">int</span> graph[V][V], <span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Create a residual graph and fill the residual graph with</span></span><br><span class=\"line\">    <span class=\"comment\">// given capacities in the original graph as residual capacities</span></span><br><span class=\"line\">    <span class=\"comment\">// in residual graph</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> rGraph[V][V]; <span class=\"comment\">// Residual graph where rGraph[i][j] indicates </span></span><br><span class=\"line\">                     <span class=\"comment\">// residual capacity of edge from i to j (if there</span></span><br><span class=\"line\">                     <span class=\"comment\">// is an edge. If rGraph[i][j] is 0, then there is not)  </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (u = <span class=\"number\">0</span>; u &lt; V; u++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (v = <span class=\"number\">0</span>; v &lt; V; v++)</span><br><span class=\"line\">             rGraph[u][v] = graph[u][v];</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">int</span> parent[V];  <span class=\"comment\">// This array is filled by BFS and to store path</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">int</span> max_flow = <span class=\"number\">0</span>;  <span class=\"comment\">// There is no flow initially</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Augment the flow while there is path from source to sink</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (bfs(rGraph, s, t, parent))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Find minimum residual capacity of the edges along the</span></span><br><span class=\"line\">        <span class=\"comment\">// path filled by BFS. Or we can say find the maximum flow</span></span><br><span class=\"line\">        <span class=\"comment\">// through the path found.</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> path_flow = INT_MAX;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (v=t; v!=s; v=parent[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            u = parent[v];</span><br><span class=\"line\">            path_flow = min(path_flow, rGraph[u][v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// update residual capacities of the edges and reverse edges</span></span><br><span class=\"line\">        <span class=\"comment\">// along the path</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (v=t; v != s; v=parent[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            u = parent[v];</span><br><span class=\"line\">            rGraph[u][v] -= path_flow;</span><br><span class=\"line\">            rGraph[v][u] += path_flow;   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// Add path flow to overall flow</span></span><br><span class=\"line\">        max_flow += path_flow;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// Return the overall flow</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_flow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Driver program to test above functions</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Let us create a graph shown in the above example</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> graph[V][V] = &#123; &#123;<span class=\"number\">0</span>, <span class=\"number\">16</span>, <span class=\"number\">13</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">                        &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">                        &#123;<span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">14</span>, <span class=\"number\">0</span>&#125;,</span><br><span class=\"line\">                        &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">20</span>&#125;,</span><br><span class=\"line\">                        &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">7</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>&#125;,</span><br><span class=\"line\">                        &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">                      &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"The maximum possible flow is \"</span> &lt;&lt; fordFulkerson(graph, <span class=\"number\">0</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Implicit Treap","mathjax":true,"date":"2016-05-29T06:13:00.000Z","_content":"#### [Hackerrank: Array and simple queries](https://www.hackerrank.com/challenges/array-and-simple-queries/problem)\n\nGiven two numbers *N* and *M*. *N* indicates the number of elements in the array *A[](1 - indexed)* and *M* indicates number of queries. You need to perform two types of queries on the array *A[]*. \n\nYou are given *M* queries. Queries can be of two types, type **1** and type **2**. \n\n* Type 1 queries are represented as `1 i j` : Modify the given array by removing elements from *i* to *j* and adding them to the front.\n* Type 2 queries are represented as `2 i j` : Modify the given array by removing elements from *i* to *j* and adding them to the back.\n\nYour task is to simply print  of the resulting array after the execution of  queries followed by the resulting array. \n<!--more-->\n\n**Note** While adding at back or front the order of elements is preserved. \n\n**Input Format**\n\nFirst line consists of two space-separated integers, *N* and *M*. \nSecond line contains *N* integers, which represent the elements of the array. \n*M* queries follow. Each line contains a query of either *type 1* or *type 2* in the form *i* *j*\n\n**Constraints** \n\n- {% math %}1\\leqslant N, M \\leqslant 10^5{% endmath %}\n- {% math %}1\\leqslant A[i] \\leqslant 10^9{% endmath %}\n- {% math %}1\\leqslant i\\leqslant j\\leqslant N{% endmath %}\n\n**Output Format**\n\nPrint the absolute value i.e. {% math %}abs(A[i]-A[j]){% endmath %}in the first line. \nPrint elements of the resulting array in the second line. Each element should be seperated by a single space.\n\n**Sample Input**\n\n<pre>\n8 4\n1 2 3 4 5 6 7 8\n1 2 4\n2 3 5\n1 4 7\n2 1 4\n</pre>\n\n**Sample Output**\n\n<pre>\n1\n2 3 6 5 7 8 4 1\n</pre>\n\n**Explanation**\n\nGiven array is *{1,2,3,4,5,6,7,8}* .\n\nAfter execution of query 1 2 4 , the array becomes {2,3,4,1,5,6,7,8} . \n\nAfter execution of query 2 3 5 , the array becomes {2,3,6,7,8,4,1,5}. \n\nAfter execution of query 1 4 7, the array becomes {7,8,4,1,2,3,6,5}. \n\nAfter execution of query 2 1 4, the array becomes *{2,3,6,5,7,8,4,1}*. \n\nNow {% math %}|A[1]-A[N]|{% endmath %} is {% math %}|(2-1)|{% endmath %} i.e. {% math %}1{% endmath %} and the array is 23657841\n\n```c\n#include <iostream>\nusing namespace std;\n\nstruct Node{\n\t/*  \n\ttreap = tree + heap\n\t各Node的priority是隨機給的，以此建立一個穩定的log(n) tree\n\tparent.priority<children.priority\n\t*/\n\tint priority;\n\t//存取array element\n\tint value;\n\t/* the method using here is also called implicit treap, since we store size not index\n\t   size = the number of nodes below the nodes + 1\n\t   \t    = left.size + right.size + 1\n\t   利用size來得到index(所以才叫implicit)，若為nullptr則為0，若為葉子則為1，透過Inorder使treap取代一array\n\t*/\n\tint size;\n\t//left tree and right tree\n\tNode *l, *r;\n};\n//return the size of the node\nint sz(Node *t)\n{\n\treturn t? t->size:0;\n}\n//update size of the node when split or merge is done\nvoid update_size(Node *t)\n{\n\tif(t) t->size = sz(t->l)+1+sz(t->r);\n}\n\n\n//used to split a tree into left and right tree\n//left contains index from 0 ~ key, right contains index form key+1 ~ N\nvoid split(Node *t, int key, Node *&left, Node *&right, int &add)\n{\n\tif(t==nullptr){\n\t\tleft = right = nullptr;\n\t\treturn;\n\t} \n\t//需考慮到因為看整棵tree是利用inorder，所以右邊的tree還需要加root的pos才是對的\n\tint cur_pos = add+sz(t->l)+1;\n\t//左邊的樹有包含到該key\n\t//t為subtree，需要被檢查的部分，利用copy pointer而已\n\n\t//因為t的left tree 必定小於key，所以傳遞t的right tree到下一個function以檢查，而因為此t小於\n\t//等於key，所以屬於left的\n\tif(cur_pos<=key) add = cur_pos, split(t->r, key, t->r, right, add),  left=t;\n\t//因為t大於key，所以屬於right的\n\telse split(t->l, key, left, t->l, add), right = t;\n\t//完成merge後需要更新該節點的size\n\tupdate_size(t);\n}\n\n//merge left tree and right into a tree\nvoid merge(Node *&t, Node *left, Node *right)\n{\n\tif(!left || !right) t = left?left:right;\n\t//merge時，需要考慮到該treap是heap，所以組合時仍需要考慮priorty，以維持該tree為log(n)，\n\t//而merge時， 已確信兩個left and right are in correct order，\n\t//而left之index在right的index 之前，透過交換left and right這個來解本題的move front or back\n\telse if(left->priority<=right->priority) merge(left->r, left->r, right), t = left;\n\telse merge(right->l, left, right->l), t = right;\n\tupdate_size(t);\n}\n\nvoid insert(Node *&t, int pos, int value)\n{\n\tNode *left, *right;\n\tint add=0;\n\tsplit(t, pos-1, left, right, add);\n\n\tNode *newnode = new Node;\n\tnewnode->value = value;\n\tnewnode->size = 1;\n\tnewnode->priority = int(rand());\n\tnewnode->l = nullptr;\n\tnewnode->r = nullptr;\n\n\tt = nullptr;\n\tNode  *t1;\n\tmerge(t1, left, newnode);\n\tmerge(t, t1, right);\n}\n\nvoid inOrder(Node *root)\n{\n    if(root!=nullptr){\n        inOrder(root->l);\n        cout<<root->value<<\" \";\n        inOrder(root->r);\n    }\n}\n\nint main()\n{\n\tint number;\n\tint total_cmd;\n\tcin>>number;\n\tcin>>total_cmd;\n\n\tNode *head = nullptr;\n\tfor(int j=1; j<=number; j++){\n\t\tint input;\n\t\tcin>>input;\n\t\tinsert(head, j, input);\n\t}\n\n\twhile(total_cmd>0){\n\t\tint cmd;\n\t\t//left index and right index\n\t\tint left_x, right_x;\n\t\tcin>>cmd;\n\t\tcin>>left_x;\n\t\tcin>>right_x;\n\n\t\tNode *right = nullptr, *left = nullptr, *mid = nullptr;\n\t\tNode *mid_t = nullptr;\n\t\tint add=0;\n\n\t\tsplit(head, left_x-1, left, mid_t, add);\n\t\tsplit(mid_t, right_x, mid, right, add);\n\t\t\n\n\t\thead = nullptr;\n\t\tNode *result1 = nullptr;\n\t\tswitch(cmd){\n\t\t\tcase 1:\n\t\t\t\tmerge(result1, mid, left);\n\t\t\t\tmerge(head, result1, right);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tmerge(result1, left, right);\n\t\t\t\tmerge(head, result1, mid);\n\t\t\t\tbreak;\n\t\t}\n\t\ttotal_cmd--;\n\t}\n\n\t\tint value_1=0;\n\t\tint value_2=0;\n\t\tNode *tmp_1 = head;\n\t\tNode *tmp_2 = head;\n\t\twhile(tmp_1!=nullptr){\n\t\t\tvalue_1 = tmp_1->value;\n\t\t\ttmp_1 = tmp_1->l;\n\t\t}\n\t\twhile(tmp_2!=nullptr){\n\t\t\tvalue_2 = tmp_2->value;\n\t\t\ttmp_2 = tmp_2->r;\n\t\t}\n\t\tif(value_1>=value_2) cout<<value_1-value_2<<endl;\n\t\telse cout<<value_2-value_1<<endl;\n\t\t\n\t\tinOrder(head);\n\t\tcout<<endl;\n\treturn 0;\n\n}\n```\n\nreference: <https://threads-iiith.quora.com/Treaps-One-Tree-to-Rule-em-all-Part-2>","source":"_posts/Implicit Treap.md","raw":"title: Implicit Treap\ntags:\n  - Data Structures\n  - Hackerrank\ncategories:\n  - Algorithms\nmathjax: true\ndate: 2016-05-29 14:13:00\n---\n#### [Hackerrank: Array and simple queries](https://www.hackerrank.com/challenges/array-and-simple-queries/problem)\n\nGiven two numbers *N* and *M*. *N* indicates the number of elements in the array *A[](1 - indexed)* and *M* indicates number of queries. You need to perform two types of queries on the array *A[]*. \n\nYou are given *M* queries. Queries can be of two types, type **1** and type **2**. \n\n* Type 1 queries are represented as `1 i j` : Modify the given array by removing elements from *i* to *j* and adding them to the front.\n* Type 2 queries are represented as `2 i j` : Modify the given array by removing elements from *i* to *j* and adding them to the back.\n\nYour task is to simply print  of the resulting array after the execution of  queries followed by the resulting array. \n<!--more-->\n\n**Note** While adding at back or front the order of elements is preserved. \n\n**Input Format**\n\nFirst line consists of two space-separated integers, *N* and *M*. \nSecond line contains *N* integers, which represent the elements of the array. \n*M* queries follow. Each line contains a query of either *type 1* or *type 2* in the form *i* *j*\n\n**Constraints** \n\n- {% math %}1\\leqslant N, M \\leqslant 10^5{% endmath %}\n- {% math %}1\\leqslant A[i] \\leqslant 10^9{% endmath %}\n- {% math %}1\\leqslant i\\leqslant j\\leqslant N{% endmath %}\n\n**Output Format**\n\nPrint the absolute value i.e. {% math %}abs(A[i]-A[j]){% endmath %}in the first line. \nPrint elements of the resulting array in the second line. Each element should be seperated by a single space.\n\n**Sample Input**\n\n<pre>\n8 4\n1 2 3 4 5 6 7 8\n1 2 4\n2 3 5\n1 4 7\n2 1 4\n</pre>\n\n**Sample Output**\n\n<pre>\n1\n2 3 6 5 7 8 4 1\n</pre>\n\n**Explanation**\n\nGiven array is *{1,2,3,4,5,6,7,8}* .\n\nAfter execution of query 1 2 4 , the array becomes {2,3,4,1,5,6,7,8} . \n\nAfter execution of query 2 3 5 , the array becomes {2,3,6,7,8,4,1,5}. \n\nAfter execution of query 1 4 7, the array becomes {7,8,4,1,2,3,6,5}. \n\nAfter execution of query 2 1 4, the array becomes *{2,3,6,5,7,8,4,1}*. \n\nNow {% math %}|A[1]-A[N]|{% endmath %} is {% math %}|(2-1)|{% endmath %} i.e. {% math %}1{% endmath %} and the array is 23657841\n\n```c\n#include <iostream>\nusing namespace std;\n\nstruct Node{\n\t/*  \n\ttreap = tree + heap\n\t各Node的priority是隨機給的，以此建立一個穩定的log(n) tree\n\tparent.priority<children.priority\n\t*/\n\tint priority;\n\t//存取array element\n\tint value;\n\t/* the method using here is also called implicit treap, since we store size not index\n\t   size = the number of nodes below the nodes + 1\n\t   \t    = left.size + right.size + 1\n\t   利用size來得到index(所以才叫implicit)，若為nullptr則為0，若為葉子則為1，透過Inorder使treap取代一array\n\t*/\n\tint size;\n\t//left tree and right tree\n\tNode *l, *r;\n};\n//return the size of the node\nint sz(Node *t)\n{\n\treturn t? t->size:0;\n}\n//update size of the node when split or merge is done\nvoid update_size(Node *t)\n{\n\tif(t) t->size = sz(t->l)+1+sz(t->r);\n}\n\n\n//used to split a tree into left and right tree\n//left contains index from 0 ~ key, right contains index form key+1 ~ N\nvoid split(Node *t, int key, Node *&left, Node *&right, int &add)\n{\n\tif(t==nullptr){\n\t\tleft = right = nullptr;\n\t\treturn;\n\t} \n\t//需考慮到因為看整棵tree是利用inorder，所以右邊的tree還需要加root的pos才是對的\n\tint cur_pos = add+sz(t->l)+1;\n\t//左邊的樹有包含到該key\n\t//t為subtree，需要被檢查的部分，利用copy pointer而已\n\n\t//因為t的left tree 必定小於key，所以傳遞t的right tree到下一個function以檢查，而因為此t小於\n\t//等於key，所以屬於left的\n\tif(cur_pos<=key) add = cur_pos, split(t->r, key, t->r, right, add),  left=t;\n\t//因為t大於key，所以屬於right的\n\telse split(t->l, key, left, t->l, add), right = t;\n\t//完成merge後需要更新該節點的size\n\tupdate_size(t);\n}\n\n//merge left tree and right into a tree\nvoid merge(Node *&t, Node *left, Node *right)\n{\n\tif(!left || !right) t = left?left:right;\n\t//merge時，需要考慮到該treap是heap，所以組合時仍需要考慮priorty，以維持該tree為log(n)，\n\t//而merge時， 已確信兩個left and right are in correct order，\n\t//而left之index在right的index 之前，透過交換left and right這個來解本題的move front or back\n\telse if(left->priority<=right->priority) merge(left->r, left->r, right), t = left;\n\telse merge(right->l, left, right->l), t = right;\n\tupdate_size(t);\n}\n\nvoid insert(Node *&t, int pos, int value)\n{\n\tNode *left, *right;\n\tint add=0;\n\tsplit(t, pos-1, left, right, add);\n\n\tNode *newnode = new Node;\n\tnewnode->value = value;\n\tnewnode->size = 1;\n\tnewnode->priority = int(rand());\n\tnewnode->l = nullptr;\n\tnewnode->r = nullptr;\n\n\tt = nullptr;\n\tNode  *t1;\n\tmerge(t1, left, newnode);\n\tmerge(t, t1, right);\n}\n\nvoid inOrder(Node *root)\n{\n    if(root!=nullptr){\n        inOrder(root->l);\n        cout<<root->value<<\" \";\n        inOrder(root->r);\n    }\n}\n\nint main()\n{\n\tint number;\n\tint total_cmd;\n\tcin>>number;\n\tcin>>total_cmd;\n\n\tNode *head = nullptr;\n\tfor(int j=1; j<=number; j++){\n\t\tint input;\n\t\tcin>>input;\n\t\tinsert(head, j, input);\n\t}\n\n\twhile(total_cmd>0){\n\t\tint cmd;\n\t\t//left index and right index\n\t\tint left_x, right_x;\n\t\tcin>>cmd;\n\t\tcin>>left_x;\n\t\tcin>>right_x;\n\n\t\tNode *right = nullptr, *left = nullptr, *mid = nullptr;\n\t\tNode *mid_t = nullptr;\n\t\tint add=0;\n\n\t\tsplit(head, left_x-1, left, mid_t, add);\n\t\tsplit(mid_t, right_x, mid, right, add);\n\t\t\n\n\t\thead = nullptr;\n\t\tNode *result1 = nullptr;\n\t\tswitch(cmd){\n\t\t\tcase 1:\n\t\t\t\tmerge(result1, mid, left);\n\t\t\t\tmerge(head, result1, right);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tmerge(result1, left, right);\n\t\t\t\tmerge(head, result1, mid);\n\t\t\t\tbreak;\n\t\t}\n\t\ttotal_cmd--;\n\t}\n\n\t\tint value_1=0;\n\t\tint value_2=0;\n\t\tNode *tmp_1 = head;\n\t\tNode *tmp_2 = head;\n\t\twhile(tmp_1!=nullptr){\n\t\t\tvalue_1 = tmp_1->value;\n\t\t\ttmp_1 = tmp_1->l;\n\t\t}\n\t\twhile(tmp_2!=nullptr){\n\t\t\tvalue_2 = tmp_2->value;\n\t\t\ttmp_2 = tmp_2->r;\n\t\t}\n\t\tif(value_1>=value_2) cout<<value_1-value_2<<endl;\n\t\telse cout<<value_2-value_1<<endl;\n\t\t\n\t\tinOrder(head);\n\t\tcout<<endl;\n\treturn 0;\n\n}\n```\n\nreference: <https://threads-iiith.quora.com/Treaps-One-Tree-to-Rule-em-all-Part-2>","slug":"Implicit Treap","published":1,"updated":"2019-06-21T06:36:40.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxijp5330008dvw9pgfg33xo","content":"<h4 id=\"Hackerrank-Array-and-simple-queries\"><a href=\"#Hackerrank-Array-and-simple-queries\" class=\"headerlink\" title=\"Hackerrank: Array and simple queries\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaGFja2VycmFuay5jb20vY2hhbGxlbmdlcy9hcnJheS1hbmQtc2ltcGxlLXF1ZXJpZXMvcHJvYmxlbQ==\" title=\"https://www.hackerrank.com/challenges/array-and-simple-queries/problem\">Hackerrank: Array and simple queries<i class=\"fa fa-external-link\"></i></span></h4><p>Given two numbers <em>N</em> and <em>M</em>. <em>N</em> indicates the number of elements in the array <em>A[](1 - indexed)</em> and <em>M</em> indicates number of queries. You need to perform two types of queries on the array <em>A[]</em>. </p>\n<p>You are given <em>M</em> queries. Queries can be of two types, type <strong>1</strong> and type <strong>2</strong>. </p>\n<ul>\n<li>Type 1 queries are represented as <code>1 i j</code> : Modify the given array by removing elements from <em>i</em> to <em>j</em> and adding them to the front.</li>\n<li>Type 2 queries are represented as <code>2 i j</code> : Modify the given array by removing elements from <em>i</em> to <em>j</em> and adding them to the back.</li>\n</ul>\n<p>Your task is to simply print  of the resulting array after the execution of  queries followed by the resulting array. </p>\n<a id=\"more\"></a>\n\n<p><strong>Note</strong> While adding at back or front the order of elements is preserved. </p>\n<p><strong>Input Format</strong></p>\n<p>First line consists of two space-separated integers, <em>N</em> and <em>M</em>. \nSecond line contains <em>N</em> integers, which represent the elements of the array.<br><em>M</em> queries follow. Each line contains a query of either <em>type 1</em> or <em>type 2</em> in the form <em>i</em> <em>j</em></p>\n<p><strong>Constraints</strong> </p>\n<ul>\n<li><span>$1\\leqslant N, M \\leqslant 10^5$</span><!-- Has MathJax --></li>\n<li><span>$1\\leqslant A[i] \\leqslant 10^9$</span><!-- Has MathJax --></li>\n<li><span>$1\\leqslant i\\leqslant j\\leqslant N$</span><!-- Has MathJax -->\n\n</li>\n</ul>\n<p><strong>Output Format</strong></p>\n<p>Print the absolute value i.e. <span>$abs(A[i]-A[j])$</span><!-- Has MathJax -->in the first line.<br>Print elements of the resulting array in the second line. Each element should be seperated by a single space.</p>\n<p><strong>Sample Input</strong></p>\n<pre>\n8 4\n1 2 3 4 5 6 7 8\n1 2 4\n2 3 5\n1 4 7\n2 1 4\n</pre>\n\n<p><strong>Sample Output</strong></p>\n<pre>\n1\n2 3 6 5 7 8 4 1\n</pre>\n\n<p><strong>Explanation</strong></p>\n<p>Given array is <em>{1,2,3,4,5,6,7,8}</em> .</p>\n<p>After execution of query 1 2 4 , the array becomes {2,3,4,1,5,6,7,8} . </p>\n<p>After execution of query 2 3 5 , the array becomes {2,3,6,7,8,4,1,5}. </p>\n<p>After execution of query 1 4 7, the array becomes {7,8,4,1,2,3,6,5}. </p>\n<p>After execution of query 2 1 4, the array becomes <em>{2,3,6,5,7,8,4,1}</em>. </p>\n<p>Now <span>$|A[1]-A[N]|$</span><!-- Has MathJax --> is <span>$|(2-1)|$</span><!-- Has MathJax --> i.e. <span>$1$</span><!-- Has MathJax --> and the array is 23657841</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">/*  </span></span><br><span class=\"line\"><span class=\"comment\">\ttreap = tree + heap</span></span><br><span class=\"line\"><span class=\"comment\">\t各Node的priority是隨機給的，以此建立一個穩定的log(n) tree</span></span><br><span class=\"line\"><span class=\"comment\">\tparent.priority&lt;children.priority</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> priority;</span><br><span class=\"line\">\t<span class=\"comment\">//存取array element</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> value;</span><br><span class=\"line\">\t<span class=\"comment\">/* the method using here is also called implicit treap, since we store size not index</span></span><br><span class=\"line\"><span class=\"comment\">\t   size = the number of nodes below the nodes + 1</span></span><br><span class=\"line\"><span class=\"comment\">\t   \t    = left.size + right.size + 1</span></span><br><span class=\"line\"><span class=\"comment\">\t   利用size來得到index(所以才叫implicit)，若為nullptr則為0，若為葉子則為1，透過Inorder使treap取代一array</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> size;</span><br><span class=\"line\">\t<span class=\"comment\">//left tree and right tree</span></span><br><span class=\"line\">\tNode *l, *r;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//return the size of the node</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sz</span><span class=\"params\">(Node *t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t? t-&gt;size:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//update size of the node when split or merge is done</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update_size</span><span class=\"params\">(Node *t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(t) t-&gt;size = sz(t-&gt;l)+<span class=\"number\">1</span>+sz(t-&gt;r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//used to split a tree into left and right tree</span></span><br><span class=\"line\"><span class=\"comment\">//left contains index from 0 ~ key, right contains index form key+1 ~ N</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">split</span><span class=\"params\">(Node *t, <span class=\"keyword\">int</span> key, Node *&amp;left, Node *&amp;right, <span class=\"keyword\">int</span> &amp;add)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(t==<span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">\t\tleft = right = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"comment\">//需考慮到因為看整棵tree是利用inorder，所以右邊的tree還需要加root的pos才是對的</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cur_pos = add+sz(t-&gt;l)+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//左邊的樹有包含到該key</span></span><br><span class=\"line\">\t<span class=\"comment\">//t為subtree，需要被檢查的部分，利用copy pointer而已</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//因為t的left tree 必定小於key，所以傳遞t的right tree到下一個function以檢查，而因為此t小於</span></span><br><span class=\"line\">\t<span class=\"comment\">//等於key，所以屬於left的</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(cur_pos&lt;=key) add = cur_pos, split(t-&gt;r, key, t-&gt;r, right, add),  left=t;</span><br><span class=\"line\">\t<span class=\"comment\">//因為t大於key，所以屬於right的</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> split(t-&gt;l, key, left, t-&gt;l, add), right = t;</span><br><span class=\"line\">\t<span class=\"comment\">//完成merge後需要更新該節點的size</span></span><br><span class=\"line\">\tupdate_size(t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//merge left tree and right into a tree</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(Node *&amp;t, Node *left, Node *right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!left || !right) t = left?left:right;</span><br><span class=\"line\">\t<span class=\"comment\">//merge時，需要考慮到該treap是heap，所以組合時仍需要考慮priorty，以維持該tree為log(n)，</span></span><br><span class=\"line\">\t<span class=\"comment\">//而merge時， 已確信兩個left and right are in correct order，</span></span><br><span class=\"line\">\t<span class=\"comment\">//而left之index在right的index 之前，透過交換left and right這個來解本題的move front or back</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(left-&gt;priority&lt;=right-&gt;priority) merge(left-&gt;r, left-&gt;r, right), t = left;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> merge(right-&gt;l, left, right-&gt;l), t = right;</span><br><span class=\"line\">\tupdate_size(t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Node *&amp;t, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *left, *right;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> add=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tsplit(t, pos<span class=\"number\">-1</span>, left, right, add);</span><br><span class=\"line\"></span><br><span class=\"line\">\tNode *newnode = <span class=\"keyword\">new</span> Node;</span><br><span class=\"line\">\tnewnode-&gt;value = value;</span><br><span class=\"line\">\tnewnode-&gt;size = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tnewnode-&gt;priority = <span class=\"keyword\">int</span>(rand());</span><br><span class=\"line\">\tnewnode-&gt;l = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\tnewnode-&gt;r = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tt = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\tNode  *t1;</span><br><span class=\"line\">\tmerge(t1, left, newnode);</span><br><span class=\"line\">\tmerge(t, t1, right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">(Node *root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root!=<span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">        inOrder(root-&gt;l);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;root-&gt;value&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        inOrder(root-&gt;r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> number;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> total_cmd;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;number;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;total_cmd;</span><br><span class=\"line\"></span><br><span class=\"line\">\tNode *head = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=number; j++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> input;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;input;</span><br><span class=\"line\">\t\tinsert(head, j, input);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(total_cmd&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> cmd;</span><br><span class=\"line\">\t\t<span class=\"comment\">//left index and right index</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> left_x, right_x;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;cmd;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;left_x;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;right_x;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tNode *right = <span class=\"literal\">nullptr</span>, *left = <span class=\"literal\">nullptr</span>, *mid = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\tNode *<span class=\"keyword\">mid_t</span> = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> add=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsplit(head, left_x<span class=\"number\">-1</span>, left, <span class=\"keyword\">mid_t</span>, add);</span><br><span class=\"line\">\t\tsplit(<span class=\"keyword\">mid_t</span>, right_x, mid, right, add);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t\thead = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\tNode *result1 = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span>(cmd)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\tmerge(result1, mid, left);</span><br><span class=\"line\">\t\t\t\tmerge(head, result1, right);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t\tmerge(result1, left, right);</span><br><span class=\"line\">\t\t\t\tmerge(head, result1, mid);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttotal_cmd--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> value_1=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> value_2=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tNode *tmp_1 = head;</span><br><span class=\"line\">\t\tNode *tmp_2 = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(tmp_1!=<span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">\t\t\tvalue_1 = tmp_1-&gt;value;</span><br><span class=\"line\">\t\t\ttmp_1 = tmp_1-&gt;l;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(tmp_2!=<span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">\t\t\tvalue_2 = tmp_2-&gt;value;</span><br><span class=\"line\">\t\t\ttmp_2 = tmp_2-&gt;r;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(value_1&gt;=value_2) <span class=\"built_in\">cout</span>&lt;&lt;value_1-value_2&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;value_2-value_1&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tinOrder(head);</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>reference: <span class=\"exturl\" data-url=\"aHR0cHM6Ly90aHJlYWRzLWlpaXRoLnF1b3JhLmNvbS9UcmVhcHMtT25lLVRyZWUtdG8tUnVsZS1lbS1hbGwtUGFydC0y\" title=\"https://threads-iiith.quora.com/Treaps-One-Tree-to-Rule-em-all-Part-2\">https://threads-iiith.quora.com/Treaps-One-Tree-to-Rule-em-all-Part-2<i class=\"fa fa-external-link\"></i></span></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"Hackerrank-Array-and-simple-queries\"><a href=\"#Hackerrank-Array-and-simple-queries\" class=\"headerlink\" title=\"Hackerrank: Array and simple queries\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaGFja2VycmFuay5jb20vY2hhbGxlbmdlcy9hcnJheS1hbmQtc2ltcGxlLXF1ZXJpZXMvcHJvYmxlbQ==\" title=\"https://www.hackerrank.com/challenges/array-and-simple-queries/problem\">Hackerrank: Array and simple queries<i class=\"fa fa-external-link\"></i></span></h4><p>Given two numbers <em>N</em> and <em>M</em>. <em>N</em> indicates the number of elements in the array <em>A[](1 - indexed)</em> and <em>M</em> indicates number of queries. You need to perform two types of queries on the array <em>A[]</em>. </p>\n<p>You are given <em>M</em> queries. Queries can be of two types, type <strong>1</strong> and type <strong>2</strong>. </p>\n<ul>\n<li>Type 1 queries are represented as <code>1 i j</code> : Modify the given array by removing elements from <em>i</em> to <em>j</em> and adding them to the front.</li>\n<li>Type 2 queries are represented as <code>2 i j</code> : Modify the given array by removing elements from <em>i</em> to <em>j</em> and adding them to the back.</li>\n</ul>\n<p>Your task is to simply print  of the resulting array after the execution of  queries followed by the resulting array. </p>","more":"<p><strong>Note</strong> While adding at back or front the order of elements is preserved. </p>\n<p><strong>Input Format</strong></p>\n<p>First line consists of two space-separated integers, <em>N</em> and <em>M</em>. \nSecond line contains <em>N</em> integers, which represent the elements of the array.<br><em>M</em> queries follow. Each line contains a query of either <em>type 1</em> or <em>type 2</em> in the form <em>i</em> <em>j</em></p>\n<p><strong>Constraints</strong> </p>\n<ul>\n<li><span>$1\\leqslant N, M \\leqslant 10^5$</span><!-- Has MathJax --></li>\n<li><span>$1\\leqslant A[i] \\leqslant 10^9$</span><!-- Has MathJax --></li>\n<li><span>$1\\leqslant i\\leqslant j\\leqslant N$</span><!-- Has MathJax -->\n\n</li>\n</ul>\n<p><strong>Output Format</strong></p>\n<p>Print the absolute value i.e. <span>$abs(A[i]-A[j])$</span><!-- Has MathJax -->in the first line.<br>Print elements of the resulting array in the second line. Each element should be seperated by a single space.</p>\n<p><strong>Sample Input</strong></p>\n<pre>\n8 4\n1 2 3 4 5 6 7 8\n1 2 4\n2 3 5\n1 4 7\n2 1 4\n</pre>\n\n<p><strong>Sample Output</strong></p>\n<pre>\n1\n2 3 6 5 7 8 4 1\n</pre>\n\n<p><strong>Explanation</strong></p>\n<p>Given array is <em>{1,2,3,4,5,6,7,8}</em> .</p>\n<p>After execution of query 1 2 4 , the array becomes {2,3,4,1,5,6,7,8} . </p>\n<p>After execution of query 2 3 5 , the array becomes {2,3,6,7,8,4,1,5}. </p>\n<p>After execution of query 1 4 7, the array becomes {7,8,4,1,2,3,6,5}. </p>\n<p>After execution of query 2 1 4, the array becomes <em>{2,3,6,5,7,8,4,1}</em>. </p>\n<p>Now <span>$|A[1]-A[N]|$</span><!-- Has MathJax --> is <span>$|(2-1)|$</span><!-- Has MathJax --> i.e. <span>$1$</span><!-- Has MathJax --> and the array is 23657841</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">/*  </span></span><br><span class=\"line\"><span class=\"comment\">\ttreap = tree + heap</span></span><br><span class=\"line\"><span class=\"comment\">\t各Node的priority是隨機給的，以此建立一個穩定的log(n) tree</span></span><br><span class=\"line\"><span class=\"comment\">\tparent.priority&lt;children.priority</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> priority;</span><br><span class=\"line\">\t<span class=\"comment\">//存取array element</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> value;</span><br><span class=\"line\">\t<span class=\"comment\">/* the method using here is also called implicit treap, since we store size not index</span></span><br><span class=\"line\"><span class=\"comment\">\t   size = the number of nodes below the nodes + 1</span></span><br><span class=\"line\"><span class=\"comment\">\t   \t    = left.size + right.size + 1</span></span><br><span class=\"line\"><span class=\"comment\">\t   利用size來得到index(所以才叫implicit)，若為nullptr則為0，若為葉子則為1，透過Inorder使treap取代一array</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> size;</span><br><span class=\"line\">\t<span class=\"comment\">//left tree and right tree</span></span><br><span class=\"line\">\tNode *l, *r;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//return the size of the node</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">sz</span><span class=\"params\">(Node *t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t? t-&gt;size:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//update size of the node when split or merge is done</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update_size</span><span class=\"params\">(Node *t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(t) t-&gt;size = sz(t-&gt;l)+<span class=\"number\">1</span>+sz(t-&gt;r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//used to split a tree into left and right tree</span></span><br><span class=\"line\"><span class=\"comment\">//left contains index from 0 ~ key, right contains index form key+1 ~ N</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">split</span><span class=\"params\">(Node *t, <span class=\"keyword\">int</span> key, Node *&amp;left, Node *&amp;right, <span class=\"keyword\">int</span> &amp;add)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(t==<span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">\t\tleft = right = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"comment\">//需考慮到因為看整棵tree是利用inorder，所以右邊的tree還需要加root的pos才是對的</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cur_pos = add+sz(t-&gt;l)+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//左邊的樹有包含到該key</span></span><br><span class=\"line\">\t<span class=\"comment\">//t為subtree，需要被檢查的部分，利用copy pointer而已</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//因為t的left tree 必定小於key，所以傳遞t的right tree到下一個function以檢查，而因為此t小於</span></span><br><span class=\"line\">\t<span class=\"comment\">//等於key，所以屬於left的</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(cur_pos&lt;=key) add = cur_pos, split(t-&gt;r, key, t-&gt;r, right, add),  left=t;</span><br><span class=\"line\">\t<span class=\"comment\">//因為t大於key，所以屬於right的</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> split(t-&gt;l, key, left, t-&gt;l, add), right = t;</span><br><span class=\"line\">\t<span class=\"comment\">//完成merge後需要更新該節點的size</span></span><br><span class=\"line\">\tupdate_size(t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//merge left tree and right into a tree</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(Node *&amp;t, Node *left, Node *right)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!left || !right) t = left?left:right;</span><br><span class=\"line\">\t<span class=\"comment\">//merge時，需要考慮到該treap是heap，所以組合時仍需要考慮priorty，以維持該tree為log(n)，</span></span><br><span class=\"line\">\t<span class=\"comment\">//而merge時， 已確信兩個left and right are in correct order，</span></span><br><span class=\"line\">\t<span class=\"comment\">//而left之index在right的index 之前，透過交換left and right這個來解本題的move front or back</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(left-&gt;priority&lt;=right-&gt;priority) merge(left-&gt;r, left-&gt;r, right), t = left;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> merge(right-&gt;l, left, right-&gt;l), t = right;</span><br><span class=\"line\">\tupdate_size(t);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Node *&amp;t, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode *left, *right;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> add=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tsplit(t, pos<span class=\"number\">-1</span>, left, right, add);</span><br><span class=\"line\"></span><br><span class=\"line\">\tNode *newnode = <span class=\"keyword\">new</span> Node;</span><br><span class=\"line\">\tnewnode-&gt;value = value;</span><br><span class=\"line\">\tnewnode-&gt;size = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tnewnode-&gt;priority = <span class=\"keyword\">int</span>(rand());</span><br><span class=\"line\">\tnewnode-&gt;l = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\tnewnode-&gt;r = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tt = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\tNode  *t1;</span><br><span class=\"line\">\tmerge(t1, left, newnode);</span><br><span class=\"line\">\tmerge(t, t1, right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inOrder</span><span class=\"params\">(Node *root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root!=<span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">        inOrder(root-&gt;l);</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;root-&gt;value&lt;&lt;<span class=\"string\">\" \"</span>;</span><br><span class=\"line\">        inOrder(root-&gt;r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> number;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> total_cmd;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;number;</span><br><span class=\"line\">\t<span class=\"built_in\">cin</span>&gt;&gt;total_cmd;</span><br><span class=\"line\"></span><br><span class=\"line\">\tNode *head = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=number; j++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> input;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;input;</span><br><span class=\"line\">\t\tinsert(head, j, input);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(total_cmd&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> cmd;</span><br><span class=\"line\">\t\t<span class=\"comment\">//left index and right index</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> left_x, right_x;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;cmd;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;left_x;</span><br><span class=\"line\">\t\t<span class=\"built_in\">cin</span>&gt;&gt;right_x;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tNode *right = <span class=\"literal\">nullptr</span>, *left = <span class=\"literal\">nullptr</span>, *mid = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\tNode *<span class=\"keyword\">mid_t</span> = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> add=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsplit(head, left_x<span class=\"number\">-1</span>, left, <span class=\"keyword\">mid_t</span>, add);</span><br><span class=\"line\">\t\tsplit(<span class=\"keyword\">mid_t</span>, right_x, mid, right, add);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t\thead = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\tNode *result1 = <span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span>(cmd)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\tmerge(result1, mid, left);</span><br><span class=\"line\">\t\t\t\tmerge(head, result1, right);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t\tmerge(result1, left, right);</span><br><span class=\"line\">\t\t\t\tmerge(head, result1, mid);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttotal_cmd--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> value_1=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> value_2=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tNode *tmp_1 = head;</span><br><span class=\"line\">\t\tNode *tmp_2 = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(tmp_1!=<span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">\t\t\tvalue_1 = tmp_1-&gt;value;</span><br><span class=\"line\">\t\t\ttmp_1 = tmp_1-&gt;l;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(tmp_2!=<span class=\"literal\">nullptr</span>)&#123;</span><br><span class=\"line\">\t\t\tvalue_2 = tmp_2-&gt;value;</span><br><span class=\"line\">\t\t\ttmp_2 = tmp_2-&gt;r;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(value_1&gt;=value_2) <span class=\"built_in\">cout</span>&lt;&lt;value_1-value_2&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"built_in\">cout</span>&lt;&lt;value_2-value_1&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tinOrder(head);</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>reference: <span class=\"exturl\" data-url=\"aHR0cHM6Ly90aHJlYWRzLWlpaXRoLnF1b3JhLmNvbS9UcmVhcHMtT25lLVRyZWUtdG8tUnVsZS1lbS1hbGwtUGFydC0y\" title=\"https://threads-iiith.quora.com/Treaps-One-Tree-to-Rule-em-all-Part-2\">https://threads-iiith.quora.com/Treaps-One-Tree-to-Rule-em-all-Part-2<i class=\"fa fa-external-link\"></i></span></p>"},{"title":"Notes for Computer Networking 6e","mathjax":true,"sitemap":false,"date":"2019-04-30T10:22:24.000Z","_content":"\n# Chapter 2 - Application Layer\n## DNS\n- Goal: To resolve a fully qualified domain name (FQDN) to an IP address. This process is called name resolution.\n- Runs over **UDP** and uses **Port 53**  \n- DNS other important services: Host Aliasing and Load Balance \n- A DNS __recursive query__ is between a DNS client and its local DNS server. When local DNS server can't resolve a new name from its own database, it would make an __iterative query__ to other DNS servers.\n- DNS server 可以設定fowarder，等於是將別人的query丟給另一台DNS server。若Client搜尋時，一直有Non-authoritative answer，那可能就是local DNS server只是forward給其他DNS server\n\n---\n<!--more-->\n### BIND (Berkeley Internet Name Domain)\n互聯網上最常使用的DNS軟件，占所有DNS服務器的九成  \n\n---\n\n\n### [Zone file](https://en.wikipedia.org/wiki/Zone_file)\nA zone file is a sequence of entries for resource records. Each line is a text description that defines a single resource record  \n\t`| name | ttl | record class | record type | record data |`  \n\t\n- record class: namespace of the record information,  most commonly used namespace is Internet (__IN__)\n- [record type](https://adon988.logdown.com/posts/7811375-dns-resource-record-rr)\t\n\t- Type=[SOA](http://eservice.seed.net.tw/class/class45.html) (Start of Authority): 定義於Zone file的開頭，描述關於zone的基本資訊\n\t- Type=A: (hostname, IP)\n\t- Type=NS: (Domain Name, Authoritative DNS Server)\n\t- Type=CNAME: (Domain Name, Canonical hostname)  \n\t- Type=PTR: 反查IP的Domain Name\n\t- Type=AXFR: Zone Transfer\n\t\t- __[Zone Transfer](https://en.wikipedia.org/wiki/DNS_zone_transfer)__: Available for administrators to replicate DNS databases across a set of DNS servers for backup\n\t\t- [Security Concerns](https://devco.re/blog/2014/05/05/zone-transfer-CVE-1999-0532-an-old-dns-security-issue/) : 利用zone transfer去找所有可以攻擊的切入點 \n\n\n### nslookup\n- Get manual page: `man nslookup`   \n\n```  \n> server 8.8.8.8  (set default server)\nDefault server: 8.8.8.8\nAddress: 8.8.8.8#53\n-------------------------\n> set all  (show all settings)\n> set debug  (顯示DNS Message)\n-------------------------\n> set type=any (將全部各類型的RR都顯示出來)\n> google.com\nServer:\t\t8.8.8.8\nAddress:\t8.8.8.8#53\n\nNon-authoritative answer:    (存在於local DNS Server cache中)\nName:\tgoogle.com\nAddress: 172.217.27.142\n-------------------------\n> set norecurse (若local dns server沒有cache就回傳Nothing)\n> www.hs.fi\nServer:\t\t8.8.8.8\nAddress:\t8.8.8.8#53\n\n** server can't find www.hs.fi: REFUSED\n> set recurse\n> www.hs.fi\nServer:\t\t8.8.8.8\nAddress:\t8.8.8.8#53\n\nNon-authoritative answer:\nName:\twww.hs.fi\nAddress: 54.192.146.52\n```\n\n\n### host\n`host [-al] FQDN`  \n\n- -a : 等於nslookup `set debug`\n- -l : 等於nslookup `set type=axfr`\n\n\n### dig\n```\n> dig +trace google.com @168.95.192.1 (追蹤經過哪些節點，並利用168.95.192.1作為server)  \n> dig -x 168.95.192.1  (等於nslookup type=PTR)\n> dig -t [type] FQDN (指定RR type)\n```\n\n### whois\n顯示該domain name的管理者資訊  \n`> whois FQDN`\n\n\n\n### [/etc/hosts file](https://debian-handbook.info/browse/zh-TW/stable/sect.hostname-name-service.html)\n- 作用與DNS類似。例如瀏覽器在搜尋網址時會先找該檔案的設定，如果沒有才問DNS server。\n- 格式: ` [IP]  [hostname]  [hostname別名]`  \ne.g. `127.0.0.1  localhost `\n\n### hostname\n用於顯示或修改system的host name，儲存於`/etc/hostname` or `/proc/sys/kernel/hostname`\n\n```\n> hostname   (顯示host name)  \nmac.local  \n> hostname -i   (顯示hostname的IP)  \n127.0.1.1  \n> hostname [name]  (設置臨時hostname)  \n```\n\n\n\n\n### gethostbyname()\n\n# Chapter 3 - Transport Layer\n## UDP (User Datagram Protocol)\n### Headers (8 bytes) \n1. Source Port\n2. Destination Port\n3. Length (header plus data)\n4. Checksum\n\t- At the sender side performs the 1s complement of the sum of all the 16-bit words(2 bytes) in the segment, with any overflow encountered during the sum being wrapped around。也就是  \n\t `checksum =  將segment裡全部的16-bit words總合後，再 1's complement  `\n\t- At the receiver, all four 16-bit words are added, including the checksum. 若總合後每一位不是都1，那就表示有錯誤發生。因為一個數字加上其1's complement的值，一定是都是111111...\n\n> wrap around： 將overflow的值拿到最低位再相加\n>1101  \n>1100  \n>\\--------  \n>11001  \n>^ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(overflow)  \n>\\--------  \n>1101  \n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 &nbsp;(wrapped around)  \n>\\--------  \n>1110   (answer)  \n\n\n##Reliable Data Transfer  \n### GBN (Go Back to N)\n- 解決 Stop-and-wait  s\n\n```\n0        Base       Nextseqnum      Base+N   \n|---------|-------------|---------------|--------------->  \n    (1)         (2)            (3)             (4)  \n    \n          |-----------------------------|  \n                  Window Size  N\n\n(1)  Already sent and ACKed\n(2)  Sent, not yet ACKed\n(3)  Usable, not yet sent\n(4)  Not usable (不在sliding window中，所以還不能傳送)\n```\n1. Receiver不需要buffer順序不對的packet\n2. Cummulative Acknowledgment （不是base的packet都不予理會）\n3. 使用一個Timer，該timer是綁定最早傳送但未ACKed的packet(Base Packet)。當Timeout Event發生時，需要重送全部已送過但未ACKed的封包 `(Base ~ Nextseqnum-1)`  \n\n\n### Selective Repeat\n\n- Sender\n\t- 允許ACKed但不是base的packet留在window裡\n\t- 每個packet有自己獨立的timer\n\n- Receiver \n\t- Out-of-order packets會被buffer\n\t- 當base packet到某一個packet都是in order且acked時，就會被delievered to upper layer  \n\n\n- Window size must be less than or equal to half the size of the sequence number space\n\n\n## TCP\n- Maximum Segment Size (MSS)  \n\n\n\n","source":"_posts/Notes for Computer Networking 6e.md","raw":"---\ntitle: Notes for Computer Networking 6e\ntags:\n  - Computer Networking\n  - DNS\n  - TCP\ncategories:\n  - Notes\nmathjax: true\nsitemap: false\ndate: 2019-04-30 18:22:24\n---\n\n# Chapter 2 - Application Layer\n## DNS\n- Goal: To resolve a fully qualified domain name (FQDN) to an IP address. This process is called name resolution.\n- Runs over **UDP** and uses **Port 53**  \n- DNS other important services: Host Aliasing and Load Balance \n- A DNS __recursive query__ is between a DNS client and its local DNS server. When local DNS server can't resolve a new name from its own database, it would make an __iterative query__ to other DNS servers.\n- DNS server 可以設定fowarder，等於是將別人的query丟給另一台DNS server。若Client搜尋時，一直有Non-authoritative answer，那可能就是local DNS server只是forward給其他DNS server\n\n---\n<!--more-->\n### BIND (Berkeley Internet Name Domain)\n互聯網上最常使用的DNS軟件，占所有DNS服務器的九成  \n\n---\n\n\n### [Zone file](https://en.wikipedia.org/wiki/Zone_file)\nA zone file is a sequence of entries for resource records. Each line is a text description that defines a single resource record  \n\t`| name | ttl | record class | record type | record data |`  \n\t\n- record class: namespace of the record information,  most commonly used namespace is Internet (__IN__)\n- [record type](https://adon988.logdown.com/posts/7811375-dns-resource-record-rr)\t\n\t- Type=[SOA](http://eservice.seed.net.tw/class/class45.html) (Start of Authority): 定義於Zone file的開頭，描述關於zone的基本資訊\n\t- Type=A: (hostname, IP)\n\t- Type=NS: (Domain Name, Authoritative DNS Server)\n\t- Type=CNAME: (Domain Name, Canonical hostname)  \n\t- Type=PTR: 反查IP的Domain Name\n\t- Type=AXFR: Zone Transfer\n\t\t- __[Zone Transfer](https://en.wikipedia.org/wiki/DNS_zone_transfer)__: Available for administrators to replicate DNS databases across a set of DNS servers for backup\n\t\t- [Security Concerns](https://devco.re/blog/2014/05/05/zone-transfer-CVE-1999-0532-an-old-dns-security-issue/) : 利用zone transfer去找所有可以攻擊的切入點 \n\n\n### nslookup\n- Get manual page: `man nslookup`   \n\n```  \n> server 8.8.8.8  (set default server)\nDefault server: 8.8.8.8\nAddress: 8.8.8.8#53\n-------------------------\n> set all  (show all settings)\n> set debug  (顯示DNS Message)\n-------------------------\n> set type=any (將全部各類型的RR都顯示出來)\n> google.com\nServer:\t\t8.8.8.8\nAddress:\t8.8.8.8#53\n\nNon-authoritative answer:    (存在於local DNS Server cache中)\nName:\tgoogle.com\nAddress: 172.217.27.142\n-------------------------\n> set norecurse (若local dns server沒有cache就回傳Nothing)\n> www.hs.fi\nServer:\t\t8.8.8.8\nAddress:\t8.8.8.8#53\n\n** server can't find www.hs.fi: REFUSED\n> set recurse\n> www.hs.fi\nServer:\t\t8.8.8.8\nAddress:\t8.8.8.8#53\n\nNon-authoritative answer:\nName:\twww.hs.fi\nAddress: 54.192.146.52\n```\n\n\n### host\n`host [-al] FQDN`  \n\n- -a : 等於nslookup `set debug`\n- -l : 等於nslookup `set type=axfr`\n\n\n### dig\n```\n> dig +trace google.com @168.95.192.1 (追蹤經過哪些節點，並利用168.95.192.1作為server)  \n> dig -x 168.95.192.1  (等於nslookup type=PTR)\n> dig -t [type] FQDN (指定RR type)\n```\n\n### whois\n顯示該domain name的管理者資訊  \n`> whois FQDN`\n\n\n\n### [/etc/hosts file](https://debian-handbook.info/browse/zh-TW/stable/sect.hostname-name-service.html)\n- 作用與DNS類似。例如瀏覽器在搜尋網址時會先找該檔案的設定，如果沒有才問DNS server。\n- 格式: ` [IP]  [hostname]  [hostname別名]`  \ne.g. `127.0.0.1  localhost `\n\n### hostname\n用於顯示或修改system的host name，儲存於`/etc/hostname` or `/proc/sys/kernel/hostname`\n\n```\n> hostname   (顯示host name)  \nmac.local  \n> hostname -i   (顯示hostname的IP)  \n127.0.1.1  \n> hostname [name]  (設置臨時hostname)  \n```\n\n\n\n\n### gethostbyname()\n\n# Chapter 3 - Transport Layer\n## UDP (User Datagram Protocol)\n### Headers (8 bytes) \n1. Source Port\n2. Destination Port\n3. Length (header plus data)\n4. Checksum\n\t- At the sender side performs the 1s complement of the sum of all the 16-bit words(2 bytes) in the segment, with any overflow encountered during the sum being wrapped around。也就是  \n\t `checksum =  將segment裡全部的16-bit words總合後，再 1's complement  `\n\t- At the receiver, all four 16-bit words are added, including the checksum. 若總合後每一位不是都1，那就表示有錯誤發生。因為一個數字加上其1's complement的值，一定是都是111111...\n\n> wrap around： 將overflow的值拿到最低位再相加\n>1101  \n>1100  \n>\\--------  \n>11001  \n>^ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(overflow)  \n>\\--------  \n>1101  \n>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 &nbsp;(wrapped around)  \n>\\--------  \n>1110   (answer)  \n\n\n##Reliable Data Transfer  \n### GBN (Go Back to N)\n- 解決 Stop-and-wait  s\n\n```\n0        Base       Nextseqnum      Base+N   \n|---------|-------------|---------------|--------------->  \n    (1)         (2)            (3)             (4)  \n    \n          |-----------------------------|  \n                  Window Size  N\n\n(1)  Already sent and ACKed\n(2)  Sent, not yet ACKed\n(3)  Usable, not yet sent\n(4)  Not usable (不在sliding window中，所以還不能傳送)\n```\n1. Receiver不需要buffer順序不對的packet\n2. Cummulative Acknowledgment （不是base的packet都不予理會）\n3. 使用一個Timer，該timer是綁定最早傳送但未ACKed的packet(Base Packet)。當Timeout Event發生時，需要重送全部已送過但未ACKed的封包 `(Base ~ Nextseqnum-1)`  \n\n\n### Selective Repeat\n\n- Sender\n\t- 允許ACKed但不是base的packet留在window裡\n\t- 每個packet有自己獨立的timer\n\n- Receiver \n\t- Out-of-order packets會被buffer\n\t- 當base packet到某一個packet都是in order且acked時，就會被delievered to upper layer  \n\n\n- Window size must be less than or equal to half the size of the sequence number space\n\n\n## TCP\n- Maximum Segment Size (MSS)  \n\n\n\n","slug":"Notes for Computer Networking 6e","published":1,"updated":"2019-06-21T06:36:40.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxijp53g0009dvw9xzejftq4","content":"<h1 id=\"Chapter-2-Application-Layer\"><a href=\"#Chapter-2-Application-Layer\" class=\"headerlink\" title=\"Chapter 2 - Application Layer\"></a>Chapter 2 - Application Layer</h1><h2 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h2><ul>\n<li>Goal: To resolve a fully qualified domain name (FQDN) to an IP address. This process is called name resolution.</li>\n<li>Runs over <strong>UDP</strong> and uses <strong>Port 53</strong>  </li>\n<li>DNS other important services: Host Aliasing and Load Balance </li>\n<li>A DNS <strong>recursive query</strong> is between a DNS client and its local DNS server. When local DNS server can’t resolve a new name from its own database, it would make an <strong>iterative query</strong> to other DNS servers.</li>\n<li>DNS server 可以設定fowarder，等於是將別人的query丟給另一台DNS server。若Client搜尋時，一直有Non-authoritative answer，那可能就是local DNS server只是forward給其他DNS server</li>\n</ul>\n<hr>\n<a id=\"more\"></a>\n<h3 id=\"BIND-Berkeley-Internet-Name-Domain\"><a href=\"#BIND-Berkeley-Internet-Name-Domain\" class=\"headerlink\" title=\"BIND (Berkeley Internet Name Domain)\"></a>BIND (Berkeley Internet Name Domain)</h3><p>互聯網上最常使用的DNS軟件，占所有DNS服務器的九成  </p>\n<hr>\n<h3 id=\"Zone-file\"><a href=\"#Zone-file\" class=\"headerlink\" title=\"Zone file\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWm9uZV9maWxl\" title=\"https://en.wikipedia.org/wiki/Zone_file\">Zone file<i class=\"fa fa-external-link\"></i></span></h3><p>A zone file is a sequence of entries for resource records. Each line is a text description that defines a single resource record<br>    <code>| name | ttl | record class | record type | record data |</code>  </p>\n<ul>\n<li>record class: namespace of the record information,  most commonly used namespace is Internet (<strong>IN</strong>)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hZG9uOTg4LmxvZ2Rvd24uY29tL3Bvc3RzLzc4MTEzNzUtZG5zLXJlc291cmNlLXJlY29yZC1ycg==\" title=\"https://adon988.logdown.com/posts/7811375-dns-resource-record-rr\">record type<i class=\"fa fa-external-link\"></i></span>    <ul>\n<li>Type=<span class=\"exturl\" data-url=\"aHR0cDovL2VzZXJ2aWNlLnNlZWQubmV0LnR3L2NsYXNzL2NsYXNzNDUuaHRtbA==\" title=\"http://eservice.seed.net.tw/class/class45.html\">SOA<i class=\"fa fa-external-link\"></i></span> (Start of Authority): 定義於Zone file的開頭，描述關於zone的基本資訊</li>\n<li>Type=A: (hostname, IP)</li>\n<li>Type=NS: (Domain Name, Authoritative DNS Server)</li>\n<li>Type=CNAME: (Domain Name, Canonical hostname)  </li>\n<li>Type=PTR: 反查IP的Domain Name</li>\n<li>Type=AXFR: Zone Transfer<ul>\n<li><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRE5TX3pvbmVfdHJhbnNmZXI=\" title=\"https://en.wikipedia.org/wiki/DNS_zone_transfer\">Zone Transfer<i class=\"fa fa-external-link\"></i></span></strong>: Available for administrators to replicate DNS databases across a set of DNS servers for backup</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZjby5yZS9ibG9nLzIwMTQvMDUvMDUvem9uZS10cmFuc2Zlci1DVkUtMTk5OS0wNTMyLWFuLW9sZC1kbnMtc2VjdXJpdHktaXNzdWUv\" title=\"https://devco.re/blog/2014/05/05/zone-transfer-CVE-1999-0532-an-old-dns-security-issue/\">Security Concerns<i class=\"fa fa-external-link\"></i></span> : 利用zone transfer去找所有可以攻擊的切入點 </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"nslookup\"><a href=\"#nslookup\" class=\"headerlink\" title=\"nslookup\"></a>nslookup</h3><ul>\n<li>Get manual page: <code>man nslookup</code>   </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; server 8.8.8.8  (set default server)</span><br><span class=\"line\">Default server: 8.8.8.8</span><br><span class=\"line\">Address: 8.8.8.8#53</span><br><span class=\"line\">-------------------------</span><br><span class=\"line\">&gt; set all  (show all settings)</span><br><span class=\"line\">&gt; set debug  (顯示DNS Message)</span><br><span class=\"line\">-------------------------</span><br><span class=\"line\">&gt; set type=any (將全部各類型的RR都顯示出來)</span><br><span class=\"line\">&gt; google.com</span><br><span class=\"line\">Server:\t\t8.8.8.8</span><br><span class=\"line\">Address:\t8.8.8.8#53</span><br><span class=\"line\"></span><br><span class=\"line\">Non-authoritative answer:    (存在於local DNS Server cache中)</span><br><span class=\"line\">Name:\tgoogle.com</span><br><span class=\"line\">Address: 172.217.27.142</span><br><span class=\"line\">-------------------------</span><br><span class=\"line\">&gt; set norecurse (若local dns server沒有cache就回傳Nothing)</span><br><span class=\"line\">&gt; www.hs.fi</span><br><span class=\"line\">Server:\t\t8.8.8.8</span><br><span class=\"line\">Address:\t8.8.8.8#53</span><br><span class=\"line\"></span><br><span class=\"line\">** server can&apos;t find www.hs.fi: REFUSED</span><br><span class=\"line\">&gt; set recurse</span><br><span class=\"line\">&gt; www.hs.fi</span><br><span class=\"line\">Server:\t\t8.8.8.8</span><br><span class=\"line\">Address:\t8.8.8.8#53</span><br><span class=\"line\"></span><br><span class=\"line\">Non-authoritative answer:</span><br><span class=\"line\">Name:\twww.hs.fi</span><br><span class=\"line\">Address: 54.192.146.52</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"host\"><a href=\"#host\" class=\"headerlink\" title=\"host\"></a>host</h3><p><code>host [-al] FQDN</code>  </p>\n<ul>\n<li>-a : 等於nslookup <code>set debug</code></li>\n<li>-l : 等於nslookup <code>set type=axfr</code></li>\n</ul>\n<h3 id=\"dig\"><a href=\"#dig\" class=\"headerlink\" title=\"dig\"></a>dig</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; dig +trace google.com @168.95.192.1 (追蹤經過哪些節點，並利用168.95.192.1作為server)  </span><br><span class=\"line\">&gt; dig -x 168.95.192.1  (等於nslookup type=PTR)</span><br><span class=\"line\">&gt; dig -t [type] FQDN (指定RR type)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"whois\"><a href=\"#whois\" class=\"headerlink\" title=\"whois\"></a>whois</h3><p>顯示該domain name的管理者資訊<br><code>&gt; whois FQDN</code></p>\n<h3 id=\"etc-hosts-file\"><a href=\"#etc-hosts-file\" class=\"headerlink\" title=\"/etc/hosts file\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZWJpYW4taGFuZGJvb2suaW5mby9icm93c2UvemgtVFcvc3RhYmxlL3NlY3QuaG9zdG5hbWUtbmFtZS1zZXJ2aWNlLmh0bWw=\" title=\"https://debian-handbook.info/browse/zh-TW/stable/sect.hostname-name-service.html\">/etc/hosts file<i class=\"fa fa-external-link\"></i></span></h3><ul>\n<li>作用與DNS類似。例如瀏覽器在搜尋網址時會先找該檔案的設定，如果沒有才問DNS server。</li>\n<li>格式: <code>[IP]  [hostname]  [hostname別名]</code><br>e.g. <code>127.0.0.1  localhost</code></li>\n</ul>\n<h3 id=\"hostname\"><a href=\"#hostname\" class=\"headerlink\" title=\"hostname\"></a>hostname</h3><p>用於顯示或修改system的host name，儲存於<code>/etc/hostname</code> or <code>/proc/sys/kernel/hostname</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hostname   (顯示host name)  </span><br><span class=\"line\">mac.local  </span><br><span class=\"line\">&gt; hostname -i   (顯示hostname的IP)  </span><br><span class=\"line\">127.0.1.1  </span><br><span class=\"line\">&gt; hostname [name]  (設置臨時hostname)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"gethostbyname\"><a href=\"#gethostbyname\" class=\"headerlink\" title=\"gethostbyname()\"></a>gethostbyname()</h3><h1 id=\"Chapter-3-Transport-Layer\"><a href=\"#Chapter-3-Transport-Layer\" class=\"headerlink\" title=\"Chapter 3 - Transport Layer\"></a>Chapter 3 - Transport Layer</h1><h2 id=\"UDP-User-Datagram-Protocol\"><a href=\"#UDP-User-Datagram-Protocol\" class=\"headerlink\" title=\"UDP (User Datagram Protocol)\"></a>UDP (User Datagram Protocol)</h2><h3 id=\"Headers-8-bytes\"><a href=\"#Headers-8-bytes\" class=\"headerlink\" title=\"Headers (8 bytes)\"></a>Headers (8 bytes)</h3><ol>\n<li>Source Port</li>\n<li>Destination Port</li>\n<li>Length (header plus data)</li>\n<li>Checksum<ul>\n<li>At the sender side performs the 1s complement of the sum of all the 16-bit words(2 bytes) in the segment, with any overflow encountered during the sum being wrapped around。也就是<br><code>checksum =  將segment裡全部的16-bit words總合後，再 1&#39;s complement</code></li>\n<li>At the receiver, all four 16-bit words are added, including the checksum. 若總合後每一位不是都1，那就表示有錯誤發生。因為一個數字加上其1’s complement的值，一定是都是111111…</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>wrap around： 將overflow的值拿到最低位再相加<br>1101<br>1100<br>-——-<br>11001<br>^ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(overflow)<br>-——-<br>1101<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 &nbsp;(wrapped around)<br>-——-<br>1110   (answer)  </p>\n</blockquote>\n<p>##Reliable Data Transfer  </p>\n<h3 id=\"GBN-Go-Back-to-N\"><a href=\"#GBN-Go-Back-to-N\" class=\"headerlink\" title=\"GBN (Go Back to N)\"></a>GBN (Go Back to N)</h3><ul>\n<li>解決 Stop-and-wait  s</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0        Base       Nextseqnum      Base+N   </span><br><span class=\"line\">|---------|-------------|---------------|---------------&gt;  </span><br><span class=\"line\">    (1)         (2)            (3)             (4)  </span><br><span class=\"line\">    </span><br><span class=\"line\">          |-----------------------------|  </span><br><span class=\"line\">                  Window Size  N</span><br><span class=\"line\"></span><br><span class=\"line\">(1)  Already sent and ACKed</span><br><span class=\"line\">(2)  Sent, not yet ACKed</span><br><span class=\"line\">(3)  Usable, not yet sent</span><br><span class=\"line\">(4)  Not usable (不在sliding window中，所以還不能傳送)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>Receiver不需要buffer順序不對的packet</li>\n<li>Cummulative Acknowledgment （不是base的packet都不予理會）</li>\n<li>使用一個Timer，該timer是綁定最早傳送但未ACKed的packet(Base Packet)。當Timeout Event發生時，需要重送全部已送過但未ACKed的封包 <code>(Base ~ Nextseqnum-1)</code>  </li>\n</ol>\n<h3 id=\"Selective-Repeat\"><a href=\"#Selective-Repeat\" class=\"headerlink\" title=\"Selective Repeat\"></a>Selective Repeat</h3><ul>\n<li><p>Sender</p>\n<ul>\n<li>允許ACKed但不是base的packet留在window裡</li>\n<li>每個packet有自己獨立的timer</li>\n</ul>\n</li>\n<li><p>Receiver </p>\n<ul>\n<li>Out-of-order packets會被buffer</li>\n<li>當base packet到某一個packet都是in order且acked時，就會被delievered to upper layer  </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Window size must be less than or equal to half the size of the sequence number space</li>\n</ul>\n<h2 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h2><ul>\n<li>Maximum Segment Size (MSS)  </li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"Chapter-2-Application-Layer\"><a href=\"#Chapter-2-Application-Layer\" class=\"headerlink\" title=\"Chapter 2 - Application Layer\"></a>Chapter 2 - Application Layer</h1><h2 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h2><ul>\n<li>Goal: To resolve a fully qualified domain name (FQDN) to an IP address. This process is called name resolution.</li>\n<li>Runs over <strong>UDP</strong> and uses <strong>Port 53</strong>  </li>\n<li>DNS other important services: Host Aliasing and Load Balance </li>\n<li>A DNS <strong>recursive query</strong> is between a DNS client and its local DNS server. When local DNS server can’t resolve a new name from its own database, it would make an <strong>iterative query</strong> to other DNS servers.</li>\n<li>DNS server 可以設定fowarder，等於是將別人的query丟給另一台DNS server。若Client搜尋時，一直有Non-authoritative answer，那可能就是local DNS server只是forward給其他DNS server</li>\n</ul>\n<hr>","more":"<h3 id=\"BIND-Berkeley-Internet-Name-Domain\"><a href=\"#BIND-Berkeley-Internet-Name-Domain\" class=\"headerlink\" title=\"BIND (Berkeley Internet Name Domain)\"></a>BIND (Berkeley Internet Name Domain)</h3><p>互聯網上最常使用的DNS軟件，占所有DNS服務器的九成  </p>\n<hr>\n<h3 id=\"Zone-file\"><a href=\"#Zone-file\" class=\"headerlink\" title=\"Zone file\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWm9uZV9maWxl\" title=\"https://en.wikipedia.org/wiki/Zone_file\">Zone file<i class=\"fa fa-external-link\"></i></span></h3><p>A zone file is a sequence of entries for resource records. Each line is a text description that defines a single resource record<br>    <code>| name | ttl | record class | record type | record data |</code>  </p>\n<ul>\n<li>record class: namespace of the record information,  most commonly used namespace is Internet (<strong>IN</strong>)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hZG9uOTg4LmxvZ2Rvd24uY29tL3Bvc3RzLzc4MTEzNzUtZG5zLXJlc291cmNlLXJlY29yZC1ycg==\" title=\"https://adon988.logdown.com/posts/7811375-dns-resource-record-rr\">record type<i class=\"fa fa-external-link\"></i></span>    <ul>\n<li>Type=<span class=\"exturl\" data-url=\"aHR0cDovL2VzZXJ2aWNlLnNlZWQubmV0LnR3L2NsYXNzL2NsYXNzNDUuaHRtbA==\" title=\"http://eservice.seed.net.tw/class/class45.html\">SOA<i class=\"fa fa-external-link\"></i></span> (Start of Authority): 定義於Zone file的開頭，描述關於zone的基本資訊</li>\n<li>Type=A: (hostname, IP)</li>\n<li>Type=NS: (Domain Name, Authoritative DNS Server)</li>\n<li>Type=CNAME: (Domain Name, Canonical hostname)  </li>\n<li>Type=PTR: 反查IP的Domain Name</li>\n<li>Type=AXFR: Zone Transfer<ul>\n<li><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRE5TX3pvbmVfdHJhbnNmZXI=\" title=\"https://en.wikipedia.org/wiki/DNS_zone_transfer\">Zone Transfer<i class=\"fa fa-external-link\"></i></span></strong>: Available for administrators to replicate DNS databases across a set of DNS servers for backup</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZjby5yZS9ibG9nLzIwMTQvMDUvMDUvem9uZS10cmFuc2Zlci1DVkUtMTk5OS0wNTMyLWFuLW9sZC1kbnMtc2VjdXJpdHktaXNzdWUv\" title=\"https://devco.re/blog/2014/05/05/zone-transfer-CVE-1999-0532-an-old-dns-security-issue/\">Security Concerns<i class=\"fa fa-external-link\"></i></span> : 利用zone transfer去找所有可以攻擊的切入點 </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"nslookup\"><a href=\"#nslookup\" class=\"headerlink\" title=\"nslookup\"></a>nslookup</h3><ul>\n<li>Get manual page: <code>man nslookup</code>   </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; server 8.8.8.8  (set default server)</span><br><span class=\"line\">Default server: 8.8.8.8</span><br><span class=\"line\">Address: 8.8.8.8#53</span><br><span class=\"line\">-------------------------</span><br><span class=\"line\">&gt; set all  (show all settings)</span><br><span class=\"line\">&gt; set debug  (顯示DNS Message)</span><br><span class=\"line\">-------------------------</span><br><span class=\"line\">&gt; set type=any (將全部各類型的RR都顯示出來)</span><br><span class=\"line\">&gt; google.com</span><br><span class=\"line\">Server:\t\t8.8.8.8</span><br><span class=\"line\">Address:\t8.8.8.8#53</span><br><span class=\"line\"></span><br><span class=\"line\">Non-authoritative answer:    (存在於local DNS Server cache中)</span><br><span class=\"line\">Name:\tgoogle.com</span><br><span class=\"line\">Address: 172.217.27.142</span><br><span class=\"line\">-------------------------</span><br><span class=\"line\">&gt; set norecurse (若local dns server沒有cache就回傳Nothing)</span><br><span class=\"line\">&gt; www.hs.fi</span><br><span class=\"line\">Server:\t\t8.8.8.8</span><br><span class=\"line\">Address:\t8.8.8.8#53</span><br><span class=\"line\"></span><br><span class=\"line\">** server can&apos;t find www.hs.fi: REFUSED</span><br><span class=\"line\">&gt; set recurse</span><br><span class=\"line\">&gt; www.hs.fi</span><br><span class=\"line\">Server:\t\t8.8.8.8</span><br><span class=\"line\">Address:\t8.8.8.8#53</span><br><span class=\"line\"></span><br><span class=\"line\">Non-authoritative answer:</span><br><span class=\"line\">Name:\twww.hs.fi</span><br><span class=\"line\">Address: 54.192.146.52</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"host\"><a href=\"#host\" class=\"headerlink\" title=\"host\"></a>host</h3><p><code>host [-al] FQDN</code>  </p>\n<ul>\n<li>-a : 等於nslookup <code>set debug</code></li>\n<li>-l : 等於nslookup <code>set type=axfr</code></li>\n</ul>\n<h3 id=\"dig\"><a href=\"#dig\" class=\"headerlink\" title=\"dig\"></a>dig</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; dig +trace google.com @168.95.192.1 (追蹤經過哪些節點，並利用168.95.192.1作為server)  </span><br><span class=\"line\">&gt; dig -x 168.95.192.1  (等於nslookup type=PTR)</span><br><span class=\"line\">&gt; dig -t [type] FQDN (指定RR type)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"whois\"><a href=\"#whois\" class=\"headerlink\" title=\"whois\"></a>whois</h3><p>顯示該domain name的管理者資訊<br><code>&gt; whois FQDN</code></p>\n<h3 id=\"etc-hosts-file\"><a href=\"#etc-hosts-file\" class=\"headerlink\" title=\"/etc/hosts file\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZWJpYW4taGFuZGJvb2suaW5mby9icm93c2UvemgtVFcvc3RhYmxlL3NlY3QuaG9zdG5hbWUtbmFtZS1zZXJ2aWNlLmh0bWw=\" title=\"https://debian-handbook.info/browse/zh-TW/stable/sect.hostname-name-service.html\">/etc/hosts file<i class=\"fa fa-external-link\"></i></span></h3><ul>\n<li>作用與DNS類似。例如瀏覽器在搜尋網址時會先找該檔案的設定，如果沒有才問DNS server。</li>\n<li>格式: <code>[IP]  [hostname]  [hostname別名]</code><br>e.g. <code>127.0.0.1  localhost</code></li>\n</ul>\n<h3 id=\"hostname\"><a href=\"#hostname\" class=\"headerlink\" title=\"hostname\"></a>hostname</h3><p>用於顯示或修改system的host name，儲存於<code>/etc/hostname</code> or <code>/proc/sys/kernel/hostname</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hostname   (顯示host name)  </span><br><span class=\"line\">mac.local  </span><br><span class=\"line\">&gt; hostname -i   (顯示hostname的IP)  </span><br><span class=\"line\">127.0.1.1  </span><br><span class=\"line\">&gt; hostname [name]  (設置臨時hostname)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"gethostbyname\"><a href=\"#gethostbyname\" class=\"headerlink\" title=\"gethostbyname()\"></a>gethostbyname()</h3><h1 id=\"Chapter-3-Transport-Layer\"><a href=\"#Chapter-3-Transport-Layer\" class=\"headerlink\" title=\"Chapter 3 - Transport Layer\"></a>Chapter 3 - Transport Layer</h1><h2 id=\"UDP-User-Datagram-Protocol\"><a href=\"#UDP-User-Datagram-Protocol\" class=\"headerlink\" title=\"UDP (User Datagram Protocol)\"></a>UDP (User Datagram Protocol)</h2><h3 id=\"Headers-8-bytes\"><a href=\"#Headers-8-bytes\" class=\"headerlink\" title=\"Headers (8 bytes)\"></a>Headers (8 bytes)</h3><ol>\n<li>Source Port</li>\n<li>Destination Port</li>\n<li>Length (header plus data)</li>\n<li>Checksum<ul>\n<li>At the sender side performs the 1s complement of the sum of all the 16-bit words(2 bytes) in the segment, with any overflow encountered during the sum being wrapped around。也就是<br><code>checksum =  將segment裡全部的16-bit words總合後，再 1&#39;s complement</code></li>\n<li>At the receiver, all four 16-bit words are added, including the checksum. 若總合後每一位不是都1，那就表示有錯誤發生。因為一個數字加上其1’s complement的值，一定是都是111111…</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>wrap around： 將overflow的值拿到最低位再相加<br>1101<br>1100<br>-——-<br>11001<br>^ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(overflow)<br>-——-<br>1101<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 &nbsp;(wrapped around)<br>-——-<br>1110   (answer)  </p>\n</blockquote>\n<p>##Reliable Data Transfer  </p>\n<h3 id=\"GBN-Go-Back-to-N\"><a href=\"#GBN-Go-Back-to-N\" class=\"headerlink\" title=\"GBN (Go Back to N)\"></a>GBN (Go Back to N)</h3><ul>\n<li>解決 Stop-and-wait  s</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0        Base       Nextseqnum      Base+N   </span><br><span class=\"line\">|---------|-------------|---------------|---------------&gt;  </span><br><span class=\"line\">    (1)         (2)            (3)             (4)  </span><br><span class=\"line\">    </span><br><span class=\"line\">          |-----------------------------|  </span><br><span class=\"line\">                  Window Size  N</span><br><span class=\"line\"></span><br><span class=\"line\">(1)  Already sent and ACKed</span><br><span class=\"line\">(2)  Sent, not yet ACKed</span><br><span class=\"line\">(3)  Usable, not yet sent</span><br><span class=\"line\">(4)  Not usable (不在sliding window中，所以還不能傳送)</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>Receiver不需要buffer順序不對的packet</li>\n<li>Cummulative Acknowledgment （不是base的packet都不予理會）</li>\n<li>使用一個Timer，該timer是綁定最早傳送但未ACKed的packet(Base Packet)。當Timeout Event發生時，需要重送全部已送過但未ACKed的封包 <code>(Base ~ Nextseqnum-1)</code>  </li>\n</ol>\n<h3 id=\"Selective-Repeat\"><a href=\"#Selective-Repeat\" class=\"headerlink\" title=\"Selective Repeat\"></a>Selective Repeat</h3><ul>\n<li><p>Sender</p>\n<ul>\n<li>允許ACKed但不是base的packet留在window裡</li>\n<li>每個packet有自己獨立的timer</li>\n</ul>\n</li>\n<li><p>Receiver </p>\n<ul>\n<li>Out-of-order packets會被buffer</li>\n<li>當base packet到某一個packet都是in order且acked時，就會被delievered to upper layer  </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Window size must be less than or equal to half the size of the sequence number space</li>\n</ul>\n<h2 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h2><ul>\n<li>Maximum Segment Size (MSS)  </li>\n</ul>"},{"title":"Notes for NASM Learning","mathjax":true,"sitemap":false,"date":"2019-04-30T10:22:24.000Z","_content":"\n# Command\n\n## MacOS\n\n### 64-bit\n```\n> nasm -f macho64 <filename.asm> -o <object_filename.o>  \n> ld -macosx_version_min 10.7.0 -lSystem -o <executable> <object_filename.o>  \n> ./<executable>  \n```\n\n### 32-bit\n```\n> /usr/local/bin/nasm -f macho <filename.asm> -o <object_filename.o>  \n> ld -macosx_version_min 10.7.0 -o <executable> <object_filename.o>   \n> ./<executable>  \n```\n\n<!--more-->\n\n## Linux\n\n### 64-bit\n```\n> nasm -f elf64 <filename.asm>  -o <object_filename.o>  \n> ld -o <executable> <object_filename.o>  \n> ./<executable>   \n```\n\n### 32-bit\n```\n> nasm -f elf <filename.asm>  -o <object_filename.o>  \n> ld -m elf_i386 -o <executable> <object_filename.o>  \n> ./<executable>   \n```\n- 加上 `-m elf_i386`，set emulation to 32-bit。在64-bit上的電腦compile 32-bit的檔案時，需加上這行。\n\n\n\n\n# System Call Table\n- [Reference for MacOS](https://opensource.apple.com/source/xnu/xnu-1504.3.12/bsd/kern/syscalls.master)\n\t- first column is system call number  \n- [System Call Table for linux 32-bit](https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html)\n- [System Call Table for linux 64-bit](https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/)\n- `find . -name 'syscall.h'`\n- 在mac 64-bit時，呼叫syscall時，需要[`rax = Code + 0x2000000`](https://stackoverflow.com/a/53905561/6742691) \n\t- e.g.  sys_write => `0x2000004`\n\n***Notes!!***  在32-bit MacOS上呼叫syscall與linux不同。MacOS 是將參數丟到stack上然後呼叫syscall，而非丟到register，所以無法直接將Linux 32-bit nasm code拿到MacOS上。[解釋點我](https://filippo.io/making-system-calls-from-assembly-in-mac-os-x/)\n\n\n# objdump\n\n## Options\n\n- `-i`  列出可支援`-b`的檔案格式和`-m`的架構\n- `-f` 顯示File header資訊。 e.g. File format, architecture, flags and start address\n- `-h` 顯示Section Header。 e.g.  `.text` `.data`\n- `-t` 顯示[Symbol Table]([http://wen00072.github.io/blog/2014/12/09/field-descriptions/](http://wen00072.github.io/blog/2014/12/09/field-descriptions/))\n- `-p` 顯示Program Header Table\n- `-x`  combination of `-f` `-h` `-t` `-p`\n- `-d` 反組譯 code section\n- `-D` 反組譯 ALL section\n- `-b` 反組譯指定的[BFD格式](https://en.wikipedia.org/wiki/Binary_File_Descriptor_library)\n- `-m` 反組譯用的架構\n\n# readelf\n- 與objdump的區別\n  - 不提供反組譯\n  - 不借助BFD，直接讀取ELF file → **訊息比較多**\n\n## Options\n\n- `-a` equivalent to: `-h` `-l` `-S`  `-s`  `-r` ` -d` ` -V` ` -A` ` -I`\n\n\n# addr2line\n\nTranslate an address in an executable or an offset in a section of an object file into file names and line numbers\n\nnasm在編譯時，必須加上`-g`  (to generate debug information)。`addr2line` only supports functions that have debug information\n\n### Options\n\n- `-a [addr, addr2..]` \n- `-e filename` the name of the executable\n- `-p` pretty print\n\n\n","source":"_posts/Notes for NASM Learning.md","raw":"---\ntitle: Notes for NASM Learning\ntags:\n  - NASM\n  - Assembly\ncategories:\n  - Notes\nmathjax: true\nsitemap: false\ndate: 2019-04-30 18:22:24\n---\n\n# Command\n\n## MacOS\n\n### 64-bit\n```\n> nasm -f macho64 <filename.asm> -o <object_filename.o>  \n> ld -macosx_version_min 10.7.0 -lSystem -o <executable> <object_filename.o>  \n> ./<executable>  \n```\n\n### 32-bit\n```\n> /usr/local/bin/nasm -f macho <filename.asm> -o <object_filename.o>  \n> ld -macosx_version_min 10.7.0 -o <executable> <object_filename.o>   \n> ./<executable>  \n```\n\n<!--more-->\n\n## Linux\n\n### 64-bit\n```\n> nasm -f elf64 <filename.asm>  -o <object_filename.o>  \n> ld -o <executable> <object_filename.o>  \n> ./<executable>   \n```\n\n### 32-bit\n```\n> nasm -f elf <filename.asm>  -o <object_filename.o>  \n> ld -m elf_i386 -o <executable> <object_filename.o>  \n> ./<executable>   \n```\n- 加上 `-m elf_i386`，set emulation to 32-bit。在64-bit上的電腦compile 32-bit的檔案時，需加上這行。\n\n\n\n\n# System Call Table\n- [Reference for MacOS](https://opensource.apple.com/source/xnu/xnu-1504.3.12/bsd/kern/syscalls.master)\n\t- first column is system call number  \n- [System Call Table for linux 32-bit](https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html)\n- [System Call Table for linux 64-bit](https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/)\n- `find . -name 'syscall.h'`\n- 在mac 64-bit時，呼叫syscall時，需要[`rax = Code + 0x2000000`](https://stackoverflow.com/a/53905561/6742691) \n\t- e.g.  sys_write => `0x2000004`\n\n***Notes!!***  在32-bit MacOS上呼叫syscall與linux不同。MacOS 是將參數丟到stack上然後呼叫syscall，而非丟到register，所以無法直接將Linux 32-bit nasm code拿到MacOS上。[解釋點我](https://filippo.io/making-system-calls-from-assembly-in-mac-os-x/)\n\n\n# objdump\n\n## Options\n\n- `-i`  列出可支援`-b`的檔案格式和`-m`的架構\n- `-f` 顯示File header資訊。 e.g. File format, architecture, flags and start address\n- `-h` 顯示Section Header。 e.g.  `.text` `.data`\n- `-t` 顯示[Symbol Table]([http://wen00072.github.io/blog/2014/12/09/field-descriptions/](http://wen00072.github.io/blog/2014/12/09/field-descriptions/))\n- `-p` 顯示Program Header Table\n- `-x`  combination of `-f` `-h` `-t` `-p`\n- `-d` 反組譯 code section\n- `-D` 反組譯 ALL section\n- `-b` 反組譯指定的[BFD格式](https://en.wikipedia.org/wiki/Binary_File_Descriptor_library)\n- `-m` 反組譯用的架構\n\n# readelf\n- 與objdump的區別\n  - 不提供反組譯\n  - 不借助BFD，直接讀取ELF file → **訊息比較多**\n\n## Options\n\n- `-a` equivalent to: `-h` `-l` `-S`  `-s`  `-r` ` -d` ` -V` ` -A` ` -I`\n\n\n# addr2line\n\nTranslate an address in an executable or an offset in a section of an object file into file names and line numbers\n\nnasm在編譯時，必須加上`-g`  (to generate debug information)。`addr2line` only supports functions that have debug information\n\n### Options\n\n- `-a [addr, addr2..]` \n- `-e filename` the name of the executable\n- `-p` pretty print\n\n\n","slug":"Notes for NASM Learning","published":1,"updated":"2019-06-21T06:36:40.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxijp54d000cdvw9ltldq8hs","content":"<h1 id=\"Command\"><a href=\"#Command\" class=\"headerlink\" title=\"Command\"></a>Command</h1><h2 id=\"MacOS\"><a href=\"#MacOS\" class=\"headerlink\" title=\"MacOS\"></a>MacOS</h2><h3 id=\"64-bit\"><a href=\"#64-bit\" class=\"headerlink\" title=\"64-bit\"></a>64-bit</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; nasm -f macho64 &lt;filename.asm&gt; -o &lt;object_filename.o&gt;  </span><br><span class=\"line\">&gt; ld -macosx_version_min 10.7.0 -lSystem -o &lt;executable&gt; &lt;object_filename.o&gt;  </span><br><span class=\"line\">&gt; ./&lt;executable&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"32-bit\"><a href=\"#32-bit\" class=\"headerlink\" title=\"32-bit\"></a>32-bit</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; /usr/local/bin/nasm -f macho &lt;filename.asm&gt; -o &lt;object_filename.o&gt;  </span><br><span class=\"line\">&gt; ld -macosx_version_min 10.7.0 -o &lt;executable&gt; &lt;object_filename.o&gt;   </span><br><span class=\"line\">&gt; ./&lt;executable&gt;</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><h3 id=\"64-bit-1\"><a href=\"#64-bit-1\" class=\"headerlink\" title=\"64-bit\"></a>64-bit</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; nasm -f elf64 &lt;filename.asm&gt;  -o &lt;object_filename.o&gt;  </span><br><span class=\"line\">&gt; ld -o &lt;executable&gt; &lt;object_filename.o&gt;  </span><br><span class=\"line\">&gt; ./&lt;executable&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"32-bit-1\"><a href=\"#32-bit-1\" class=\"headerlink\" title=\"32-bit\"></a>32-bit</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; nasm -f elf &lt;filename.asm&gt;  -o &lt;object_filename.o&gt;  </span><br><span class=\"line\">&gt; ld -m elf_i386 -o &lt;executable&gt; &lt;object_filename.o&gt;  </span><br><span class=\"line\">&gt; ./&lt;executable&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>加上 <code>-m elf_i386</code>，set emulation to 32-bit。在64-bit上的電腦compile 32-bit的檔案時，需加上這行。</li>\n</ul>\n<h1 id=\"System-Call-Table\"><a href=\"#System-Call-Table\" class=\"headerlink\" title=\"System Call Table\"></a>System Call Table</h1><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuc291cmNlLmFwcGxlLmNvbS9zb3VyY2UveG51L3hudS0xNTA0LjMuMTIvYnNkL2tlcm4vc3lzY2FsbHMubWFzdGVy\" title=\"https://opensource.apple.com/source/xnu/xnu-1504.3.12/bsd/kern/syscalls.master\">Reference for MacOS<i class=\"fa fa-external-link\"></i></span><ul>\n<li>first column is system call number  </li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW5mb3JtYXRpay5odHctZHJlc2Rlbi5kZS9+YmVjay9BU00vc3lzY2FsbF9saXN0Lmh0bWw=\" title=\"https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html\">System Call Table for linux 32-bit<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnJjaGFwbWFuLm9yZy9wb3N0cy9MaW51eF9TeXN0ZW1fQ2FsbF9UYWJsZV9mb3JfeDg2XzY0Lw==\" title=\"https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/\">System Call Table for linux 64-bit<i class=\"fa fa-external-link\"></i></span></li>\n<li><code>find . -name &#39;syscall.h&#39;</code></li>\n<li>在mac 64-bit時，呼叫syscall時，需要<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzUzOTA1NTYxLzY3NDI2OTE=\" title=\"https://stackoverflow.com/a/53905561/6742691\"><code>rax = Code + 0x2000000</code><i class=\"fa fa-external-link\"></i></span> <ul>\n<li>e.g.  sys_write =&gt; <code>0x2000004</code></li>\n</ul>\n</li>\n</ul>\n<p><strong><em>Notes!!</em></strong>  在32-bit MacOS上呼叫syscall與linux不同。MacOS 是將參數丟到stack上然後呼叫syscall，而非丟到register，所以無法直接將Linux 32-bit nasm code拿到MacOS上。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9maWxpcHBvLmlvL21ha2luZy1zeXN0ZW0tY2FsbHMtZnJvbS1hc3NlbWJseS1pbi1tYWMtb3MteC8=\" title=\"https://filippo.io/making-system-calls-from-assembly-in-mac-os-x/\">解釋點我<i class=\"fa fa-external-link\"></i></span></p>\n<h1 id=\"objdump\"><a href=\"#objdump\" class=\"headerlink\" title=\"objdump\"></a>objdump</h1><h2 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h2><ul>\n<li><code>-i</code>  列出可支援<code>-b</code>的檔案格式和<code>-m</code>的架構</li>\n<li><code>-f</code> 顯示File header資訊。 e.g. File format, architecture, flags and start address</li>\n<li><code>-h</code> 顯示Section Header。 e.g.  <code>.text</code> <code>.data</code></li>\n<li><code>-t</code> 顯示<a href=\"[http://wen00072.github.io/blog/2014/12/09/field-descriptions/](http://wen00072.github.io/blog/2014/12/09/field-descriptions/)\">Symbol Table</a></li>\n<li><code>-p</code> 顯示Program Header Table</li>\n<li><code>-x</code>  combination of <code>-f</code> <code>-h</code> <code>-t</code> <code>-p</code></li>\n<li><code>-d</code> 反組譯 code section</li>\n<li><code>-D</code> 反組譯 ALL section</li>\n<li><code>-b</code> 反組譯指定的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmluYXJ5X0ZpbGVfRGVzY3JpcHRvcl9saWJyYXJ5\" title=\"https://en.wikipedia.org/wiki/Binary_File_Descriptor_library\">BFD格式<i class=\"fa fa-external-link\"></i></span></li>\n<li><code>-m</code> 反組譯用的架構</li>\n</ul>\n<h1 id=\"readelf\"><a href=\"#readelf\" class=\"headerlink\" title=\"readelf\"></a>readelf</h1><ul>\n<li>與objdump的區別<ul>\n<li>不提供反組譯</li>\n<li>不借助BFD，直接讀取ELF file → <strong>訊息比較多</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Options-1\"><a href=\"#Options-1\" class=\"headerlink\" title=\"Options\"></a>Options</h2><ul>\n<li><code>-a</code> equivalent to: <code>-h</code> <code>-l</code> <code>-S</code>  <code>-s</code>  <code>-r</code> <code>-d</code> <code>-V</code> <code>-A</code> <code>-I</code></li>\n</ul>\n<h1 id=\"addr2line\"><a href=\"#addr2line\" class=\"headerlink\" title=\"addr2line\"></a>addr2line</h1><p>Translate an address in an executable or an offset in a section of an object file into file names and line numbers</p>\n<p>nasm在編譯時，必須加上<code>-g</code>  (to generate debug information)。<code>addr2line</code> only supports functions that have debug information</p>\n<h3 id=\"Options-2\"><a href=\"#Options-2\" class=\"headerlink\" title=\"Options\"></a>Options</h3><ul>\n<li><code>-a [addr, addr2..]</code> </li>\n<li><code>-e filename</code> the name of the executable</li>\n<li><code>-p</code> pretty print</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"Command\"><a href=\"#Command\" class=\"headerlink\" title=\"Command\"></a>Command</h1><h2 id=\"MacOS\"><a href=\"#MacOS\" class=\"headerlink\" title=\"MacOS\"></a>MacOS</h2><h3 id=\"64-bit\"><a href=\"#64-bit\" class=\"headerlink\" title=\"64-bit\"></a>64-bit</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; nasm -f macho64 &lt;filename.asm&gt; -o &lt;object_filename.o&gt;  </span><br><span class=\"line\">&gt; ld -macosx_version_min 10.7.0 -lSystem -o &lt;executable&gt; &lt;object_filename.o&gt;  </span><br><span class=\"line\">&gt; ./&lt;executable&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"32-bit\"><a href=\"#32-bit\" class=\"headerlink\" title=\"32-bit\"></a>32-bit</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; /usr/local/bin/nasm -f macho &lt;filename.asm&gt; -o &lt;object_filename.o&gt;  </span><br><span class=\"line\">&gt; ld -macosx_version_min 10.7.0 -o &lt;executable&gt; &lt;object_filename.o&gt;   </span><br><span class=\"line\">&gt; ./&lt;executable&gt;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><h3 id=\"64-bit-1\"><a href=\"#64-bit-1\" class=\"headerlink\" title=\"64-bit\"></a>64-bit</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; nasm -f elf64 &lt;filename.asm&gt;  -o &lt;object_filename.o&gt;  </span><br><span class=\"line\">&gt; ld -o &lt;executable&gt; &lt;object_filename.o&gt;  </span><br><span class=\"line\">&gt; ./&lt;executable&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"32-bit-1\"><a href=\"#32-bit-1\" class=\"headerlink\" title=\"32-bit\"></a>32-bit</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; nasm -f elf &lt;filename.asm&gt;  -o &lt;object_filename.o&gt;  </span><br><span class=\"line\">&gt; ld -m elf_i386 -o &lt;executable&gt; &lt;object_filename.o&gt;  </span><br><span class=\"line\">&gt; ./&lt;executable&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>加上 <code>-m elf_i386</code>，set emulation to 32-bit。在64-bit上的電腦compile 32-bit的檔案時，需加上這行。</li>\n</ul>\n<h1 id=\"System-Call-Table\"><a href=\"#System-Call-Table\" class=\"headerlink\" title=\"System Call Table\"></a>System Call Table</h1><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuc291cmNlLmFwcGxlLmNvbS9zb3VyY2UveG51L3hudS0xNTA0LjMuMTIvYnNkL2tlcm4vc3lzY2FsbHMubWFzdGVy\" title=\"https://opensource.apple.com/source/xnu/xnu-1504.3.12/bsd/kern/syscalls.master\">Reference for MacOS<i class=\"fa fa-external-link\"></i></span><ul>\n<li>first column is system call number  </li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW5mb3JtYXRpay5odHctZHJlc2Rlbi5kZS9+YmVjay9BU00vc3lzY2FsbF9saXN0Lmh0bWw=\" title=\"https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html\">System Call Table for linux 32-bit<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLnJjaGFwbWFuLm9yZy9wb3N0cy9MaW51eF9TeXN0ZW1fQ2FsbF9UYWJsZV9mb3JfeDg2XzY0Lw==\" title=\"https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/\">System Call Table for linux 64-bit<i class=\"fa fa-external-link\"></i></span></li>\n<li><code>find . -name &#39;syscall.h&#39;</code></li>\n<li>在mac 64-bit時，呼叫syscall時，需要<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzUzOTA1NTYxLzY3NDI2OTE=\" title=\"https://stackoverflow.com/a/53905561/6742691\"><code>rax = Code + 0x2000000</code><i class=\"fa fa-external-link\"></i></span> <ul>\n<li>e.g.  sys_write =&gt; <code>0x2000004</code></li>\n</ul>\n</li>\n</ul>\n<p><strong><em>Notes!!</em></strong>  在32-bit MacOS上呼叫syscall與linux不同。MacOS 是將參數丟到stack上然後呼叫syscall，而非丟到register，所以無法直接將Linux 32-bit nasm code拿到MacOS上。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9maWxpcHBvLmlvL21ha2luZy1zeXN0ZW0tY2FsbHMtZnJvbS1hc3NlbWJseS1pbi1tYWMtb3MteC8=\" title=\"https://filippo.io/making-system-calls-from-assembly-in-mac-os-x/\">解釋點我<i class=\"fa fa-external-link\"></i></span></p>\n<h1 id=\"objdump\"><a href=\"#objdump\" class=\"headerlink\" title=\"objdump\"></a>objdump</h1><h2 id=\"Options\"><a href=\"#Options\" class=\"headerlink\" title=\"Options\"></a>Options</h2><ul>\n<li><code>-i</code>  列出可支援<code>-b</code>的檔案格式和<code>-m</code>的架構</li>\n<li><code>-f</code> 顯示File header資訊。 e.g. File format, architecture, flags and start address</li>\n<li><code>-h</code> 顯示Section Header。 e.g.  <code>.text</code> <code>.data</code></li>\n<li><code>-t</code> 顯示<a href=\"[http://wen00072.github.io/blog/2014/12/09/field-descriptions/](http://wen00072.github.io/blog/2014/12/09/field-descriptions/)\">Symbol Table</a></li>\n<li><code>-p</code> 顯示Program Header Table</li>\n<li><code>-x</code>  combination of <code>-f</code> <code>-h</code> <code>-t</code> <code>-p</code></li>\n<li><code>-d</code> 反組譯 code section</li>\n<li><code>-D</code> 反組譯 ALL section</li>\n<li><code>-b</code> 反組譯指定的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmluYXJ5X0ZpbGVfRGVzY3JpcHRvcl9saWJyYXJ5\" title=\"https://en.wikipedia.org/wiki/Binary_File_Descriptor_library\">BFD格式<i class=\"fa fa-external-link\"></i></span></li>\n<li><code>-m</code> 反組譯用的架構</li>\n</ul>\n<h1 id=\"readelf\"><a href=\"#readelf\" class=\"headerlink\" title=\"readelf\"></a>readelf</h1><ul>\n<li>與objdump的區別<ul>\n<li>不提供反組譯</li>\n<li>不借助BFD，直接讀取ELF file → <strong>訊息比較多</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Options-1\"><a href=\"#Options-1\" class=\"headerlink\" title=\"Options\"></a>Options</h2><ul>\n<li><code>-a</code> equivalent to: <code>-h</code> <code>-l</code> <code>-S</code>  <code>-s</code>  <code>-r</code> <code>-d</code> <code>-V</code> <code>-A</code> <code>-I</code></li>\n</ul>\n<h1 id=\"addr2line\"><a href=\"#addr2line\" class=\"headerlink\" title=\"addr2line\"></a>addr2line</h1><p>Translate an address in an executable or an offset in a section of an object file into file names and line numbers</p>\n<p>nasm在編譯時，必須加上<code>-g</code>  (to generate debug information)。<code>addr2line</code> only supports functions that have debug information</p>\n<h3 id=\"Options-2\"><a href=\"#Options-2\" class=\"headerlink\" title=\"Options\"></a>Options</h3><ul>\n<li><code>-a [addr, addr2..]</code> </li>\n<li><code>-e filename</code> the name of the executable</li>\n<li><code>-p</code> pretty print</li>\n</ul>"},{"title":"Notes for better_tutorial in Nasm","mathjax":true,"sitemap":false,"date":"2019-05-20T07:02:24.000Z","_content":"\nThis note is based on the tutorial of [this project](https://github.com/he-mat/better_tutorial)\n\n# Chapter 1 & 2\n\n##  [NASM Data Type](https://nekosecurity.com/x86-64-assembly/part-4-data-types)\n\n| Type | Meaning            | Size     |\n| ---- | ------------------ | -------- |\n| db   | Define byte        | 1 byte   |\n| dw   | Define word        | 2 bytes  |\n| dd   | Define double word | 4 bytes  |\n| dq   | Define quad word   | 8 bytes  |\n| dt   | Define ten bytes   | 10 bytes |\n\n<!--more-->\n\n## [*global* directive](https://stackoverflow.com/a/17899048/6742691)\n\n- NASM specific  \n- entry point in executable file  \n\n- [default entry point name](https://nasm.us/doc/nasmdoc7.html#section-7.4.6): _start \n\n- to change the entry point name, specify -e parameter\n\n  `ld -e my_entry_point -o out a.o` \n\n\n\n## [int 80h & syscall](https://stackoverflow.com/a/12806910/6742691)\n\n- syscall is invalid on 32-bit , only on x86-64\n\n- `int 0x80` is a legacy way to invoke a system call and should be avoided.\n\n- vSDO: [1](http://adam8157.info/blog/2011/10/linux-vdso/) [2](https://cloud.tencent.com/developer/article/1073909)\n\n- [sysenter](http://articles.manugarg.com/systemcallinlinux2_6.html)\n\n  \n\n## [CR/LF](https://knowledge.ni.com/KnowledgeArticleDetails?id=kA00Z0000019KZDSA2)\n\n- `0Ah` is **L**ine **F**eed character, equals` \\n`.  將游標向下移，但不回到句首\n\n- `0Dh` is **C**arriage **R**eturn character, equals `\\r`. 將游標移到該行的句首\n\n\n\n# Chapter 3\n\n## CMP\n\n`cmp destination, source`   其實就等於 `destination - source`\n\nCMP instruction would change Zero, Carry, Overflow, Auxiliary and Parity flags.\n\n\n\nUnsigned integer operation\n\n| CMP Results          | ZF   | CF   |\n| -------------------- | ---- | ---- |\n| Destination < Source | 0    | 1    |\n| Destination > Source | 0    | 0    |\n| Destination = Source | 1    | 0    |\n\nSigned integer operation\n\n| CMP Results          | Flags   |\n| -------------------- | ------- |\n| Destination < Source | SF = OF |\n| Destination > Source | SF ≠ OF |\n| Destination = Source | ZF = 1  |\n\n\n\n## JZ\n\n`jz <label>`  jump to label if ZF = 1\n\n\n\n## INC\n\n`inc operand`   operand + 1 byte\n\n\n\n## [EFLAGS Register](http://finalfrank.pixnet.net/blog/post/22992166-x86-cpu-暫存器-register-大全)\n\n### Zero Flag\n\nThe flag is set when the result of an operation generates a result of zero\n\n### Carry Flag\n\n- **Unsigned** arithmetic operation\n- The flag is set in two situations\n  - 兩者相加的結果（大小）大於Register能存放的空間\n  - 當小數減掉大數時。\n    - 00000001 - 00000010 = 11111111  and CF is set (表示負號，因為是Unsigned)\n\n### Overflow Flag\n\n與Carry Flag相同，但用於**Signed** arithmetic operation\n\n### [Auxiliary Flag](https://en.wikipedia.org/wiki/Adjust_flag)\n\n### Sign Flag\n\nwhen the result of an operation generates a negative result\n\n### Parity Flag\n\n以`11101101`做例子，因為有6個1，是偶數個，所以PF=1\n\n\n\n# Chapter 5\n\n`%include \"<filename.inc>\"`    Include other source files into current code，類似C的include.   [Reference](https://nasm.us/doc/nasmdoc4.html#section-4.6.1)\n\n\n\n# Chapter 6\n\n`sys_write` 以 `0h` (NULL byte) 作為string終止符號(而非`0Ah` or `0Dh`)。所以如果想要`sys_write`在data段某個string，但是若每一個string最後都沒有以`0h`做結尾，那將會印出從給予位置到第一個null byte才會結束。\n\n\n\n# Chapter 9\n\n## Section .bss\n\n- **B**lock **S**tarted by **S**ymbol\n\n- 用於存放尚未初始化的變數。該段通常只包含變數名以及其長度(大小)\n- e.g.\n\n```\nSECTION .bss\nvariableName1:      resb    1  ;reserve one byte\nvariableName2:      resw    1  ;reserve one word\nvariableName3:      resd    1  ;reserve one double word\nvariableName4:      resq    1  ;reserve one quad word\nvariableName5:      rest    1  ;reserve one extended precision float\n```\n\n\n\n## sys_read\n\n- `eax`  3 \n- `ebx` 0 :  read from file descriptor STDIN\n- `ecx` :  address of the reserved space\n- `edx` :  number of  bytes to read\n\n\n\n# Chapter 11\n\n## div (unsigned division)\n\n$dest ← dest \\div source$\n\n| Dividend | Divisor | Quotient | Remainder |\n| -------- | ------- | -------- | --------- |\n| AX       | r/m8    | AL       | AH        |\n| DX:AX    | r/m16   | AX       | DX        |\n| EDX:EAX  | r/m32   | EAX      | EDX       |\n| RDX:RAX  | r/m64   | RAX      | RDX       |\n\nExample\n\n```\nSECTION .data\ndividend        dq      0000000800300020h\ndivisor         dd      00000100h\n\nSECTION .text\n  global _start\n\n_start:\n  mov   edx, [dividend+4]\n  mov   eax, [dividend]\n  div   dword [divisor]\t; need to specify the size of the content by using memory address\n```\n\n- **idiv (Signed divide)**\n\n\n\n# Chapter 12\n\n`add dest, source` \n\n   $dest ← dest + source$\n\n- EFLAGS are set according to the result\n\n- Check [this table](https://www.nasm.us/xdoc/2.09.07/html/nasmdocb.html#section-B.1.2) to find available combination of dest and source\n\n\n\n# Chapter 13\n\n`sub dest, source`   \n\n  $dest ← dest - source$\n\n\n\n# Chapter 14\n\n`mul src`  \n\n $eax ← eax \\times src$\n\n\n\n# Chapter 16\n\n## Initial Process Stack\n\n當主程式開始前，OS(exec)會先初始化stack，使其包含一些重要的資訊，如下：\n\n|                         High Address                         |\n| :----------------------------------------------------------: |\n|                      other system stuff                      |\n|                             ...                              |\n| [Auxiliary Vectors](http://articles.manugarg.com/aboutelfauxiliaryvectors.html)    *4 words each* |\n|                       Zero doubleword                        |\n|             Address of last environment argument             |\n|                             ...                              |\n|              Address of environment argument 2               |\n|       Address of environment argument 1   *doubleword*       |\n|                       Zero doubleword                        |\n|                   Address of Last Argument                   |\n|                             ...                              |\n|                    Address of Argument 2                     |\n|             Address of Argument 1   *doubleword*             |\n|           Argument Count [**esp**]   *doubleword*            |\n|                         Low Address                          |\n\n**esp的位址**一開始會存放argument的總數。而接下來存放的都是各argument的位址。Argument1預設是放置該程式的路徑，所以user輸入的參數會是從Argument2開始。\n\n在tutorial中，利用pop可以依序得到user輸入的command line argument。\n\nReference [1](http://refspecs.linuxfoundation.org/ELF/zSeries/lzsabi0_zSeries/x895.html)  [2](https://www.dreamincode.net/forums/topic/285550-nasm-linux-getting-command-line-parameters/)\n\n\n\n## Set register to zero\n\n`xor reg, reg`  該instruction是比較建議的方式來將register歸零，而非`mov reg, 0`\n\n```\nxor     reg          \n     10110110\n     10110110\n   ------------\n     00000000\n```\n\n [Refer](https://stackoverflow.com/a/33668295/6742691)\n\n\n\n## 在gdb中輸入command line argument\n\n`gdb --args  executable_name   arg1  arg2  arg3`\n\n[Refer](https://stackoverflow.com/questions/6121094/how-do-i-run-a-program-with-commandline-arguments-using-gdb-within-a-bash-script)\n\n\n\n# Chapter 17\n\n## local labels\n\n透過namespace使相同名字的label能夠重複使用，如下\n\n```\nlabel1:  \n    .loop:  \n       ...  \n       jmp .loop\t\t\t;這會跳到label1底下的.loop而非label2底下的.loop\n  \nlabel2:\n    .loop:  \n       ...  \n       jmp .loop  \n  \njmp label1.loop\t\t;當從其他地方要呼叫時，只要將global label(namespace)配上local label即可access\n```\n\n[Reference](https://www.tortall.net/projects/yasm/manual/html/nasm-local-label.html)\n\n\n\n# Chapter 19\n\n## sys_execve\n\n*executes a new program.*\n\n`eax`  11\n\n`ebx`  address of the file \n\n`ecx`  address of arguments\n\n`edx`  address of the environment variables\n\nthe address points to the variable in the section .data\n\n（其實該函數可以討論的更深，但我覺得之後研究OS再深入做筆記）\n\n\n\n# Chapter 20\n\n## sys_fork\n\n*invoke a child process*\n\n`eax`  2\n\nAfter invoking sys_fork, if `eax`  is 0, then it implies that the current process is a child process.\n","source":"_posts/Notes for better_tutorial in Nasm.md","raw":"---\ntitle: Notes for better_tutorial in Nasm\ntags:\n  - Assembly\n  - NASM\ncategories:\n  - Notes\nmathjax: true\nsitemap: false\ndate: 2019-05-20 15:02:24\n---\n\nThis note is based on the tutorial of [this project](https://github.com/he-mat/better_tutorial)\n\n# Chapter 1 & 2\n\n##  [NASM Data Type](https://nekosecurity.com/x86-64-assembly/part-4-data-types)\n\n| Type | Meaning            | Size     |\n| ---- | ------------------ | -------- |\n| db   | Define byte        | 1 byte   |\n| dw   | Define word        | 2 bytes  |\n| dd   | Define double word | 4 bytes  |\n| dq   | Define quad word   | 8 bytes  |\n| dt   | Define ten bytes   | 10 bytes |\n\n<!--more-->\n\n## [*global* directive](https://stackoverflow.com/a/17899048/6742691)\n\n- NASM specific  \n- entry point in executable file  \n\n- [default entry point name](https://nasm.us/doc/nasmdoc7.html#section-7.4.6): _start \n\n- to change the entry point name, specify -e parameter\n\n  `ld -e my_entry_point -o out a.o` \n\n\n\n## [int 80h & syscall](https://stackoverflow.com/a/12806910/6742691)\n\n- syscall is invalid on 32-bit , only on x86-64\n\n- `int 0x80` is a legacy way to invoke a system call and should be avoided.\n\n- vSDO: [1](http://adam8157.info/blog/2011/10/linux-vdso/) [2](https://cloud.tencent.com/developer/article/1073909)\n\n- [sysenter](http://articles.manugarg.com/systemcallinlinux2_6.html)\n\n  \n\n## [CR/LF](https://knowledge.ni.com/KnowledgeArticleDetails?id=kA00Z0000019KZDSA2)\n\n- `0Ah` is **L**ine **F**eed character, equals` \\n`.  將游標向下移，但不回到句首\n\n- `0Dh` is **C**arriage **R**eturn character, equals `\\r`. 將游標移到該行的句首\n\n\n\n# Chapter 3\n\n## CMP\n\n`cmp destination, source`   其實就等於 `destination - source`\n\nCMP instruction would change Zero, Carry, Overflow, Auxiliary and Parity flags.\n\n\n\nUnsigned integer operation\n\n| CMP Results          | ZF   | CF   |\n| -------------------- | ---- | ---- |\n| Destination < Source | 0    | 1    |\n| Destination > Source | 0    | 0    |\n| Destination = Source | 1    | 0    |\n\nSigned integer operation\n\n| CMP Results          | Flags   |\n| -------------------- | ------- |\n| Destination < Source | SF = OF |\n| Destination > Source | SF ≠ OF |\n| Destination = Source | ZF = 1  |\n\n\n\n## JZ\n\n`jz <label>`  jump to label if ZF = 1\n\n\n\n## INC\n\n`inc operand`   operand + 1 byte\n\n\n\n## [EFLAGS Register](http://finalfrank.pixnet.net/blog/post/22992166-x86-cpu-暫存器-register-大全)\n\n### Zero Flag\n\nThe flag is set when the result of an operation generates a result of zero\n\n### Carry Flag\n\n- **Unsigned** arithmetic operation\n- The flag is set in two situations\n  - 兩者相加的結果（大小）大於Register能存放的空間\n  - 當小數減掉大數時。\n    - 00000001 - 00000010 = 11111111  and CF is set (表示負號，因為是Unsigned)\n\n### Overflow Flag\n\n與Carry Flag相同，但用於**Signed** arithmetic operation\n\n### [Auxiliary Flag](https://en.wikipedia.org/wiki/Adjust_flag)\n\n### Sign Flag\n\nwhen the result of an operation generates a negative result\n\n### Parity Flag\n\n以`11101101`做例子，因為有6個1，是偶數個，所以PF=1\n\n\n\n# Chapter 5\n\n`%include \"<filename.inc>\"`    Include other source files into current code，類似C的include.   [Reference](https://nasm.us/doc/nasmdoc4.html#section-4.6.1)\n\n\n\n# Chapter 6\n\n`sys_write` 以 `0h` (NULL byte) 作為string終止符號(而非`0Ah` or `0Dh`)。所以如果想要`sys_write`在data段某個string，但是若每一個string最後都沒有以`0h`做結尾，那將會印出從給予位置到第一個null byte才會結束。\n\n\n\n# Chapter 9\n\n## Section .bss\n\n- **B**lock **S**tarted by **S**ymbol\n\n- 用於存放尚未初始化的變數。該段通常只包含變數名以及其長度(大小)\n- e.g.\n\n```\nSECTION .bss\nvariableName1:      resb    1  ;reserve one byte\nvariableName2:      resw    1  ;reserve one word\nvariableName3:      resd    1  ;reserve one double word\nvariableName4:      resq    1  ;reserve one quad word\nvariableName5:      rest    1  ;reserve one extended precision float\n```\n\n\n\n## sys_read\n\n- `eax`  3 \n- `ebx` 0 :  read from file descriptor STDIN\n- `ecx` :  address of the reserved space\n- `edx` :  number of  bytes to read\n\n\n\n# Chapter 11\n\n## div (unsigned division)\n\n$dest ← dest \\div source$\n\n| Dividend | Divisor | Quotient | Remainder |\n| -------- | ------- | -------- | --------- |\n| AX       | r/m8    | AL       | AH        |\n| DX:AX    | r/m16   | AX       | DX        |\n| EDX:EAX  | r/m32   | EAX      | EDX       |\n| RDX:RAX  | r/m64   | RAX      | RDX       |\n\nExample\n\n```\nSECTION .data\ndividend        dq      0000000800300020h\ndivisor         dd      00000100h\n\nSECTION .text\n  global _start\n\n_start:\n  mov   edx, [dividend+4]\n  mov   eax, [dividend]\n  div   dword [divisor]\t; need to specify the size of the content by using memory address\n```\n\n- **idiv (Signed divide)**\n\n\n\n# Chapter 12\n\n`add dest, source` \n\n   $dest ← dest + source$\n\n- EFLAGS are set according to the result\n\n- Check [this table](https://www.nasm.us/xdoc/2.09.07/html/nasmdocb.html#section-B.1.2) to find available combination of dest and source\n\n\n\n# Chapter 13\n\n`sub dest, source`   \n\n  $dest ← dest - source$\n\n\n\n# Chapter 14\n\n`mul src`  \n\n $eax ← eax \\times src$\n\n\n\n# Chapter 16\n\n## Initial Process Stack\n\n當主程式開始前，OS(exec)會先初始化stack，使其包含一些重要的資訊，如下：\n\n|                         High Address                         |\n| :----------------------------------------------------------: |\n|                      other system stuff                      |\n|                             ...                              |\n| [Auxiliary Vectors](http://articles.manugarg.com/aboutelfauxiliaryvectors.html)    *4 words each* |\n|                       Zero doubleword                        |\n|             Address of last environment argument             |\n|                             ...                              |\n|              Address of environment argument 2               |\n|       Address of environment argument 1   *doubleword*       |\n|                       Zero doubleword                        |\n|                   Address of Last Argument                   |\n|                             ...                              |\n|                    Address of Argument 2                     |\n|             Address of Argument 1   *doubleword*             |\n|           Argument Count [**esp**]   *doubleword*            |\n|                         Low Address                          |\n\n**esp的位址**一開始會存放argument的總數。而接下來存放的都是各argument的位址。Argument1預設是放置該程式的路徑，所以user輸入的參數會是從Argument2開始。\n\n在tutorial中，利用pop可以依序得到user輸入的command line argument。\n\nReference [1](http://refspecs.linuxfoundation.org/ELF/zSeries/lzsabi0_zSeries/x895.html)  [2](https://www.dreamincode.net/forums/topic/285550-nasm-linux-getting-command-line-parameters/)\n\n\n\n## Set register to zero\n\n`xor reg, reg`  該instruction是比較建議的方式來將register歸零，而非`mov reg, 0`\n\n```\nxor     reg          \n     10110110\n     10110110\n   ------------\n     00000000\n```\n\n [Refer](https://stackoverflow.com/a/33668295/6742691)\n\n\n\n## 在gdb中輸入command line argument\n\n`gdb --args  executable_name   arg1  arg2  arg3`\n\n[Refer](https://stackoverflow.com/questions/6121094/how-do-i-run-a-program-with-commandline-arguments-using-gdb-within-a-bash-script)\n\n\n\n# Chapter 17\n\n## local labels\n\n透過namespace使相同名字的label能夠重複使用，如下\n\n```\nlabel1:  \n    .loop:  \n       ...  \n       jmp .loop\t\t\t;這會跳到label1底下的.loop而非label2底下的.loop\n  \nlabel2:\n    .loop:  \n       ...  \n       jmp .loop  \n  \njmp label1.loop\t\t;當從其他地方要呼叫時，只要將global label(namespace)配上local label即可access\n```\n\n[Reference](https://www.tortall.net/projects/yasm/manual/html/nasm-local-label.html)\n\n\n\n# Chapter 19\n\n## sys_execve\n\n*executes a new program.*\n\n`eax`  11\n\n`ebx`  address of the file \n\n`ecx`  address of arguments\n\n`edx`  address of the environment variables\n\nthe address points to the variable in the section .data\n\n（其實該函數可以討論的更深，但我覺得之後研究OS再深入做筆記）\n\n\n\n# Chapter 20\n\n## sys_fork\n\n*invoke a child process*\n\n`eax`  2\n\nAfter invoking sys_fork, if `eax`  is 0, then it implies that the current process is a child process.\n","slug":"Notes for better_tutorial in Nasm","published":1,"updated":"2019-06-21T06:36:40.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxijp54t000ddvw9z32coc6q","content":"<p>This note is based on the tutorial of <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hlLW1hdC9iZXR0ZXJfdHV0b3JpYWw=\" title=\"https://github.com/he-mat/better_tutorial\">this project<i class=\"fa fa-external-link\"></i></span></p>\n<h1 id=\"Chapter-1-amp-2\"><a href=\"#Chapter-1-amp-2\" class=\"headerlink\" title=\"Chapter 1 &amp; 2\"></a>Chapter 1 &amp; 2</h1><h2 id=\"NASM-Data-Type\"><a href=\"#NASM-Data-Type\" class=\"headerlink\" title=\"NASM Data Type\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZWtvc2VjdXJpdHkuY29tL3g4Ni02NC1hc3NlbWJseS9wYXJ0LTQtZGF0YS10eXBlcw==\" title=\"https://nekosecurity.com/x86-64-assembly/part-4-data-types\">NASM Data Type<i class=\"fa fa-external-link\"></i></span></h2><table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Meaning</th>\n<th>Size</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>db</td>\n<td>Define byte</td>\n<td>1 byte</td>\n</tr>\n<tr>\n<td>dw</td>\n<td>Define word</td>\n<td>2 bytes</td>\n</tr>\n<tr>\n<td>dd</td>\n<td>Define double word</td>\n<td>4 bytes</td>\n</tr>\n<tr>\n<td>dq</td>\n<td>Define quad word</td>\n<td>8 bytes</td>\n</tr>\n<tr>\n<td>dt</td>\n<td>Define ten bytes</td>\n<td>10 bytes</td>\n</tr>\n</tbody></table>\n<a id=\"more\"></a>\n\n<h2 id=\"global-directive\"><a href=\"#global-directive\" class=\"headerlink\" title=\"global directive\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE3ODk5MDQ4LzY3NDI2OTE=\" title=\"https://stackoverflow.com/a/17899048/6742691\"><em>global</em> directive<i class=\"fa fa-external-link\"></i></span></h2><ul>\n<li><p>NASM specific  </p>\n</li>\n<li><p>entry point in executable file  </p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYXNtLnVzL2RvYy9uYXNtZG9jNy5odG1sI3NlY3Rpb24tNy40LjY=\" title=\"https://nasm.us/doc/nasmdoc7.html#section-7.4.6\">default entry point name<i class=\"fa fa-external-link\"></i></span>: _start </p>\n</li>\n<li><p>to change the entry point name, specify -e parameter</p>\n<p><code>ld -e my_entry_point -o out a.o</code> </p>\n</li>\n</ul>\n<h2 id=\"int-80h-amp-syscall\"><a href=\"#int-80h-amp-syscall\" class=\"headerlink\" title=\"int 80h &amp; syscall\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEyODA2OTEwLzY3NDI2OTE=\" title=\"https://stackoverflow.com/a/12806910/6742691\">int 80h &amp; syscall<i class=\"fa fa-external-link\"></i></span></h2><ul>\n<li><p>syscall is invalid on 32-bit , only on x86-64</p>\n</li>\n<li><p><code>int 0x80</code> is a legacy way to invoke a system call and should be avoided.</p>\n</li>\n<li><p>vSDO: <span class=\"exturl\" data-url=\"aHR0cDovL2FkYW04MTU3LmluZm8vYmxvZy8yMDExLzEwL2xpbnV4LXZkc28v\" title=\"http://adam8157.info/blog/2011/10/linux-vdso/\">1<i class=\"fa fa-external-link\"></i></span> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xMDczOTA5\" title=\"https://cloud.tencent.com/developer/article/1073909\">2<i class=\"fa fa-external-link\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL2FydGljbGVzLm1hbnVnYXJnLmNvbS9zeXN0ZW1jYWxsaW5saW51eDJfNi5odG1s\" title=\"http://articles.manugarg.com/systemcallinlinux2_6.html\">sysenter<i class=\"fa fa-external-link\"></i></span></p>\n</li>\n</ul>\n<h2 id=\"CR-LF\"><a href=\"#CR-LF\" class=\"headerlink\" title=\"CR/LF\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rbm93bGVkZ2UubmkuY29tL0tub3dsZWRnZUFydGljbGVEZXRhaWxzP2lkPWtBMDBaMDAwMDAxOUtaRFNBMg==\" title=\"https://knowledge.ni.com/KnowledgeArticleDetails?id=kA00Z0000019KZDSA2\">CR/LF<i class=\"fa fa-external-link\"></i></span></h2><ul>\n<li><p><code>0Ah</code> is <strong>L</strong>ine <strong>F</strong>eed character, equals<code>\\n</code>.  將游標向下移，但不回到句首</p>\n</li>\n<li><p><code>0Dh</code> is <strong>C</strong>arriage <strong>R</strong>eturn character, equals <code>\\r</code>. 將游標移到該行的句首</p>\n</li>\n</ul>\n<h1 id=\"Chapter-3\"><a href=\"#Chapter-3\" class=\"headerlink\" title=\"Chapter 3\"></a>Chapter 3</h1><h2 id=\"CMP\"><a href=\"#CMP\" class=\"headerlink\" title=\"CMP\"></a>CMP</h2><p><code>cmp destination, source</code>   其實就等於 <code>destination - source</code></p>\n<p>CMP instruction would change Zero, Carry, Overflow, Auxiliary and Parity flags.</p>\n<p>Unsigned integer operation</p>\n<table>\n<thead>\n<tr>\n<th>CMP Results</th>\n<th>ZF</th>\n<th>CF</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Destination &lt; Source</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Destination &gt; Source</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Destination = Source</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>Signed integer operation</p>\n<table>\n<thead>\n<tr>\n<th>CMP Results</th>\n<th>Flags</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Destination &lt; Source</td>\n<td>SF = OF</td>\n</tr>\n<tr>\n<td>Destination &gt; Source</td>\n<td>SF ≠ OF</td>\n</tr>\n<tr>\n<td>Destination = Source</td>\n<td>ZF = 1</td>\n</tr>\n</tbody></table>\n<h2 id=\"JZ\"><a href=\"#JZ\" class=\"headerlink\" title=\"JZ\"></a>JZ</h2><p><code>jz &lt;label&gt;</code>  jump to label if ZF = 1</p>\n<h2 id=\"INC\"><a href=\"#INC\" class=\"headerlink\" title=\"INC\"></a>INC</h2><p><code>inc operand</code>   operand + 1 byte</p>\n<h2 id=\"EFLAGS-Register\"><a href=\"#EFLAGS-Register\" class=\"headerlink\" title=\"EFLAGS Register\"></a><span class=\"exturl\" data-url=\"aHR0cDovL2ZpbmFsZnJhbmsucGl4bmV0Lm5ldC9ibG9nL3Bvc3QvMjI5OTIxNjYteDg2LWNwdS3mmqvlrZjlmagtcmVnaXN0ZXIt5aSn5YWo\" title=\"http://finalfrank.pixnet.net/blog/post/22992166-x86-cpu-暫存器-register-大全\">EFLAGS Register<i class=\"fa fa-external-link\"></i></span></h2><h3 id=\"Zero-Flag\"><a href=\"#Zero-Flag\" class=\"headerlink\" title=\"Zero Flag\"></a>Zero Flag</h3><p>The flag is set when the result of an operation generates a result of zero</p>\n<h3 id=\"Carry-Flag\"><a href=\"#Carry-Flag\" class=\"headerlink\" title=\"Carry Flag\"></a>Carry Flag</h3><ul>\n<li><strong>Unsigned</strong> arithmetic operation</li>\n<li>The flag is set in two situations<ul>\n<li>兩者相加的結果（大小）大於Register能存放的空間</li>\n<li>當小數減掉大數時。<ul>\n<li>00000001 - 00000010 = 11111111  and CF is set (表示負號，因為是Unsigned)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Overflow-Flag\"><a href=\"#Overflow-Flag\" class=\"headerlink\" title=\"Overflow Flag\"></a>Overflow Flag</h3><p>與Carry Flag相同，但用於<strong>Signed</strong> arithmetic operation</p>\n<h3 id=\"Auxiliary-Flag\"><a href=\"#Auxiliary-Flag\" class=\"headerlink\" title=\"Auxiliary Flag\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQWRqdXN0X2ZsYWc=\" title=\"https://en.wikipedia.org/wiki/Adjust_flag\">Auxiliary Flag<i class=\"fa fa-external-link\"></i></span></h3><h3 id=\"Sign-Flag\"><a href=\"#Sign-Flag\" class=\"headerlink\" title=\"Sign Flag\"></a>Sign Flag</h3><p>when the result of an operation generates a negative result</p>\n<h3 id=\"Parity-Flag\"><a href=\"#Parity-Flag\" class=\"headerlink\" title=\"Parity Flag\"></a>Parity Flag</h3><p>以<code>11101101</code>做例子，因為有6個1，是偶數個，所以PF=1</p>\n<h1 id=\"Chapter-5\"><a href=\"#Chapter-5\" class=\"headerlink\" title=\"Chapter 5\"></a>Chapter 5</h1><p><code>%include &quot;&lt;filename.inc&gt;&quot;</code>    Include other source files into current code，類似C的include.   <span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYXNtLnVzL2RvYy9uYXNtZG9jNC5odG1sI3NlY3Rpb24tNC42LjE=\" title=\"https://nasm.us/doc/nasmdoc4.html#section-4.6.1\">Reference<i class=\"fa fa-external-link\"></i></span></p>\n<h1 id=\"Chapter-6\"><a href=\"#Chapter-6\" class=\"headerlink\" title=\"Chapter 6\"></a>Chapter 6</h1><p><code>sys_write</code> 以 <code>0h</code> (NULL byte) 作為string終止符號(而非<code>0Ah</code> or <code>0Dh</code>)。所以如果想要<code>sys_write</code>在data段某個string，但是若每一個string最後都沒有以<code>0h</code>做結尾，那將會印出從給予位置到第一個null byte才會結束。</p>\n<h1 id=\"Chapter-9\"><a href=\"#Chapter-9\" class=\"headerlink\" title=\"Chapter 9\"></a>Chapter 9</h1><h2 id=\"Section-bss\"><a href=\"#Section-bss\" class=\"headerlink\" title=\"Section .bss\"></a>Section .bss</h2><ul>\n<li><p><strong>B</strong>lock <strong>S</strong>tarted by <strong>S</strong>ymbol</p>\n</li>\n<li><p>用於存放尚未初始化的變數。該段通常只包含變數名以及其長度(大小)</p>\n</li>\n<li><p>e.g.</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SECTION .bss</span><br><span class=\"line\">variableName1:      resb    1  ;reserve one byte</span><br><span class=\"line\">variableName2:      resw    1  ;reserve one word</span><br><span class=\"line\">variableName3:      resd    1  ;reserve one double word</span><br><span class=\"line\">variableName4:      resq    1  ;reserve one quad word</span><br><span class=\"line\">variableName5:      rest    1  ;reserve one extended precision float</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sys-read\"><a href=\"#sys-read\" class=\"headerlink\" title=\"sys_read\"></a>sys_read</h2><ul>\n<li><code>eax</code>  3 </li>\n<li><code>ebx</code> 0 :  read from file descriptor STDIN</li>\n<li><code>ecx</code> :  address of the reserved space</li>\n<li><code>edx</code> :  number of  bytes to read</li>\n</ul>\n<h1 id=\"Chapter-11\"><a href=\"#Chapter-11\" class=\"headerlink\" title=\"Chapter 11\"></a>Chapter 11</h1><h2 id=\"div-unsigned-division\"><a href=\"#div-unsigned-division\" class=\"headerlink\" title=\"div (unsigned division)\"></a>div (unsigned division)</h2><p>$dest ← dest \\div source$</p>\n<table>\n<thead>\n<tr>\n<th>Dividend</th>\n<th>Divisor</th>\n<th>Quotient</th>\n<th>Remainder</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AX</td>\n<td>r/m8</td>\n<td>AL</td>\n<td>AH</td>\n</tr>\n<tr>\n<td>DX:AX</td>\n<td>r/m16</td>\n<td>AX</td>\n<td>DX</td>\n</tr>\n<tr>\n<td>EDX:EAX</td>\n<td>r/m32</td>\n<td>EAX</td>\n<td>EDX</td>\n</tr>\n<tr>\n<td>RDX:RAX</td>\n<td>r/m64</td>\n<td>RAX</td>\n<td>RDX</td>\n</tr>\n</tbody></table>\n<p>Example</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SECTION .data</span><br><span class=\"line\">dividend        dq      0000000800300020h</span><br><span class=\"line\">divisor         dd      00000100h</span><br><span class=\"line\"></span><br><span class=\"line\">SECTION .text</span><br><span class=\"line\">  global _start</span><br><span class=\"line\"></span><br><span class=\"line\">_start:</span><br><span class=\"line\">  mov   edx, [dividend+4]</span><br><span class=\"line\">  mov   eax, [dividend]</span><br><span class=\"line\">  div   dword [divisor]\t; need to specify the size of the content by using memory address</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>idiv (Signed divide)</strong></li>\n</ul>\n<h1 id=\"Chapter-12\"><a href=\"#Chapter-12\" class=\"headerlink\" title=\"Chapter 12\"></a>Chapter 12</h1><p><code>add dest, source</code> </p>\n<p>   $dest ← dest + source$</p>\n<ul>\n<li><p>EFLAGS are set according to the result</p>\n</li>\n<li><p>Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmFzbS51cy94ZG9jLzIuMDkuMDcvaHRtbC9uYXNtZG9jYi5odG1sI3NlY3Rpb24tQi4xLjI=\" title=\"https://www.nasm.us/xdoc/2.09.07/html/nasmdocb.html#section-B.1.2\">this table<i class=\"fa fa-external-link\"></i></span> to find available combination of dest and source</p>\n</li>\n</ul>\n<h1 id=\"Chapter-13\"><a href=\"#Chapter-13\" class=\"headerlink\" title=\"Chapter 13\"></a>Chapter 13</h1><p><code>sub dest, source</code>   </p>\n<p>  $dest ← dest - source$</p>\n<h1 id=\"Chapter-14\"><a href=\"#Chapter-14\" class=\"headerlink\" title=\"Chapter 14\"></a>Chapter 14</h1><p><code>mul src</code>  </p>\n<p> $eax ← eax \\times src$</p>\n<h1 id=\"Chapter-16\"><a href=\"#Chapter-16\" class=\"headerlink\" title=\"Chapter 16\"></a>Chapter 16</h1><h2 id=\"Initial-Process-Stack\"><a href=\"#Initial-Process-Stack\" class=\"headerlink\" title=\"Initial Process Stack\"></a>Initial Process Stack</h2><p>當主程式開始前，OS(exec)會先初始化stack，使其包含一些重要的資訊，如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">High Address</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">other system stuff</td>\n</tr>\n<tr>\n<td align=\"center\">…</td>\n</tr>\n<tr>\n<td align=\"center\"><span class=\"exturl\" data-url=\"aHR0cDovL2FydGljbGVzLm1hbnVnYXJnLmNvbS9hYm91dGVsZmF1eGlsaWFyeXZlY3RvcnMuaHRtbA==\" title=\"http://articles.manugarg.com/aboutelfauxiliaryvectors.html\">Auxiliary Vectors<i class=\"fa fa-external-link\"></i></span>    <em>4 words each</em></td>\n</tr>\n<tr>\n<td align=\"center\">Zero doubleword</td>\n</tr>\n<tr>\n<td align=\"center\">Address of last environment argument</td>\n</tr>\n<tr>\n<td align=\"center\">…</td>\n</tr>\n<tr>\n<td align=\"center\">Address of environment argument 2</td>\n</tr>\n<tr>\n<td align=\"center\">Address of environment argument 1   <em>doubleword</em></td>\n</tr>\n<tr>\n<td align=\"center\">Zero doubleword</td>\n</tr>\n<tr>\n<td align=\"center\">Address of Last Argument</td>\n</tr>\n<tr>\n<td align=\"center\">…</td>\n</tr>\n<tr>\n<td align=\"center\">Address of Argument 2</td>\n</tr>\n<tr>\n<td align=\"center\">Address of Argument 1   <em>doubleword</em></td>\n</tr>\n<tr>\n<td align=\"center\">Argument Count [<strong>esp</strong>]   <em>doubleword</em></td>\n</tr>\n<tr>\n<td align=\"center\">Low Address</td>\n</tr>\n</tbody></table>\n<p><strong>esp的位址</strong>一開始會存放argument的總數。而接下來存放的都是各argument的位址。Argument1預設是放置該程式的路徑，所以user輸入的參數會是從Argument2開始。</p>\n<p>在tutorial中，利用pop可以依序得到user輸入的command line argument。</p>\n<p>Reference <span class=\"exturl\" data-url=\"aHR0cDovL3JlZnNwZWNzLmxpbnV4Zm91bmRhdGlvbi5vcmcvRUxGL3pTZXJpZXMvbHpzYWJpMF96U2VyaWVzL3g4OTUuaHRtbA==\" title=\"http://refspecs.linuxfoundation.org/ELF/zSeries/lzsabi0_zSeries/x895.html\">1<i class=\"fa fa-external-link\"></i></span>  <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZHJlYW1pbmNvZGUubmV0L2ZvcnVtcy90b3BpYy8yODU1NTAtbmFzbS1saW51eC1nZXR0aW5nLWNvbW1hbmQtbGluZS1wYXJhbWV0ZXJzLw==\" title=\"https://www.dreamincode.net/forums/topic/285550-nasm-linux-getting-command-line-parameters/\">2<i class=\"fa fa-external-link\"></i></span></p>\n<h2 id=\"Set-register-to-zero\"><a href=\"#Set-register-to-zero\" class=\"headerlink\" title=\"Set register to zero\"></a>Set register to zero</h2><p><code>xor reg, reg</code>  該instruction是比較建議的方式來將register歸零，而非<code>mov reg, 0</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xor     reg          </span><br><span class=\"line\">     10110110</span><br><span class=\"line\">     10110110</span><br><span class=\"line\">   ------------</span><br><span class=\"line\">     00000000</span><br></pre></td></tr></table></figure>\n\n<p> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzMzNjY4Mjk1LzY3NDI2OTE=\" title=\"https://stackoverflow.com/a/33668295/6742691\">Refer<i class=\"fa fa-external-link\"></i></span></p>\n<h2 id=\"在gdb中輸入command-line-argument\"><a href=\"#在gdb中輸入command-line-argument\" class=\"headerlink\" title=\"在gdb中輸入command line argument\"></a>在gdb中輸入command line argument</h2><p><code>gdb --args  executable_name   arg1  arg2  arg3</code></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjEyMTA5NC9ob3ctZG8taS1ydW4tYS1wcm9ncmFtLXdpdGgtY29tbWFuZGxpbmUtYXJndW1lbnRzLXVzaW5nLWdkYi13aXRoaW4tYS1iYXNoLXNjcmlwdA==\" title=\"https://stackoverflow.com/questions/6121094/how-do-i-run-a-program-with-commandline-arguments-using-gdb-within-a-bash-script\">Refer<i class=\"fa fa-external-link\"></i></span></p>\n<h1 id=\"Chapter-17\"><a href=\"#Chapter-17\" class=\"headerlink\" title=\"Chapter 17\"></a>Chapter 17</h1><h2 id=\"local-labels\"><a href=\"#local-labels\" class=\"headerlink\" title=\"local labels\"></a>local labels</h2><p>透過namespace使相同名字的label能夠重複使用，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label1:  </span><br><span class=\"line\">    .loop:  </span><br><span class=\"line\">       ...  </span><br><span class=\"line\">       jmp .loop\t\t\t;這會跳到label1底下的.loop而非label2底下的.loop</span><br><span class=\"line\">  </span><br><span class=\"line\">label2:</span><br><span class=\"line\">    .loop:  </span><br><span class=\"line\">       ...  </span><br><span class=\"line\">       jmp .loop  </span><br><span class=\"line\">  </span><br><span class=\"line\">jmp label1.loop\t\t;當從其他地方要呼叫時，只要將global label(namespace)配上local label即可access</span><br></pre></td></tr></table></figure>\n\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudG9ydGFsbC5uZXQvcHJvamVjdHMveWFzbS9tYW51YWwvaHRtbC9uYXNtLWxvY2FsLWxhYmVsLmh0bWw=\" title=\"https://www.tortall.net/projects/yasm/manual/html/nasm-local-label.html\">Reference<i class=\"fa fa-external-link\"></i></span></p>\n<h1 id=\"Chapter-19\"><a href=\"#Chapter-19\" class=\"headerlink\" title=\"Chapter 19\"></a>Chapter 19</h1><h2 id=\"sys-execve\"><a href=\"#sys-execve\" class=\"headerlink\" title=\"sys_execve\"></a>sys_execve</h2><p><em>executes a new program.</em></p>\n<p><code>eax</code>  11</p>\n<p><code>ebx</code>  address of the file </p>\n<p><code>ecx</code>  address of arguments</p>\n<p><code>edx</code>  address of the environment variables</p>\n<p>the address points to the variable in the section .data</p>\n<p>（其實該函數可以討論的更深，但我覺得之後研究OS再深入做筆記）</p>\n<h1 id=\"Chapter-20\"><a href=\"#Chapter-20\" class=\"headerlink\" title=\"Chapter 20\"></a>Chapter 20</h1><h2 id=\"sys-fork\"><a href=\"#sys-fork\" class=\"headerlink\" title=\"sys_fork\"></a>sys_fork</h2><p><em>invoke a child process</em></p>\n<p><code>eax</code>  2</p>\n<p>After invoking sys_fork, if <code>eax</code>  is 0, then it implies that the current process is a child process.</p>\n","site":{"data":{}},"excerpt":"<p>This note is based on the tutorial of <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hlLW1hdC9iZXR0ZXJfdHV0b3JpYWw=\" title=\"https://github.com/he-mat/better_tutorial\">this project<i class=\"fa fa-external-link\"></i></span></p>\n<h1 id=\"Chapter-1-amp-2\"><a href=\"#Chapter-1-amp-2\" class=\"headerlink\" title=\"Chapter 1 &amp; 2\"></a>Chapter 1 &amp; 2</h1><h2 id=\"NASM-Data-Type\"><a href=\"#NASM-Data-Type\" class=\"headerlink\" title=\"NASM Data Type\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZWtvc2VjdXJpdHkuY29tL3g4Ni02NC1hc3NlbWJseS9wYXJ0LTQtZGF0YS10eXBlcw==\" title=\"https://nekosecurity.com/x86-64-assembly/part-4-data-types\">NASM Data Type<i class=\"fa fa-external-link\"></i></span></h2><table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Meaning</th>\n<th>Size</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>db</td>\n<td>Define byte</td>\n<td>1 byte</td>\n</tr>\n<tr>\n<td>dw</td>\n<td>Define word</td>\n<td>2 bytes</td>\n</tr>\n<tr>\n<td>dd</td>\n<td>Define double word</td>\n<td>4 bytes</td>\n</tr>\n<tr>\n<td>dq</td>\n<td>Define quad word</td>\n<td>8 bytes</td>\n</tr>\n<tr>\n<td>dt</td>\n<td>Define ten bytes</td>\n<td>10 bytes</td>\n</tr>\n</tbody></table>","more":"<h2 id=\"global-directive\"><a href=\"#global-directive\" class=\"headerlink\" title=\"global directive\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE3ODk5MDQ4LzY3NDI2OTE=\" title=\"https://stackoverflow.com/a/17899048/6742691\"><em>global</em> directive<i class=\"fa fa-external-link\"></i></span></h2><ul>\n<li><p>NASM specific  </p>\n</li>\n<li><p>entry point in executable file  </p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYXNtLnVzL2RvYy9uYXNtZG9jNy5odG1sI3NlY3Rpb24tNy40LjY=\" title=\"https://nasm.us/doc/nasmdoc7.html#section-7.4.6\">default entry point name<i class=\"fa fa-external-link\"></i></span>: _start </p>\n</li>\n<li><p>to change the entry point name, specify -e parameter</p>\n<p><code>ld -e my_entry_point -o out a.o</code> </p>\n</li>\n</ul>\n<h2 id=\"int-80h-amp-syscall\"><a href=\"#int-80h-amp-syscall\" class=\"headerlink\" title=\"int 80h &amp; syscall\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzEyODA2OTEwLzY3NDI2OTE=\" title=\"https://stackoverflow.com/a/12806910/6742691\">int 80h &amp; syscall<i class=\"fa fa-external-link\"></i></span></h2><ul>\n<li><p>syscall is invalid on 32-bit , only on x86-64</p>\n</li>\n<li><p><code>int 0x80</code> is a legacy way to invoke a system call and should be avoided.</p>\n</li>\n<li><p>vSDO: <span class=\"exturl\" data-url=\"aHR0cDovL2FkYW04MTU3LmluZm8vYmxvZy8yMDExLzEwL2xpbnV4LXZkc28v\" title=\"http://adam8157.info/blog/2011/10/linux-vdso/\">1<i class=\"fa fa-external-link\"></i></span> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xMDczOTA5\" title=\"https://cloud.tencent.com/developer/article/1073909\">2<i class=\"fa fa-external-link\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL2FydGljbGVzLm1hbnVnYXJnLmNvbS9zeXN0ZW1jYWxsaW5saW51eDJfNi5odG1s\" title=\"http://articles.manugarg.com/systemcallinlinux2_6.html\">sysenter<i class=\"fa fa-external-link\"></i></span></p>\n</li>\n</ul>\n<h2 id=\"CR-LF\"><a href=\"#CR-LF\" class=\"headerlink\" title=\"CR/LF\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rbm93bGVkZ2UubmkuY29tL0tub3dsZWRnZUFydGljbGVEZXRhaWxzP2lkPWtBMDBaMDAwMDAxOUtaRFNBMg==\" title=\"https://knowledge.ni.com/KnowledgeArticleDetails?id=kA00Z0000019KZDSA2\">CR/LF<i class=\"fa fa-external-link\"></i></span></h2><ul>\n<li><p><code>0Ah</code> is <strong>L</strong>ine <strong>F</strong>eed character, equals<code>\\n</code>.  將游標向下移，但不回到句首</p>\n</li>\n<li><p><code>0Dh</code> is <strong>C</strong>arriage <strong>R</strong>eturn character, equals <code>\\r</code>. 將游標移到該行的句首</p>\n</li>\n</ul>\n<h1 id=\"Chapter-3\"><a href=\"#Chapter-3\" class=\"headerlink\" title=\"Chapter 3\"></a>Chapter 3</h1><h2 id=\"CMP\"><a href=\"#CMP\" class=\"headerlink\" title=\"CMP\"></a>CMP</h2><p><code>cmp destination, source</code>   其實就等於 <code>destination - source</code></p>\n<p>CMP instruction would change Zero, Carry, Overflow, Auxiliary and Parity flags.</p>\n<p>Unsigned integer operation</p>\n<table>\n<thead>\n<tr>\n<th>CMP Results</th>\n<th>ZF</th>\n<th>CF</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Destination &lt; Source</td>\n<td>0</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Destination &gt; Source</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Destination = Source</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>Signed integer operation</p>\n<table>\n<thead>\n<tr>\n<th>CMP Results</th>\n<th>Flags</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Destination &lt; Source</td>\n<td>SF = OF</td>\n</tr>\n<tr>\n<td>Destination &gt; Source</td>\n<td>SF ≠ OF</td>\n</tr>\n<tr>\n<td>Destination = Source</td>\n<td>ZF = 1</td>\n</tr>\n</tbody></table>\n<h2 id=\"JZ\"><a href=\"#JZ\" class=\"headerlink\" title=\"JZ\"></a>JZ</h2><p><code>jz &lt;label&gt;</code>  jump to label if ZF = 1</p>\n<h2 id=\"INC\"><a href=\"#INC\" class=\"headerlink\" title=\"INC\"></a>INC</h2><p><code>inc operand</code>   operand + 1 byte</p>\n<h2 id=\"EFLAGS-Register\"><a href=\"#EFLAGS-Register\" class=\"headerlink\" title=\"EFLAGS Register\"></a><span class=\"exturl\" data-url=\"aHR0cDovL2ZpbmFsZnJhbmsucGl4bmV0Lm5ldC9ibG9nL3Bvc3QvMjI5OTIxNjYteDg2LWNwdS3mmqvlrZjlmagtcmVnaXN0ZXIt5aSn5YWo\" title=\"http://finalfrank.pixnet.net/blog/post/22992166-x86-cpu-暫存器-register-大全\">EFLAGS Register<i class=\"fa fa-external-link\"></i></span></h2><h3 id=\"Zero-Flag\"><a href=\"#Zero-Flag\" class=\"headerlink\" title=\"Zero Flag\"></a>Zero Flag</h3><p>The flag is set when the result of an operation generates a result of zero</p>\n<h3 id=\"Carry-Flag\"><a href=\"#Carry-Flag\" class=\"headerlink\" title=\"Carry Flag\"></a>Carry Flag</h3><ul>\n<li><strong>Unsigned</strong> arithmetic operation</li>\n<li>The flag is set in two situations<ul>\n<li>兩者相加的結果（大小）大於Register能存放的空間</li>\n<li>當小數減掉大數時。<ul>\n<li>00000001 - 00000010 = 11111111  and CF is set (表示負號，因為是Unsigned)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Overflow-Flag\"><a href=\"#Overflow-Flag\" class=\"headerlink\" title=\"Overflow Flag\"></a>Overflow Flag</h3><p>與Carry Flag相同，但用於<strong>Signed</strong> arithmetic operation</p>\n<h3 id=\"Auxiliary-Flag\"><a href=\"#Auxiliary-Flag\" class=\"headerlink\" title=\"Auxiliary Flag\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQWRqdXN0X2ZsYWc=\" title=\"https://en.wikipedia.org/wiki/Adjust_flag\">Auxiliary Flag<i class=\"fa fa-external-link\"></i></span></h3><h3 id=\"Sign-Flag\"><a href=\"#Sign-Flag\" class=\"headerlink\" title=\"Sign Flag\"></a>Sign Flag</h3><p>when the result of an operation generates a negative result</p>\n<h3 id=\"Parity-Flag\"><a href=\"#Parity-Flag\" class=\"headerlink\" title=\"Parity Flag\"></a>Parity Flag</h3><p>以<code>11101101</code>做例子，因為有6個1，是偶數個，所以PF=1</p>\n<h1 id=\"Chapter-5\"><a href=\"#Chapter-5\" class=\"headerlink\" title=\"Chapter 5\"></a>Chapter 5</h1><p><code>%include &quot;&lt;filename.inc&gt;&quot;</code>    Include other source files into current code，類似C的include.   <span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYXNtLnVzL2RvYy9uYXNtZG9jNC5odG1sI3NlY3Rpb24tNC42LjE=\" title=\"https://nasm.us/doc/nasmdoc4.html#section-4.6.1\">Reference<i class=\"fa fa-external-link\"></i></span></p>\n<h1 id=\"Chapter-6\"><a href=\"#Chapter-6\" class=\"headerlink\" title=\"Chapter 6\"></a>Chapter 6</h1><p><code>sys_write</code> 以 <code>0h</code> (NULL byte) 作為string終止符號(而非<code>0Ah</code> or <code>0Dh</code>)。所以如果想要<code>sys_write</code>在data段某個string，但是若每一個string最後都沒有以<code>0h</code>做結尾，那將會印出從給予位置到第一個null byte才會結束。</p>\n<h1 id=\"Chapter-9\"><a href=\"#Chapter-9\" class=\"headerlink\" title=\"Chapter 9\"></a>Chapter 9</h1><h2 id=\"Section-bss\"><a href=\"#Section-bss\" class=\"headerlink\" title=\"Section .bss\"></a>Section .bss</h2><ul>\n<li><p><strong>B</strong>lock <strong>S</strong>tarted by <strong>S</strong>ymbol</p>\n</li>\n<li><p>用於存放尚未初始化的變數。該段通常只包含變數名以及其長度(大小)</p>\n</li>\n<li><p>e.g.</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SECTION .bss</span><br><span class=\"line\">variableName1:      resb    1  ;reserve one byte</span><br><span class=\"line\">variableName2:      resw    1  ;reserve one word</span><br><span class=\"line\">variableName3:      resd    1  ;reserve one double word</span><br><span class=\"line\">variableName4:      resq    1  ;reserve one quad word</span><br><span class=\"line\">variableName5:      rest    1  ;reserve one extended precision float</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sys-read\"><a href=\"#sys-read\" class=\"headerlink\" title=\"sys_read\"></a>sys_read</h2><ul>\n<li><code>eax</code>  3 </li>\n<li><code>ebx</code> 0 :  read from file descriptor STDIN</li>\n<li><code>ecx</code> :  address of the reserved space</li>\n<li><code>edx</code> :  number of  bytes to read</li>\n</ul>\n<h1 id=\"Chapter-11\"><a href=\"#Chapter-11\" class=\"headerlink\" title=\"Chapter 11\"></a>Chapter 11</h1><h2 id=\"div-unsigned-division\"><a href=\"#div-unsigned-division\" class=\"headerlink\" title=\"div (unsigned division)\"></a>div (unsigned division)</h2><p>$dest ← dest \\div source$</p>\n<table>\n<thead>\n<tr>\n<th>Dividend</th>\n<th>Divisor</th>\n<th>Quotient</th>\n<th>Remainder</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AX</td>\n<td>r/m8</td>\n<td>AL</td>\n<td>AH</td>\n</tr>\n<tr>\n<td>DX:AX</td>\n<td>r/m16</td>\n<td>AX</td>\n<td>DX</td>\n</tr>\n<tr>\n<td>EDX:EAX</td>\n<td>r/m32</td>\n<td>EAX</td>\n<td>EDX</td>\n</tr>\n<tr>\n<td>RDX:RAX</td>\n<td>r/m64</td>\n<td>RAX</td>\n<td>RDX</td>\n</tr>\n</tbody></table>\n<p>Example</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SECTION .data</span><br><span class=\"line\">dividend        dq      0000000800300020h</span><br><span class=\"line\">divisor         dd      00000100h</span><br><span class=\"line\"></span><br><span class=\"line\">SECTION .text</span><br><span class=\"line\">  global _start</span><br><span class=\"line\"></span><br><span class=\"line\">_start:</span><br><span class=\"line\">  mov   edx, [dividend+4]</span><br><span class=\"line\">  mov   eax, [dividend]</span><br><span class=\"line\">  div   dword [divisor]\t; need to specify the size of the content by using memory address</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>idiv (Signed divide)</strong></li>\n</ul>\n<h1 id=\"Chapter-12\"><a href=\"#Chapter-12\" class=\"headerlink\" title=\"Chapter 12\"></a>Chapter 12</h1><p><code>add dest, source</code> </p>\n<p>   $dest ← dest + source$</p>\n<ul>\n<li><p>EFLAGS are set according to the result</p>\n</li>\n<li><p>Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmFzbS51cy94ZG9jLzIuMDkuMDcvaHRtbC9uYXNtZG9jYi5odG1sI3NlY3Rpb24tQi4xLjI=\" title=\"https://www.nasm.us/xdoc/2.09.07/html/nasmdocb.html#section-B.1.2\">this table<i class=\"fa fa-external-link\"></i></span> to find available combination of dest and source</p>\n</li>\n</ul>\n<h1 id=\"Chapter-13\"><a href=\"#Chapter-13\" class=\"headerlink\" title=\"Chapter 13\"></a>Chapter 13</h1><p><code>sub dest, source</code>   </p>\n<p>  $dest ← dest - source$</p>\n<h1 id=\"Chapter-14\"><a href=\"#Chapter-14\" class=\"headerlink\" title=\"Chapter 14\"></a>Chapter 14</h1><p><code>mul src</code>  </p>\n<p> $eax ← eax \\times src$</p>\n<h1 id=\"Chapter-16\"><a href=\"#Chapter-16\" class=\"headerlink\" title=\"Chapter 16\"></a>Chapter 16</h1><h2 id=\"Initial-Process-Stack\"><a href=\"#Initial-Process-Stack\" class=\"headerlink\" title=\"Initial Process Stack\"></a>Initial Process Stack</h2><p>當主程式開始前，OS(exec)會先初始化stack，使其包含一些重要的資訊，如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">High Address</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">other system stuff</td>\n</tr>\n<tr>\n<td align=\"center\">…</td>\n</tr>\n<tr>\n<td align=\"center\"><span class=\"exturl\" data-url=\"aHR0cDovL2FydGljbGVzLm1hbnVnYXJnLmNvbS9hYm91dGVsZmF1eGlsaWFyeXZlY3RvcnMuaHRtbA==\" title=\"http://articles.manugarg.com/aboutelfauxiliaryvectors.html\">Auxiliary Vectors<i class=\"fa fa-external-link\"></i></span>    <em>4 words each</em></td>\n</tr>\n<tr>\n<td align=\"center\">Zero doubleword</td>\n</tr>\n<tr>\n<td align=\"center\">Address of last environment argument</td>\n</tr>\n<tr>\n<td align=\"center\">…</td>\n</tr>\n<tr>\n<td align=\"center\">Address of environment argument 2</td>\n</tr>\n<tr>\n<td align=\"center\">Address of environment argument 1   <em>doubleword</em></td>\n</tr>\n<tr>\n<td align=\"center\">Zero doubleword</td>\n</tr>\n<tr>\n<td align=\"center\">Address of Last Argument</td>\n</tr>\n<tr>\n<td align=\"center\">…</td>\n</tr>\n<tr>\n<td align=\"center\">Address of Argument 2</td>\n</tr>\n<tr>\n<td align=\"center\">Address of Argument 1   <em>doubleword</em></td>\n</tr>\n<tr>\n<td align=\"center\">Argument Count [<strong>esp</strong>]   <em>doubleword</em></td>\n</tr>\n<tr>\n<td align=\"center\">Low Address</td>\n</tr>\n</tbody></table>\n<p><strong>esp的位址</strong>一開始會存放argument的總數。而接下來存放的都是各argument的位址。Argument1預設是放置該程式的路徑，所以user輸入的參數會是從Argument2開始。</p>\n<p>在tutorial中，利用pop可以依序得到user輸入的command line argument。</p>\n<p>Reference <span class=\"exturl\" data-url=\"aHR0cDovL3JlZnNwZWNzLmxpbnV4Zm91bmRhdGlvbi5vcmcvRUxGL3pTZXJpZXMvbHpzYWJpMF96U2VyaWVzL3g4OTUuaHRtbA==\" title=\"http://refspecs.linuxfoundation.org/ELF/zSeries/lzsabi0_zSeries/x895.html\">1<i class=\"fa fa-external-link\"></i></span>  <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZHJlYW1pbmNvZGUubmV0L2ZvcnVtcy90b3BpYy8yODU1NTAtbmFzbS1saW51eC1nZXR0aW5nLWNvbW1hbmQtbGluZS1wYXJhbWV0ZXJzLw==\" title=\"https://www.dreamincode.net/forums/topic/285550-nasm-linux-getting-command-line-parameters/\">2<i class=\"fa fa-external-link\"></i></span></p>\n<h2 id=\"Set-register-to-zero\"><a href=\"#Set-register-to-zero\" class=\"headerlink\" title=\"Set register to zero\"></a>Set register to zero</h2><p><code>xor reg, reg</code>  該instruction是比較建議的方式來將register歸零，而非<code>mov reg, 0</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xor     reg          </span><br><span class=\"line\">     10110110</span><br><span class=\"line\">     10110110</span><br><span class=\"line\">   ------------</span><br><span class=\"line\">     00000000</span><br></pre></td></tr></table></figure>\n\n<p> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzMzNjY4Mjk1LzY3NDI2OTE=\" title=\"https://stackoverflow.com/a/33668295/6742691\">Refer<i class=\"fa fa-external-link\"></i></span></p>\n<h2 id=\"在gdb中輸入command-line-argument\"><a href=\"#在gdb中輸入command-line-argument\" class=\"headerlink\" title=\"在gdb中輸入command line argument\"></a>在gdb中輸入command line argument</h2><p><code>gdb --args  executable_name   arg1  arg2  arg3</code></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjEyMTA5NC9ob3ctZG8taS1ydW4tYS1wcm9ncmFtLXdpdGgtY29tbWFuZGxpbmUtYXJndW1lbnRzLXVzaW5nLWdkYi13aXRoaW4tYS1iYXNoLXNjcmlwdA==\" title=\"https://stackoverflow.com/questions/6121094/how-do-i-run-a-program-with-commandline-arguments-using-gdb-within-a-bash-script\">Refer<i class=\"fa fa-external-link\"></i></span></p>\n<h1 id=\"Chapter-17\"><a href=\"#Chapter-17\" class=\"headerlink\" title=\"Chapter 17\"></a>Chapter 17</h1><h2 id=\"local-labels\"><a href=\"#local-labels\" class=\"headerlink\" title=\"local labels\"></a>local labels</h2><p>透過namespace使相同名字的label能夠重複使用，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label1:  </span><br><span class=\"line\">    .loop:  </span><br><span class=\"line\">       ...  </span><br><span class=\"line\">       jmp .loop\t\t\t;這會跳到label1底下的.loop而非label2底下的.loop</span><br><span class=\"line\">  </span><br><span class=\"line\">label2:</span><br><span class=\"line\">    .loop:  </span><br><span class=\"line\">       ...  </span><br><span class=\"line\">       jmp .loop  </span><br><span class=\"line\">  </span><br><span class=\"line\">jmp label1.loop\t\t;當從其他地方要呼叫時，只要將global label(namespace)配上local label即可access</span><br></pre></td></tr></table></figure>\n\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudG9ydGFsbC5uZXQvcHJvamVjdHMveWFzbS9tYW51YWwvaHRtbC9uYXNtLWxvY2FsLWxhYmVsLmh0bWw=\" title=\"https://www.tortall.net/projects/yasm/manual/html/nasm-local-label.html\">Reference<i class=\"fa fa-external-link\"></i></span></p>\n<h1 id=\"Chapter-19\"><a href=\"#Chapter-19\" class=\"headerlink\" title=\"Chapter 19\"></a>Chapter 19</h1><h2 id=\"sys-execve\"><a href=\"#sys-execve\" class=\"headerlink\" title=\"sys_execve\"></a>sys_execve</h2><p><em>executes a new program.</em></p>\n<p><code>eax</code>  11</p>\n<p><code>ebx</code>  address of the file </p>\n<p><code>ecx</code>  address of arguments</p>\n<p><code>edx</code>  address of the environment variables</p>\n<p>the address points to the variable in the section .data</p>\n<p>（其實該函數可以討論的更深，但我覺得之後研究OS再深入做筆記）</p>\n<h1 id=\"Chapter-20\"><a href=\"#Chapter-20\" class=\"headerlink\" title=\"Chapter 20\"></a>Chapter 20</h1><h2 id=\"sys-fork\"><a href=\"#sys-fork\" class=\"headerlink\" title=\"sys_fork\"></a>sys_fork</h2><p><em>invoke a child process</em></p>\n<p><code>eax</code>  2</p>\n<p>After invoking sys_fork, if <code>eax</code>  is 0, then it implies that the current process is a child process.</p>"},{"title":"Union-Find Algorithm","mathjax":true,"date":"2016-07-12T06:13:00.000Z","_content":"The algorithm is used to detect a cycle in a undirected graph\n\nThere are two ways to implement the algorithm, one of which has the worst case in linear time.\n\nFirst method:\n\nWorst case: linear time {% math %}O(n){% endmath %}\n\n1. If the question has N vertices and M edges, after creating a graph based on previous vertices and edges,now we create a parent list (length N, 每一個index代表vertices, 而存放數字代表其parent) and initialise it with -1 for each elements.\n2. 當我們要尋找某一個edge是否產生cycle時，利用edge的source and destination來查看是否產生。透過parent list，當我們在尋找某x時，就利用recursive來一直不斷地找到某一element的parent是-1，然後回傳該parent；同樣的方法，尋找y，若是回傳的parent和x 回傳的parent一樣，代表他們在同一個subset，`​若是再加入x and y，就會產生Cycle`​；若沒有，則將x的subset和y的subset併成一個subset。<br>\n\n<!--more-->\n\n\n```cpp\n#include <iostream>\n#include <vector>\nusing namespace std;\n\n// a structure to represent an edge in graph\nstruct Edge\n{\n\tint src;\n\tint dest;\n};\n\n// a structure to represent a graph\nstruct Graph\n{\n\tint V;\n\tint E;\n\tvector<Edge> edge;\n};\n\n// Creates a graph with V vertices and E edges\nGraph* createGraph(int V, int E)\n{\n\tGraph *graph = new Graph;\n\tgraph->V = V;\n\tgraph->E = E;\n\tgraph->edge = vector<Edge>(E);\n\treturn graph;\n}\n\nint find(const vector<int> &parent, int i)\n{\n\tif(parent[i]==-1)\n\t\treturn i;\n\treturn find(parent, parent[i]);\n}\n\nvoid Union(vector<int> &parent, int x, int y)\n{\n\tparent[x] = y;\n}\n\n// The main function to check whether a given graph contains \n// cycle or not\nbool isCycle(Graph* graph, int V, int E)\n{\n    //用以尋找是否有cycle\n\tvector<int> parent(V, -1);\n\tfor(int i=0; i<E; i++){\n\t\tint x = find(parent, graph->edge[i].src);\n\t\tint y = find(parent, graph->edge[i].dest);\n\n\t\tif(x==y)\n\t\t\treturn 1;\n\n\t\tUnion(parent, x, y);\n\t}\n\treturn 0;\n}\n\n\nint main()\n{\n/* Let us create following graph\n         0\n         | \n         1 \n       /   \\        \n      /      \\\n     2 - - -  3        \n*/  \n         \n\tint V = 4, E = 4;\n\tstruct Graph *graph = createGraph(V,E);\n\n\tgraph->edge[0].src  = 0;\n\tgraph->edge[0].dest = 1;\n\n\tgraph->edge[1].src  = 1;\n\tgraph->edge[1].dest = 3;\n\n\tgraph->edge[2].src  = 1;\n\tgraph->edge[2].dest = 2;\n\n\tgraph->edge[3].src  = 2;\n\tgraph->edge[3].dest = 3;\n\n\tif(isCycle(graph, V, E))\n\t\tcout<<\"Has Cycle\"<<endl;\n\telse\n\t\tcout<<\"No Cycle\"<<endl;\n\n\treturn 0;\n}\n```\n\n簡單看parent list的變化\n{% codeblock line_number:false %}\nV  0  1  2  3 \np -1 -1 -1 -1\n{% endcodeblock %}\n\n加入Edge 0 v0 -\\> v1 &nbsp;&nbsp;*將V0的parent 變成 1， V0 and V1 are now in the same subset*\n{% codeblock line_number:false %}\nV 0  1  2  3\np 1 -1 -1 -1\n{% endcodeblock %}\n\n加入Edge 1 v1 -\\> v3 &nbsp;&nbsp;  *V0, V1 and V3 are now in the same subset*\n{% codeblock line_number:false %}\nV 0 1  2  3 \np 1 3 -1 -1 \n{% endcodeblock %}\n加入Edge 2 v1 -\\> v2  &nbsp;&nbsp;*在find V1時，會回傳V3，所以改變的是V3的parent* \n{% codeblock line_number:false %}\nV 0 1  2 3    //V0, V1, V2 and V3 are now in the same subset\n\np 1 3 -1 2\n{% endcodeblock %}\n\n加入Edge 3 v2 -\\> v3  &nbsp;&nbsp; *because V2 and V3 are in the same subset, if we add edge 3, a cycle will be created.*\n\n---\n\n但是，以上方法可以看出，每次find的時候，會把自己屬於的subset全部跑過一遍，一直找到parent是-1的vertex，其worst case O(N)\n\n該方法可以被optimised to O(logN), the technique is called `​union by rank`​\n\n方法：\n\n1. 每個節點在初始時其parent都是自己，rank=0(每有比誰高或低）\n2. 每次搜尋兩個vertices，都會回傳他的root，若是root相同，代表兩點在同一個subset\n3. 並且在搜尋時，會使各parent和該Node的parent都成為該subset的root (path compression)，這樣子下次再做搜尋時，可以直接找到該subset的root，由此好好利用每一次的搜尋\n4. 若是兩點不在同一個subset，代表現在若要加一條edge，那個兩點之subset會合併成同一subset\n\n```cpp\n#include <iostream>\n#include <vector>\nstruct Edge\n{\n\tint src;\n\tint dest;\n};\n\nstruct Graph\n{\n\tint V;\n\tint E;\n\tvector<Edge> edge;\n};\n\nstruct subset\n{\n    int parent;\n    int rank;\n};\n\nGraph* createGraph(int V, int E)\n{\n\tGraph *graph = new Graph;\n\tgraph->V = V;\n\tgraph->E = E;\n\tgraph->edge = vector<Edge>(E);\n\treturn graph;\n}\n\nint find(vector<subset> &subsets, int i)\n{\n    // find root and make root as parent of i (path compression)\n\tif(subsets[i].parent!=i)\n\t\tsubsets[i].parent = find(subsets, subsets[i].parent);\n\treturn subsets[i].parent;\n}\n\nvoid Union(vector<subset> &subsets, int xroot, int yroot)\n{\n\t// Attach smaller rank tree under root of high rank tree\n\tif(subsets[xroot].rank < subsets[yroot].rank)\n\t\tsubsets[xroot].parent = yroot;\n\telse if(subsets[xroot].rank > subsets[yroot].rank)\n\t\tsubsets[yroot].parent = xroot;\n\n\t// If ranks are same, then make one as root and increment\n    // its rank by one\n\telse{\n\t\tsubsets[xroot].parent = yroot;\n\t\tsubsets[yroot].rank++;\n\t}\n}\n\nbool isCycle(Graph* graph, int V, int E)\n{\n\tvector<subset> subsets(V);\n\tfor(int v=0; v<V; v++){\n\t\tsubsets[v].parent = v;\n\t\tsubsets[v].rank = 0;\n\t}\n\t\n\t// Iterate through all edges of graph, find sets of both\n    // vertices of every edge, if sets are same, then there is\n    // cycle in graph.\n\tfor(int i=0; i<E; i++){\n\t\tint x = find(subsets, graph->edge[i].src);\n\t\tint y = find(subsets, graph->edge[i].dest);\n\n\t\tif(x==y)\n\t\t\treturn 1;\n\n\t\tUnion(subsets, x, y);\n\t}\n\treturn 0;\n}\n\n\nint main()\n{\n\tint V = 4, E = 4;\n\tstruct Graph *graph = createGraph(V,E);\n\n\tgraph->edge[0].src  = 0;\n\tgraph->edge[0].dest = 1;\n\n\tgraph->edge[1].src  = 1;\n\tgraph->edge[1].dest = 3;\n\n\tgraph->edge[2].src  = 1;\n\tgraph->edge[2].dest = 2;\n\n\tgraph->edge[3].src  = 2;\n\tgraph->edge[3].dest = 3;\n\n\n\tif(isCycle(graph, V, E))\n\t\tcout<<\"Has Cycle\"<<endl;\n\telse\n\t\tcout<<\"No Cycle\"<<endl;\n\n\treturn 0;\n\n}\n```\n\n可參考：<http://www.csie.ntnu.edu.tw/~u91029/Set.html> 同樣方法不同說法","source":"_posts/Union-Find Algorithm.md","raw":"title: Union-Find Algorithm\ntags:\n  - Graph\ncategories:\n  - Algorithms\nmathjax: true\ndate: 2016-07-12 14:13:00\n---\nThe algorithm is used to detect a cycle in a undirected graph\n\nThere are two ways to implement the algorithm, one of which has the worst case in linear time.\n\nFirst method:\n\nWorst case: linear time {% math %}O(n){% endmath %}\n\n1. If the question has N vertices and M edges, after creating a graph based on previous vertices and edges,now we create a parent list (length N, 每一個index代表vertices, 而存放數字代表其parent) and initialise it with -1 for each elements.\n2. 當我們要尋找某一個edge是否產生cycle時，利用edge的source and destination來查看是否產生。透過parent list，當我們在尋找某x時，就利用recursive來一直不斷地找到某一element的parent是-1，然後回傳該parent；同樣的方法，尋找y，若是回傳的parent和x 回傳的parent一樣，代表他們在同一個subset，`​若是再加入x and y，就會產生Cycle`​；若沒有，則將x的subset和y的subset併成一個subset。<br>\n\n<!--more-->\n\n\n```cpp\n#include <iostream>\n#include <vector>\nusing namespace std;\n\n// a structure to represent an edge in graph\nstruct Edge\n{\n\tint src;\n\tint dest;\n};\n\n// a structure to represent a graph\nstruct Graph\n{\n\tint V;\n\tint E;\n\tvector<Edge> edge;\n};\n\n// Creates a graph with V vertices and E edges\nGraph* createGraph(int V, int E)\n{\n\tGraph *graph = new Graph;\n\tgraph->V = V;\n\tgraph->E = E;\n\tgraph->edge = vector<Edge>(E);\n\treturn graph;\n}\n\nint find(const vector<int> &parent, int i)\n{\n\tif(parent[i]==-1)\n\t\treturn i;\n\treturn find(parent, parent[i]);\n}\n\nvoid Union(vector<int> &parent, int x, int y)\n{\n\tparent[x] = y;\n}\n\n// The main function to check whether a given graph contains \n// cycle or not\nbool isCycle(Graph* graph, int V, int E)\n{\n    //用以尋找是否有cycle\n\tvector<int> parent(V, -1);\n\tfor(int i=0; i<E; i++){\n\t\tint x = find(parent, graph->edge[i].src);\n\t\tint y = find(parent, graph->edge[i].dest);\n\n\t\tif(x==y)\n\t\t\treturn 1;\n\n\t\tUnion(parent, x, y);\n\t}\n\treturn 0;\n}\n\n\nint main()\n{\n/* Let us create following graph\n         0\n         | \n         1 \n       /   \\        \n      /      \\\n     2 - - -  3        \n*/  \n         \n\tint V = 4, E = 4;\n\tstruct Graph *graph = createGraph(V,E);\n\n\tgraph->edge[0].src  = 0;\n\tgraph->edge[0].dest = 1;\n\n\tgraph->edge[1].src  = 1;\n\tgraph->edge[1].dest = 3;\n\n\tgraph->edge[2].src  = 1;\n\tgraph->edge[2].dest = 2;\n\n\tgraph->edge[3].src  = 2;\n\tgraph->edge[3].dest = 3;\n\n\tif(isCycle(graph, V, E))\n\t\tcout<<\"Has Cycle\"<<endl;\n\telse\n\t\tcout<<\"No Cycle\"<<endl;\n\n\treturn 0;\n}\n```\n\n簡單看parent list的變化\n{% codeblock line_number:false %}\nV  0  1  2  3 \np -1 -1 -1 -1\n{% endcodeblock %}\n\n加入Edge 0 v0 -\\> v1 &nbsp;&nbsp;*將V0的parent 變成 1， V0 and V1 are now in the same subset*\n{% codeblock line_number:false %}\nV 0  1  2  3\np 1 -1 -1 -1\n{% endcodeblock %}\n\n加入Edge 1 v1 -\\> v3 &nbsp;&nbsp;  *V0, V1 and V3 are now in the same subset*\n{% codeblock line_number:false %}\nV 0 1  2  3 \np 1 3 -1 -1 \n{% endcodeblock %}\n加入Edge 2 v1 -\\> v2  &nbsp;&nbsp;*在find V1時，會回傳V3，所以改變的是V3的parent* \n{% codeblock line_number:false %}\nV 0 1  2 3    //V0, V1, V2 and V3 are now in the same subset\n\np 1 3 -1 2\n{% endcodeblock %}\n\n加入Edge 3 v2 -\\> v3  &nbsp;&nbsp; *because V2 and V3 are in the same subset, if we add edge 3, a cycle will be created.*\n\n---\n\n但是，以上方法可以看出，每次find的時候，會把自己屬於的subset全部跑過一遍，一直找到parent是-1的vertex，其worst case O(N)\n\n該方法可以被optimised to O(logN), the technique is called `​union by rank`​\n\n方法：\n\n1. 每個節點在初始時其parent都是自己，rank=0(每有比誰高或低）\n2. 每次搜尋兩個vertices，都會回傳他的root，若是root相同，代表兩點在同一個subset\n3. 並且在搜尋時，會使各parent和該Node的parent都成為該subset的root (path compression)，這樣子下次再做搜尋時，可以直接找到該subset的root，由此好好利用每一次的搜尋\n4. 若是兩點不在同一個subset，代表現在若要加一條edge，那個兩點之subset會合併成同一subset\n\n```cpp\n#include <iostream>\n#include <vector>\nstruct Edge\n{\n\tint src;\n\tint dest;\n};\n\nstruct Graph\n{\n\tint V;\n\tint E;\n\tvector<Edge> edge;\n};\n\nstruct subset\n{\n    int parent;\n    int rank;\n};\n\nGraph* createGraph(int V, int E)\n{\n\tGraph *graph = new Graph;\n\tgraph->V = V;\n\tgraph->E = E;\n\tgraph->edge = vector<Edge>(E);\n\treturn graph;\n}\n\nint find(vector<subset> &subsets, int i)\n{\n    // find root and make root as parent of i (path compression)\n\tif(subsets[i].parent!=i)\n\t\tsubsets[i].parent = find(subsets, subsets[i].parent);\n\treturn subsets[i].parent;\n}\n\nvoid Union(vector<subset> &subsets, int xroot, int yroot)\n{\n\t// Attach smaller rank tree under root of high rank tree\n\tif(subsets[xroot].rank < subsets[yroot].rank)\n\t\tsubsets[xroot].parent = yroot;\n\telse if(subsets[xroot].rank > subsets[yroot].rank)\n\t\tsubsets[yroot].parent = xroot;\n\n\t// If ranks are same, then make one as root and increment\n    // its rank by one\n\telse{\n\t\tsubsets[xroot].parent = yroot;\n\t\tsubsets[yroot].rank++;\n\t}\n}\n\nbool isCycle(Graph* graph, int V, int E)\n{\n\tvector<subset> subsets(V);\n\tfor(int v=0; v<V; v++){\n\t\tsubsets[v].parent = v;\n\t\tsubsets[v].rank = 0;\n\t}\n\t\n\t// Iterate through all edges of graph, find sets of both\n    // vertices of every edge, if sets are same, then there is\n    // cycle in graph.\n\tfor(int i=0; i<E; i++){\n\t\tint x = find(subsets, graph->edge[i].src);\n\t\tint y = find(subsets, graph->edge[i].dest);\n\n\t\tif(x==y)\n\t\t\treturn 1;\n\n\t\tUnion(subsets, x, y);\n\t}\n\treturn 0;\n}\n\n\nint main()\n{\n\tint V = 4, E = 4;\n\tstruct Graph *graph = createGraph(V,E);\n\n\tgraph->edge[0].src  = 0;\n\tgraph->edge[0].dest = 1;\n\n\tgraph->edge[1].src  = 1;\n\tgraph->edge[1].dest = 3;\n\n\tgraph->edge[2].src  = 1;\n\tgraph->edge[2].dest = 2;\n\n\tgraph->edge[3].src  = 2;\n\tgraph->edge[3].dest = 3;\n\n\n\tif(isCycle(graph, V, E))\n\t\tcout<<\"Has Cycle\"<<endl;\n\telse\n\t\tcout<<\"No Cycle\"<<endl;\n\n\treturn 0;\n\n}\n```\n\n可參考：<http://www.csie.ntnu.edu.tw/~u91029/Set.html> 同樣方法不同說法","slug":"Union-Find Algorithm","published":1,"updated":"2019-06-21T06:36:40.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxijp55b000hdvw9wkyjagyh","content":"<p>The algorithm is used to detect a cycle in a undirected graph</p>\n<p>There are two ways to implement the algorithm, one of which has the worst case in linear time.</p>\n<p>First method:</p>\n<p>Worst case: linear time <span>$O(n)$</span><!-- Has MathJax --></p>\n<ol>\n<li>If the question has N vertices and M edges, after creating a graph based on previous vertices and edges,now we create a parent list (length N, 每一個index代表vertices, 而存放數字代表其parent) and initialise it with -1 for each elements.</li>\n<li>當我們要尋找某一個edge是否產生cycle時，利用edge的source and destination來查看是否產生。透過parent list，當我們在尋找某x時，就利用recursive來一直不斷地找到某一element的parent是-1，然後回傳該parent；同樣的方法，尋找y，若是回傳的parent和x 回傳的parent一樣，代表他們在同一個subset，<code>​若是再加入x and y，就會產生Cycle</code>​；若沒有，則將x的subset和y的subset併成一個subset。<br></li>\n</ol>\n<a id=\"more\"></a>\n\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a structure to represent an edge in graph</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> src;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> dest;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a structure to represent a graph</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Graph</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> V;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> E;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;Edge&gt; edge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Creates a graph with V vertices and E edges</span></span><br><span class=\"line\"><span class=\"function\">Graph* <span class=\"title\">createGraph</span><span class=\"params\">(<span class=\"keyword\">int</span> V, <span class=\"keyword\">int</span> E)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tGraph *graph = <span class=\"keyword\">new</span> Graph;</span><br><span class=\"line\">\tgraph-&gt;V = V;</span><br><span class=\"line\">\tgraph-&gt;E = E;</span><br><span class=\"line\">\tgraph-&gt;edge = <span class=\"built_in\">vector</span>&lt;Edge&gt;(E);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> graph;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;parent, <span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(parent[i]==<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> find(parent, parent[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Union</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;parent, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tparent[x] = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The main function to check whether a given graph contains </span></span><br><span class=\"line\"><span class=\"comment\">// cycle or not</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isCycle</span><span class=\"params\">(Graph* graph, <span class=\"keyword\">int</span> V, <span class=\"keyword\">int</span> E)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//用以尋找是否有cycle</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; parent(V, <span class=\"number\">-1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;E; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = find(parent, graph-&gt;edge[i].src);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> y = find(parent, graph-&gt;edge[i].dest);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x==y)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tUnion(parent, x, y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/* Let us create following graph</span></span><br><span class=\"line\"><span class=\"comment\">         0</span></span><br><span class=\"line\"><span class=\"comment\">         | </span></span><br><span class=\"line\"><span class=\"comment\">         1 </span></span><br><span class=\"line\"><span class=\"comment\">       /   \\        </span></span><br><span class=\"line\"><span class=\"comment\">      /      \\</span></span><br><span class=\"line\"><span class=\"comment\">     2 - - -  3        </span></span><br><span class=\"line\"><span class=\"comment\">*/</span>  </span><br><span class=\"line\">         </span><br><span class=\"line\">\t<span class=\"keyword\">int</span> V = <span class=\"number\">4</span>, E = <span class=\"number\">4</span>;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Graph</span> *<span class=\"title\">graph</span> = <span class=\"title\">createGraph</span>(<span class=\"title\">V</span>,<span class=\"title\">E</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">0</span>].src  = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">0</span>].dest = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">1</span>].src  = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">1</span>].dest = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">2</span>].src  = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">2</span>].dest = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">3</span>].src  = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">3</span>].dest = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(isCycle(graph, V, E))</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Has Cycle\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"No Cycle\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>簡單看parent list的變化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">V  0  1  2  3 </span><br><span class=\"line\">p -1 -1 -1 -1</span><br></pre></td></tr></table></figure>\n\n<p>加入Edge 0 v0 -&gt; v1 &nbsp;&nbsp;<em>將V0的parent 變成 1， V0 and V1 are now in the same subset</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">V 0  1  2  3</span><br><span class=\"line\">p 1 -1 -1 -1</span><br></pre></td></tr></table></figure>\n\n<p>加入Edge 1 v1 -&gt; v3 &nbsp;&nbsp;  <em>V0, V1 and V3 are now in the same subset</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">V 0 1  2  3 </span><br><span class=\"line\">p 1 3 -1 -1 </span><br></pre></td></tr></table></figure>\n<p>加入Edge 2 v1 -&gt; v2  &nbsp;&nbsp;<em>在find V1時，會回傳V3，所以改變的是V3的parent</em> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">V 0 1  2 3    //V0, V1, V2 and V3 are now in the same subset</span><br><span class=\"line\"></span><br><span class=\"line\">p 1 3 -1 2</span><br></pre></td></tr></table></figure>\n\n<p>加入Edge 3 v2 -&gt; v3  &nbsp;&nbsp; <em>because V2 and V3 are in the same subset, if we add edge 3, a cycle will be created.</em></p>\n<hr>\n<p>但是，以上方法可以看出，每次find的時候，會把自己屬於的subset全部跑過一遍，一直找到parent是-1的vertex，其worst case O(N)</p>\n<p>該方法可以被optimised to O(logN), the technique is called <code>​union by rank</code>​</p>\n<p>方法：</p>\n<ol>\n<li>每個節點在初始時其parent都是自己，rank=0(每有比誰高或低）</li>\n<li>每次搜尋兩個vertices，都會回傳他的root，若是root相同，代表兩點在同一個subset</li>\n<li>並且在搜尋時，會使各parent和該Node的parent都成為該subset的root (path compression)，這樣子下次再做搜尋時，可以直接找到該subset的root，由此好好利用每一次的搜尋</li>\n<li>若是兩點不在同一個subset，代表現在若要加一條edge，那個兩點之subset會合併成同一subset</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> src;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> dest;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Graph</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> V;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> E;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;Edge&gt; edge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">subset</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> parent;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rank;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Graph* <span class=\"title\">createGraph</span><span class=\"params\">(<span class=\"keyword\">int</span> V, <span class=\"keyword\">int</span> E)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tGraph *graph = <span class=\"keyword\">new</span> Graph;</span><br><span class=\"line\">\tgraph-&gt;V = V;</span><br><span class=\"line\">\tgraph-&gt;E = E;</span><br><span class=\"line\">\tgraph-&gt;edge = <span class=\"built_in\">vector</span>&lt;Edge&gt;(E);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> graph;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;subset&gt; &amp;subsets, <span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// find root and make root as parent of i (path compression)</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(subsets[i].parent!=i)</span><br><span class=\"line\">\t\tsubsets[i].parent = find(subsets, subsets[i].parent);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> subsets[i].parent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Union</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;subset&gt; &amp;subsets, <span class=\"keyword\">int</span> xroot, <span class=\"keyword\">int</span> yroot)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Attach smaller rank tree under root of high rank tree</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(subsets[xroot].rank &lt; subsets[yroot].rank)</span><br><span class=\"line\">\t\tsubsets[xroot].parent = yroot;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(subsets[xroot].rank &gt; subsets[yroot].rank)</span><br><span class=\"line\">\t\tsubsets[yroot].parent = xroot;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// If ranks are same, then make one as root and increment</span></span><br><span class=\"line\">    <span class=\"comment\">// its rank by one</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tsubsets[xroot].parent = yroot;</span><br><span class=\"line\">\t\tsubsets[yroot].rank++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isCycle</span><span class=\"params\">(Graph* graph, <span class=\"keyword\">int</span> V, <span class=\"keyword\">int</span> E)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;subset&gt; subsets(V);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v=<span class=\"number\">0</span>; v&lt;V; v++)&#123;</span><br><span class=\"line\">\t\tsubsets[v].parent = v;</span><br><span class=\"line\">\t\tsubsets[v].rank = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// Iterate through all edges of graph, find sets of both</span></span><br><span class=\"line\">    <span class=\"comment\">// vertices of every edge, if sets are same, then there is</span></span><br><span class=\"line\">    <span class=\"comment\">// cycle in graph.</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;E; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = find(subsets, graph-&gt;edge[i].src);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> y = find(subsets, graph-&gt;edge[i].dest);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x==y)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tUnion(subsets, x, y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> V = <span class=\"number\">4</span>, E = <span class=\"number\">4</span>;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Graph</span> *<span class=\"title\">graph</span> = <span class=\"title\">createGraph</span>(<span class=\"title\">V</span>,<span class=\"title\">E</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">0</span>].src  = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">0</span>].dest = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">1</span>].src  = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">1</span>].dest = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">2</span>].src  = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">2</span>].dest = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">3</span>].src  = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">3</span>].dest = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(isCycle(graph, V, E))</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Has Cycle\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"No Cycle\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可參考：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jc2llLm50bnUuZWR1LnR3L351OTEwMjkvU2V0Lmh0bWw=\" title=\"http://www.csie.ntnu.edu.tw/~u91029/Set.html\">http://www.csie.ntnu.edu.tw/~u91029/Set.html<i class=\"fa fa-external-link\"></i></span> 同樣方法不同說法</p>\n","site":{"data":{}},"excerpt":"<p>The algorithm is used to detect a cycle in a undirected graph</p>\n<p>There are two ways to implement the algorithm, one of which has the worst case in linear time.</p>\n<p>First method:</p>\n<p>Worst case: linear time <span>$O(n)$</span><!-- Has MathJax --></p>\n<ol>\n<li>If the question has N vertices and M edges, after creating a graph based on previous vertices and edges,now we create a parent list (length N, 每一個index代表vertices, 而存放數字代表其parent) and initialise it with -1 for each elements.</li>\n<li>當我們要尋找某一個edge是否產生cycle時，利用edge的source and destination來查看是否產生。透過parent list，當我們在尋找某x時，就利用recursive來一直不斷地找到某一element的parent是-1，然後回傳該parent；同樣的方法，尋找y，若是回傳的parent和x 回傳的parent一樣，代表他們在同一個subset，<code>​若是再加入x and y，就會產生Cycle</code>​；若沒有，則將x的subset和y的subset併成一個subset。<br></li>\n</ol>","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a structure to represent an edge in graph</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> src;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> dest;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a structure to represent a graph</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Graph</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> V;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> E;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;Edge&gt; edge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Creates a graph with V vertices and E edges</span></span><br><span class=\"line\"><span class=\"function\">Graph* <span class=\"title\">createGraph</span><span class=\"params\">(<span class=\"keyword\">int</span> V, <span class=\"keyword\">int</span> E)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tGraph *graph = <span class=\"keyword\">new</span> Graph;</span><br><span class=\"line\">\tgraph-&gt;V = V;</span><br><span class=\"line\">\tgraph-&gt;E = E;</span><br><span class=\"line\">\tgraph-&gt;edge = <span class=\"built_in\">vector</span>&lt;Edge&gt;(E);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> graph;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;parent, <span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(parent[i]==<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> find(parent, parent[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Union</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; &amp;parent, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tparent[x] = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The main function to check whether a given graph contains </span></span><br><span class=\"line\"><span class=\"comment\">// cycle or not</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isCycle</span><span class=\"params\">(Graph* graph, <span class=\"keyword\">int</span> V, <span class=\"keyword\">int</span> E)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//用以尋找是否有cycle</span></span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; parent(V, <span class=\"number\">-1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;E; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = find(parent, graph-&gt;edge[i].src);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> y = find(parent, graph-&gt;edge[i].dest);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x==y)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tUnion(parent, x, y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/* Let us create following graph</span></span><br><span class=\"line\"><span class=\"comment\">         0</span></span><br><span class=\"line\"><span class=\"comment\">         | </span></span><br><span class=\"line\"><span class=\"comment\">         1 </span></span><br><span class=\"line\"><span class=\"comment\">       /   \\        </span></span><br><span class=\"line\"><span class=\"comment\">      /      \\</span></span><br><span class=\"line\"><span class=\"comment\">     2 - - -  3        </span></span><br><span class=\"line\"><span class=\"comment\">*/</span>  </span><br><span class=\"line\">         </span><br><span class=\"line\">\t<span class=\"keyword\">int</span> V = <span class=\"number\">4</span>, E = <span class=\"number\">4</span>;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Graph</span> *<span class=\"title\">graph</span> = <span class=\"title\">createGraph</span>(<span class=\"title\">V</span>,<span class=\"title\">E</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">0</span>].src  = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">0</span>].dest = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">1</span>].src  = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">1</span>].dest = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">2</span>].src  = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">2</span>].dest = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">3</span>].src  = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">3</span>].dest = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(isCycle(graph, V, E))</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Has Cycle\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"No Cycle\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>簡單看parent list的變化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">V  0  1  2  3 </span><br><span class=\"line\">p -1 -1 -1 -1</span><br></pre></td></tr></table></figure>\n\n<p>加入Edge 0 v0 -&gt; v1 &nbsp;&nbsp;<em>將V0的parent 變成 1， V0 and V1 are now in the same subset</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">V 0  1  2  3</span><br><span class=\"line\">p 1 -1 -1 -1</span><br></pre></td></tr></table></figure>\n\n<p>加入Edge 1 v1 -&gt; v3 &nbsp;&nbsp;  <em>V0, V1 and V3 are now in the same subset</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">V 0 1  2  3 </span><br><span class=\"line\">p 1 3 -1 -1 </span><br></pre></td></tr></table></figure>\n<p>加入Edge 2 v1 -&gt; v2  &nbsp;&nbsp;<em>在find V1時，會回傳V3，所以改變的是V3的parent</em> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">V 0 1  2 3    //V0, V1, V2 and V3 are now in the same subset</span><br><span class=\"line\"></span><br><span class=\"line\">p 1 3 -1 2</span><br></pre></td></tr></table></figure>\n\n<p>加入Edge 3 v2 -&gt; v3  &nbsp;&nbsp; <em>because V2 and V3 are in the same subset, if we add edge 3, a cycle will be created.</em></p>\n<hr>\n<p>但是，以上方法可以看出，每次find的時候，會把自己屬於的subset全部跑過一遍，一直找到parent是-1的vertex，其worst case O(N)</p>\n<p>該方法可以被optimised to O(logN), the technique is called <code>​union by rank</code>​</p>\n<p>方法：</p>\n<ol>\n<li>每個節點在初始時其parent都是自己，rank=0(每有比誰高或低）</li>\n<li>每次搜尋兩個vertices，都會回傳他的root，若是root相同，代表兩點在同一個subset</li>\n<li>並且在搜尋時，會使各parent和該Node的parent都成為該subset的root (path compression)，這樣子下次再做搜尋時，可以直接找到該subset的root，由此好好利用每一次的搜尋</li>\n<li>若是兩點不在同一個subset，代表現在若要加一條edge，那個兩點之subset會合併成同一subset</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> src;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> dest;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Graph</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> V;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> E;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;Edge&gt; edge;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">subset</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> parent;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rank;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Graph* <span class=\"title\">createGraph</span><span class=\"params\">(<span class=\"keyword\">int</span> V, <span class=\"keyword\">int</span> E)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tGraph *graph = <span class=\"keyword\">new</span> Graph;</span><br><span class=\"line\">\tgraph-&gt;V = V;</span><br><span class=\"line\">\tgraph-&gt;E = E;</span><br><span class=\"line\">\tgraph-&gt;edge = <span class=\"built_in\">vector</span>&lt;Edge&gt;(E);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> graph;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;subset&gt; &amp;subsets, <span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// find root and make root as parent of i (path compression)</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(subsets[i].parent!=i)</span><br><span class=\"line\">\t\tsubsets[i].parent = find(subsets, subsets[i].parent);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> subsets[i].parent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Union</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;subset&gt; &amp;subsets, <span class=\"keyword\">int</span> xroot, <span class=\"keyword\">int</span> yroot)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Attach smaller rank tree under root of high rank tree</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(subsets[xroot].rank &lt; subsets[yroot].rank)</span><br><span class=\"line\">\t\tsubsets[xroot].parent = yroot;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(subsets[xroot].rank &gt; subsets[yroot].rank)</span><br><span class=\"line\">\t\tsubsets[yroot].parent = xroot;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// If ranks are same, then make one as root and increment</span></span><br><span class=\"line\">    <span class=\"comment\">// its rank by one</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tsubsets[xroot].parent = yroot;</span><br><span class=\"line\">\t\tsubsets[yroot].rank++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">isCycle</span><span class=\"params\">(Graph* graph, <span class=\"keyword\">int</span> V, <span class=\"keyword\">int</span> E)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">vector</span>&lt;subset&gt; subsets(V);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v=<span class=\"number\">0</span>; v&lt;V; v++)&#123;</span><br><span class=\"line\">\t\tsubsets[v].parent = v;</span><br><span class=\"line\">\t\tsubsets[v].rank = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// Iterate through all edges of graph, find sets of both</span></span><br><span class=\"line\">    <span class=\"comment\">// vertices of every edge, if sets are same, then there is</span></span><br><span class=\"line\">    <span class=\"comment\">// cycle in graph.</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;E; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = find(subsets, graph-&gt;edge[i].src);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> y = find(subsets, graph-&gt;edge[i].dest);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x==y)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tUnion(subsets, x, y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> V = <span class=\"number\">4</span>, E = <span class=\"number\">4</span>;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Graph</span> *<span class=\"title\">graph</span> = <span class=\"title\">createGraph</span>(<span class=\"title\">V</span>,<span class=\"title\">E</span>);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">0</span>].src  = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">0</span>].dest = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">1</span>].src  = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">1</span>].dest = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">2</span>].src  = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">2</span>].dest = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">3</span>].src  = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tgraph-&gt;edge[<span class=\"number\">3</span>].dest = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(isCycle(graph, V, E))</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Has Cycle\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"No Cycle\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可參考：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jc2llLm50bnUuZWR1LnR3L351OTEwMjkvU2V0Lmh0bWw=\" title=\"http://www.csie.ntnu.edu.tw/~u91029/Set.html\">http://www.csie.ntnu.edu.tw/~u91029/Set.html<i class=\"fa fa-external-link\"></i></span> 同樣方法不同說法</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjxijp5330008dvw9pgfg33xo","category_id":"cjxijp51s0004dvw96aw6jto0","_id":"cjxijp550000edvw9ns6u2v5h"},{"post_id":"cjxijp4zd0000dvw9vwe9qlnq","category_id":"cjxijp51s0004dvw96aw6jto0","_id":"cjxijp55i000idvw95v2tfbjj"},{"post_id":"cjxijp50r0002dvw9znvmk0id","category_id":"cjxijp51s0004dvw96aw6jto0","_id":"cjxijp55p000ldvw9g83p8kf2"},{"post_id":"cjxijp55b000hdvw9wkyjagyh","category_id":"cjxijp51s0004dvw96aw6jto0","_id":"cjxijp55z000pdvw9el431f5v"},{"post_id":"cjxijp52c0006dvw9xnss8y32","category_id":"cjxijp51s0004dvw96aw6jto0","_id":"cjxijp568000sdvw9g64sekh3"},{"post_id":"cjxijp53g0009dvw9xzejftq4","category_id":"cjxijp55n000kdvw919vqf3rg","_id":"cjxijp56e000vdvw9x94zd7gv"},{"post_id":"cjxijp54d000cdvw9ltldq8hs","category_id":"cjxijp55n000kdvw919vqf3rg","_id":"cjxijp56p000zdvw99b8dbk97"},{"post_id":"cjxijp54t000ddvw9z32coc6q","category_id":"cjxijp55n000kdvw919vqf3rg","_id":"cjxijp56w0012dvw9v54leopy"}],"PostTag":[{"post_id":"cjxijp4zd0000dvw9vwe9qlnq","tag_id":"cjxijp5280005dvw96mmwy1yl","_id":"cjxijp55j000jdvw9wlk2yqw9"},{"post_id":"cjxijp4zd0000dvw9vwe9qlnq","tag_id":"cjxijp53x000bdvw9sa6ra657","_id":"cjxijp55p000mdvw9xtdk25bo"},{"post_id":"cjxijp55b000hdvw9wkyjagyh","tag_id":"cjxijp556000gdvw9dxlx7r0m","_id":"cjxijp55w000odvw9a124nc3h"},{"post_id":"cjxijp50r0002dvw9znvmk0id","tag_id":"cjxijp556000gdvw9dxlx7r0m","_id":"cjxijp56a000tdvw9nchfdws5"},{"post_id":"cjxijp50r0002dvw9znvmk0id","tag_id":"cjxijp53x000bdvw9sa6ra657","_id":"cjxijp56f000wdvw9bidf3d6f"},{"post_id":"cjxijp52c0006dvw9xnss8y32","tag_id":"cjxijp556000gdvw9dxlx7r0m","_id":"cjxijp56m000ydvw9j1nvk0oi"},{"post_id":"cjxijp5330008dvw9pgfg33xo","tag_id":"cjxijp5280005dvw96mmwy1yl","_id":"cjxijp56u0011dvw9y3smelaj"},{"post_id":"cjxijp5330008dvw9pgfg33xo","tag_id":"cjxijp53x000bdvw9sa6ra657","_id":"cjxijp56w0013dvw9rr5h2hn5"},{"post_id":"cjxijp53g0009dvw9xzejftq4","tag_id":"cjxijp56q0010dvw9u8uai83d","_id":"cjxijp57b0017dvw9za21scz2"},{"post_id":"cjxijp53g0009dvw9xzejftq4","tag_id":"cjxijp56x0014dvw9rhx4rqse","_id":"cjxijp57c0018dvw9vz09i79n"},{"post_id":"cjxijp53g0009dvw9xzejftq4","tag_id":"cjxijp5720015dvw9d6qsget8","_id":"cjxijp57f001advw9zpwg6sas"},{"post_id":"cjxijp54d000cdvw9ltldq8hs","tag_id":"cjxijp5780016dvw9jzsg24eo","_id":"cjxijp57o001cdvw92b8uuwbh"},{"post_id":"cjxijp54d000cdvw9ltldq8hs","tag_id":"cjxijp57d0019dvw9t8yhmt5n","_id":"cjxijp57q001ddvw9lzl368lz"},{"post_id":"cjxijp54t000ddvw9z32coc6q","tag_id":"cjxijp57d0019dvw9t8yhmt5n","_id":"cjxijp57z001fdvw9fmh9dzkd"},{"post_id":"cjxijp54t000ddvw9z32coc6q","tag_id":"cjxijp5780016dvw9jzsg24eo","_id":"cjxijp581001gdvw9kcdg66za"}],"Tag":[{"name":"Data Structures","_id":"cjxijp5280005dvw96mmwy1yl"},{"name":"Hackerrank","_id":"cjxijp53x000bdvw9sa6ra657"},{"name":"Graph","_id":"cjxijp556000gdvw9dxlx7r0m"},{"name":"Computer Networking","_id":"cjxijp56q0010dvw9u8uai83d"},{"name":"DNS","_id":"cjxijp56x0014dvw9rhx4rqse"},{"name":"TCP","_id":"cjxijp5720015dvw9d6qsget8"},{"name":"NASM","_id":"cjxijp5780016dvw9jzsg24eo"},{"name":"Assembly","_id":"cjxijp57d0019dvw9t8yhmt5n"}]}}